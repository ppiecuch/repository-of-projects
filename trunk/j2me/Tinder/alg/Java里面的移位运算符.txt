byte b = 15;
b >> 32 是多少?
 
--------------------------------------------------------------------------------------------------------
移位长度总是介于0到31之间，如果左操作数是long类型的，则介于0到63之间。这个长度是对32取余的，如果左操作数是long类型的，则对64取余。如果试图对一个int数值移位32位，或者是对一个long数值移位64位，都只能返回这个数值自身的值。没有任何移位长度可以让一个int数值丢弃其所有的32位，或者是让一个long数值丢弃其所有的64位。 
--------------------------------------------------------------------------------------------------------
如果移位数>=32,则先对32取余再移位
15>>32==15>>0 
--------------------------------------------------------------------------------------------------------
byte b = 15;
b >> 15 == 0
int b = 15;
b >> 15 == 0
--------------------------------------------------------------------------------------------------
updated at 12/12/2006
-15 >>> -3 == 7
15 >>> -3 == 0
-15 >> -3 == -1
15 >> -3 == 0


 原因：

-3移位时，Java里面的循环移位会自动处理成32 - 3 = 29

当然对于，long型的数据，就是64 - 3 = 61了

-----------------------------------------------------------------------------------------------------------------

-3 >>> -3 = ?还是Java的移位
Java中对负数的表示方法是把绝对值得原码按位取反然后加1
对3来说，原码是
00000000 00000000 00000000 00000011
按位取反之后
11111111 11111111 11111111 11111100
然后加1
11111111 11111111 11111111 11111101
 
好了，我们就对这个来进行移位
Java中的移位是循环移位
对于int型来说，移位的最大值是32
我们现在是-3， 所以就相当于32 - 3 = 29
也就是 -3 >>> 29
所以我们得到了结果是7

本文来自CSDN博客，转载请标明出处：http://blog.csdn.net/xueyong1203/archive/2007/01/05/1474487.aspx