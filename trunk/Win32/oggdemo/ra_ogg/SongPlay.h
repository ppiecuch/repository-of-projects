
/**********************************************************************************************************************/
/*******			CDSMP3Play.cpp	: 定义 DLL 应用程序的导出函数。									*******************/
/*******			Author			: xietao														*******************/         
/*******			Time			: 2009-6-23														*******************/ 
/*******			Publish			: radio_arts													*******************/
/**********************************************************************************************************************/

/*************************同客户端交互信息*****************************************************************************/
#define USER_MSG_UPDATE_MUSIC_DATA		WM_USER + 0x1045							// 刷新播放数据
#define WM_PLAYOVER						WM_USER+0x3001								//歌曲播放完毕发送该消息到主窗口界面
#define WM_NEEDLOADDATA					WM_USER+0x3002								//通知客户端收到消息时需要加载数据到缓冲区
/*************************结束****************************************************************************************/

/*************************歌曲播放指令********************************************************************************/

#define CONTROL_INITINFO				1											//lpReceiveData : 传入INITINFO 结构体信息			・初始化
#define CONTROL_PLAY					2											//lpReceiveData : 置为0，							・播放
#define CONTROL_PAUSE					3											//lpReceiveData : 置为0								・暂停
#define CONTROL_STOP					4											//lpReceiveData : 置为0								・停止
//#define CONTROL_RELEASE				5											//lpReceiveData : 置为0								・关闭释放
#define CONTROL_SETPLAYPOS				6											//lpReceiveData : 传入毫秒数						・设置播放位置   
#define CONTROL_GETPLAYPOS				7											//lpReceiveData ：带回毫秒数						・获取播放位置
#define CONTROL_GETINFORMATION			8											//lpReceiveData : 带回歌曲信息						・歌曲信息获取
#define CONTROL_DURATION				9											//lpReceiveData : 带回歌曲总时间					・歌曲时间信息
//#define CONTROL_GETTIME				10											//lpReceiveData ：打开文件时带回文件播放时间		・不用初始化，直接使用此接口即可！
#define CONTROL_SETLRMODE				11											//设置左右声道的声音。    范围是-10000到+10000；
#define CONTROL_GETLRMODE				12											//获取左右声道的位置。    范围是-10000到+10000，-1000表示的是右声道静音，+10000表示左声道静音。
#define CONTROL_SETVOLUM				13											//设置缓冲区音量。范围是-10000到0；
#define CONTROL_GETVOLUM				14											//获取缓冲区音量。范围是-10000到0；
//#define CONTROL_GETMEMTAG				15											//获取读内存时的文件信息，区别读文件时获取信息的方式。
//#define CONTROL_GETEVENTHANDLE		16											//返回内存播放时，监听数据流加载的事件句柄
#define CONTROL_SETEQ					17											//设置EQ，EQ滑动条范围为为 -12 到 12；
#define	CONTROL_SETEQOPENDOWN			21											//设置EQ开关
#define CONTROL_RESETEQ					22											//重置均衡器

/***********************歌曲播放指令结束*****************************************************************************/

/***********************同步事件*************************************************************************************/
#define CONTROL_EVENTHANDLE				18											//数据流播放时创建的同步事件句柄; 
/***********************同步事件结束*********************************************************************************/

/***********************解码器初始化和释放指令***********************************************************************/
#define CONTROL_INITDECODER				19											//初始化解码器
#define CONTROL_RELEASEDECODER			20                                          //释放解码器
/***********************解码器初始化和释放指令结束*******************************************************************/


/**********************获取歌曲信息结构体****************************************************************************/
typedef struct tagSONGINFORMATION
{
	/*****music_tag**************************************************************************************************/
	string		tag;																//标签
	string		Title;																//歌曲名
	string		Artist;																//作者
	string		Album;																//专辑
	string		Data;																//年份
	string		CopyRight;															//说明
	string		type;																//类型
	int			track;																//音轨
	/*****music_tag**************************************************************************************************/

	/******music_format**********************************************************************************************/
	string		decode;																//编码器名称
	string		channel;															//声道
	int			samplerate;															//采样率
	int			bit;																//比特率
	int			framerate;															//码率
	int			time;																//歌曲总时间(毫秒/单位)
	bool		isCBR;																//TRUE:恒定码率(CBR) FALSE :(VBR)
	/******music_format*********************************************************************************************/	
}SONGINFO;
/********************获取歌曲信息结构体结束*************************************************************************/

/********************提供本地歌曲路径*******************************************************************************/
typedef struct tagSONGFILEPATH
{
	std::wstring FilePath;															//本地歌曲路径

}SONGFILEPATH;
/********************提供本地歌曲路径*******************************************************************************/

/********************歌曲播放前初始化*******************************************************************************/
typedef struct tagSONGINIT
{
	HWND hwnd;																		//客户端主窗口句柄,@必须提供						
	std::wstring file;																//要播放的本地文件路径
	unsigned char *membuff;															//客户端提供的数据流缓冲区
	BOOL isLoadFile;																/*@如果播放的是本地文件。则 isLoadFile = true，网络数据流时 isLoadFile = false;@*/
	unsigned ThreadID;																//客户端的提供的线程ID;@播数据流时必须提供
	tagSONGINIT()
	{
		membuff = NULL;
		isLoadFile = TRUE;															//默认为播放本地文件
	}
}SONGINIT;																			//初始化时，设置这两个变量，一定不能为空；
/*******************歌曲播放前初始化结束******************************************************************************/

/*******************设置均衡器结构体**********************************************************************************/
typedef struct tagSONGEQ
{
	int value[10];																	//EQ滑动条的值。		
}SONGEQ;

typedef struct tagSONGEQOPENDOWN	
{
	bool bOpen;																		//bOpen = false 关闭 true :打开
}SONGEQOPENDOWN;
/*******************设置均衡器结构体**********************************************************************************/  

/*******************说明：传入消息类型，dll根据得到的指令做出相应的处理；*********************************************/
/*******************lpReceiveData：参数用来客户端给dll传值；**********************************************************/
/*******************lpSendData:参数用来给客户端提供值*****************************************************************/

extern "C" _declspec(dllexport) int raGetSoundAddControl(int nMsgType,LPVOID lpReceiveData,LPVOID lpSendData) ;

//typedef int (*GetSoundAddControl)(int ,LPVOID,LPVOID);
//
//GetSoundAddControl _raGetSoundAddControl;

