From: =?gb2312?B?08kgV2luZG93cyBJbnRlcm5ldCBFeHBsb3JlciA5ILGjtOY=?=
Subject: Portable Network Graphics (PNG) Specification (Second Edition)
Date: Mon, 21 May 2012 16:25:02 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CD376E.46020480"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7600.16807

这是 MIME 格式的多方邮件。

------=_NextPart_000_0000_01CD376E.46020480
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.w3.org/TR/PNG/

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML lang=3Den =
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><TITLE>Portable Network =
Graphics (PNG) Specification (Second Edition)</TITLE>
<META content=3D"text/html; charset=3Dutf-8" =
http-equiv=3DContent-Type><LINK=20
rel=3Dstylesheet type=3Dtext/css =
href=3D"http://www.w3.org/TR/PNG/isostyle.css">
<STYLE type=3Dtext/css>DT {
	COLOR: black
}
</STYLE>
<LINK rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.w3.org/StyleSheets/TR/W3C-REC" media=3Dscreen>
<META name=3DGENERATOR content=3D"MSHTML 9.00.8112.16443"></HEAD>
<BODY>
<DIV class=3Dhead>
<P><A href=3D"http://www.w3.org/"><IMG alt=3DW3C=20
src=3D"http://www.w3.org/Icons/w3c_home" width=3D72 height=3D48></A></P>
<H1 id=3Dpagetitle>Portable Network Graphics (PNG) Specification (Second =

Edition)</H1>
<H1>Information technology =E2=80=94 Computer graphics and image =
processing =E2=80=94 Portable=20
Network Graphics (PNG): Functional specification. ISO/IEC 15948:2003 =
(E)</H1><!--h2 id=3D"pagesubtitle">W3C Recommendation 1 October 1996, =
revised 14 October 2003</h2-->
<H2 id=3Dpagesubtitle>W3C Recommendation 10 November 2003</H2>
<DL>
  <DT>This version:=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2003/REC-PNG-20031110">http://www.w3.org/TR/=
2003/REC-PNG-20031110</A>=20

  <DT>Latest version:=20
  <DD><A href=3D"http://www.w3.org/TR/PNG">http://www.w3.org/TR/PNG</A>=20
  <DT>Previous version:=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2003/PR-PNG-20030520">http://www.w3.org/TR/2=
003/PR-PNG-20030520</A>=20

  <DT>Editor:=20
  <DD>David Duce, Oxford Brookes University (Second Edition)=20
  <DT>Authors:=20
  <DD>See <A href=3D"http://www.w3.org/TR/PNG/#F-Relationship">author =
list</A>=20
  </DD></DL>
<P>Please refer to the <A=20
href=3D"http://www.w3.org/2003/11/REC-PNG-20031110-errata"><STRONG>errata=
</STRONG></A>=20
for this document, which may include some normative =
corrections.</P><!--p>This document is also available in these =
non-normative
      packages: <a href=3D"REC-SVG11-20030114.zip">zip archive of
      HTML</a> (without external dependencies) and <a
      href=3D"REC-SVG11-20030114.pdf">PDF</a>.</p-->
<P>See also the <A=20
href=3D"http://www.w3.org/Consortium/Translation/">translations</A> of =
this=20
document.</P>
<P class=3Dcopyright><A=20
href=3D"http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyrigh=
t</A> =C2=A9=20
2003 <A href=3D"http://www.w3.org/"><ACRONYM=20
title=3D"World Wide Web Consortium">W3C</ACRONYM></A><SUP>=C2=AE</SUP> =
(<A=20
href=3D"http://www.lcs.mit.edu/"><ACRONYM=20
title=3D"Massachusetts Institute of Technology">MIT</ACRONYM></A>, <A=20
href=3D"http://www.ercim.org/"><ACRONYM=20
title=3D"European Research Consortium for Informatics and =
Mathematics">ERCIM</ACRONYM></A>,=20
<A href=3D"http://www.keio.ac.jp/">Keio</A>), All Rights Reserved. W3C =
<A=20
href=3D"http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">l=
iability</A>,=20
<A=20
href=3D"http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">tra=
demark</A>,=20
<A =
href=3D"http://www.w3.org/Consortium/Legal/copyright-documents">document =

use</A> and <A=20
href=3D"http://www.w3.org/Consortium/Legal/copyright-software">software=20
licensing</A> rules apply.</P></DIV>
<HR title=3D"Separator from Header">

<H2 id=3Dspecabstract><A id=3Dabstract name=3Dabstract>Abstract</A></H2>
<P>This document describes PNG (Portable Network Graphics), an =
extensible file=20
format for the lossless, portable, well-compressed storage of raster =
images. PNG=20
provides a patent-free replacement for GIF and can also replace many =
common uses=20
of TIFF. Indexed-color, grayscale, and truecolor images are supported, =
plus an=20
optional alpha channel. Sample depths range from 1 to 16 bits.</P>
<P>PNG is designed to work well in online viewing applications, such as =
the=20
World Wide Web, so it is fully streamable with a progressive display =
option. PNG=20
is robust, providing both full file integrity checking and simple =
detection of=20
common transmission errors. Also, PNG can store gamma and chromaticity =
data for=20
improved color matching on heterogeneous platforms.</P>
<P>This specification defines an Internet Media Type image/png.</P>
<H2 id=3Dstatus>Status of this document</H2>
<P><EM>This section describes the status of this document at the time of =
its=20
publication. Other documents may supersede this document. A list of =
current W3C=20
publications and the latest revision of this technical report can be =
found in=20
the <A href=3D"http://www.w3.org/TR/">W3C technical reports index</A> at =

http://www.w3.org/TR/.</EM></P>
<P>This document is the 14 October 2003 W3C Recommendation of the PNG=20
specification, second edition. It is also International Standard, =
ISO/IEC=20
15948:2003. The two documents have exactly identical content except for =
cover=20
page and boilerplate differences as appropriate to the two =
organisations.</P>
<P>This International Standard is strongly based on the W3C =
Recommendation 'PNG=20
Specification Version 1.0' which was reviewed by W3C members, approved =
as a W3C=20
Recommendation and published in October 1996. This second edition =
incorporates=20
all known errata and clarifications. </P>
<P>A complete review of the document has been done by ISO/IEC/JTC 1/SC =
24 in=20
collaboration with W3C and the PNG development group (the original =
authors of=20
the PNG 1.0 Recommendation) in order to transform that Recommendation =
into an=20
ISO/IEC international standard. A major design goal during this review =
was to=20
avoid changes that will invalidate existing files, editors, or viewers =
that=20
conform to W3C Recommendation PNG Specification Version 1.0.</P>
<P>The PNG specification enjoys a good level of <A=20
href=3D"http://www.libpng.org/pub/png/pngstatus.html">implementation</A> =
with good=20
interoperability. At the time of this publication more than 180 <A=20
href=3D"http://www.libpng.org/pub/png/pngapvw.html">image viewers</A> =
could=20
display PNG images and over 100 <A=20
href=3D"http://www.libpng.org/pub/png/pngaped.html">image editors</A> =
could read=20
and write valid PNG files. Full support of PNG is required for =
conforming <A=20
href=3D"http://www.w3.org/Graphics/SVG">SVG</A> viewers; at the time of=20
publication all eighteen <A=20
href=3D"http://www.w3.org/Graphics/SVG/SVG-Implementations.htm8#viewer">S=
VG=20
viewers</A> had PNG support. HTML has no required image formats, but =
over 60 <A=20
href=3D"http://www.libpng.org/pub/png/pngapbr.html">HTML browsers</A> =
had at least=20
basic support of PNG images.</P>
<P>Public comments on this W3C Recommendation are welcome. Please send =
them to=20
the <A =
href=3D"http://lists.w3.org/Archives/Public/png-group">archived</A> list =
<A=20
href=3D"mailto:png-group@w3.org">png-group@w3.org</A> .</P>
<P>The latest information regarding <A=20
href=3D"http://www.w3.org/Graphics/PNG/Disclosures" =
rel=3Ddisclosure>patent=20
disclosures</A> related to this document is available on the Web. As of =
this=20
publication, the PNG Group are not aware of any royalty-bearing patents =
they=20
believe to be essential to PNG.</P>
<P>This document has been produced by ISO/IEC JTC1 SC24 and the PNG =
Group as=20
part of the <A href=3D"http://www.w3.org/Graphics/Activity">Graphics =
Activity</A>=20
within the <A href=3D"http://www.w3.org/Interaction/">W3C Interaction =
Domain</A>.=20
</P><!-- removed p>A list of current W3C Recommendations and
    other technical documents can be found at <a
	href=3D"http://www.w3.org/TR/">http://www.w3.org/TR/</a>.
	W3C  publications may be updated, replaced, or obsoleted by other=20
  documents at any time.
    </p-->
<DIV>
<P><STRONG>Note:</STRONG> To provide the highest quality images, this=20
specification uses SVG diagrams with a PNG fallback using the HTML =
object=20
element. SVG-enabled browsers will see the SVG figures with selectable =
text,=20
other browsers will display the raster PNG version.</P>
<P>W3C is aware that there is a <A=20
href=3D"http://bugzilla.mozilla.org/show_bug.cgi?id=3D133567">known=20
incompatibility</A> between the unsupported beta of Adobe SVG plugin for =
Linux=20
and Mozilla versions greater than 0.9.9 due to changes in the plug-in =
API,=20
causing a browser crash. Therefore, a normative <A=20
href=3D"http://www.w3.org/TR/PNG/index-noobject.html">PNG-only =
alternative=20
version</A> is available that does not use an object element. The two =
versions=20
are otherwise identical.</P></DIV>
<H3 id=3DAvailableLanguages>Available languages</H3>
<P>The English version of this specification is the only normative =
version.=20
However, for translations in other languages see <A=20
href=3D"http://www.w3.org/Consortium/Translation/">http://www.w3.org/Cons=
ortium/Translation/</A>.</P>
<DIV class=3Dtoc>
<H2><A id=3Dminitoc name=3Dminitoc>Table of Contents</A></H2>
<UL class=3Dtoc><!--li class=3D"tocline1"-->
  <LI class=3DContents><A class=3DHref =
href=3D"http://www.w3.org/TR/PNG/#1Scope">1=20
  Scope</A>=20
  <LI class=3DContents><A class=3DHref =
href=3D"http://www.w3.org/TR/PNG/#2NormRefs">2=20
  Normative references</A>=20
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#3Defsandabbrevs">3 Terms, =
definitions, and=20
  abbreviated terms</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#3Definitions">3.1 Definitions</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#3Abbreviations">3.2 Abbreviated =
terms</A>=20
    </LI></UL>
  <LI class=3DContents><A class=3DHref =
href=3D"http://www.w3.org/TR/PNG/#4Concepts">4=20
  Concepts</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#4Concepts.Sourceimage">4.1 =
Images</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#4Concepts.ColourSpaces">4.2 Colour =

    spaces</A>=20
    <LI class=3DContents><A class=3DHref=20
    =
href=3D"http://www.w3.org/TR/PNG/#4Concepts.PNGImageTransformation">4.3=20
    Reference image to PNG image transformation</A>=20
    <UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#4Concepts.Introduction">4.3.1=20
      Introduction</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#4Concepts.Implied-alpha">4.3.2 =
Alpha=20
      separation</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#4Concepts.Indexing">4.3.3 =
Indexing</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#4Concepts.RGBMerging">4.3.4 RGB=20
      merging</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#4Concepts.Alpha-indexing">4.3.5 =
Alpha=20
      compaction</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#4Concepts.Scaling">4.3.6 Sample =
depth=20
      scaling</A> </LI></UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#4Concepts.PNGImage">4.4 PNG =
image</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#4Concepts.Encoding">4.5 Encoding =
the PNG=20
    image</A>=20
    <UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#4Concepts.EncodingIntro">4.5.1=20
      Introduction</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#4Concepts.EncodingPassAbs">4.5.2 =
Pass=20
      extraction</A>=20
      <LI class=3DContents><A class=3DHref=20
      =
href=3D"http://www.w3.org/TR/PNG/#4Concepts.EncodingScanlineAbs">4.5.3=20
      Scanline serialization</A>=20
      <LI class=3DContents><A class=3DHref=20
      =
href=3D"http://www.w3.org/TR/PNG/#4Concepts.EncodingFiltering">4.5.4=20
      Filtering</A>=20
      <LI class=3DContents><A class=3DHref=20
      =
href=3D"http://www.w3.org/TR/PNG/#4Concepts.EncodingCompression">4.5.5=20
      Compression</A>=20
      <LI class=3DContents><A class=3DHref=20
      =
href=3D"http://www.w3.org/TR/PNG/#4Concepts.EncodingChunking">4.5.6=20
      Chunking</A> </LI></UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#4Concepts.AncillInfo">4.6 =
Additional=20
    information</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#4Concepts.Format">4.7 PNG =
datastream</A>=20
    <UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#4Concepts.FormatChunks">4.7.1 =
Chunks</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#4Concepts.FormatTypes">4.7.2 =
Chunk=20
      types</A> </LI></UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#4Concepts.Errors">4.8 Error =
handling</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration">4.9 =
Extension and=20
    registration</A> </LI></UL>
  <LI class=3DContents><A class=3DHref =
href=3D"http://www.w3.org/TR/PNG/#5DataRep">5=20
  Datastream structure</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#5Introduction">5.1 =
Introduction</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#5PNG-file-signature">5.2 PNG =
signature</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#5Chunk-layout">5.3 Chunk =
layout</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#5Chunk-naming-conventions">5.4 =
Chunk naming=20
    conventions</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#5CRC-algorithm">5.5 Cyclic =
Redundancy Code=20
    algorithm</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#5ChunkOrdering">5.6 Chunk =
ordering</A>=20
  </LI></UL>
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#6Transformation">6 Reference image =
to PNG=20
  image transformation</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#6Colour-values">6.1 Colour types =
and=20
    values</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#6AlphaRepresentation">6.2 Alpha=20
    representation</A> </LI></UL>
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#7Transformation">7 Encoding the PNG =
image as a=20
  PNG datastream</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#7Integers-and-byte-order">7.1 =
Integers and=20
    byte order</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#7Scanline">7.2 Scanlines</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#7Filtering">7.3 Filtering</A> =
</LI></UL>
  <LI class=3DContents><A class=3DHref =
href=3D"http://www.w3.org/TR/PNG/#8Interlace">8=20
  Interlacing and pass extraction</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#8InterlaceIntro">8.1 =
Introduction</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#8InterlaceMethods">8.2 Interlace =
methods</A>=20
    </LI></UL>
  <LI class=3DContents><A class=3DHref =
href=3D"http://www.w3.org/TR/PNG/#9Filters">9=20
  Filtering</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#9FtIntro">9.1 Filter methods and =
filter=20
    types</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#9Filter-types">9.2 Filter types =
for filter=20
    method 0</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#9Filter-type-3-Average">9.3 Filter =
type 3:=20
    Average</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#9Filter-type-4-Paeth">9.4 Filter =
type 4:=20
    Paeth</A> </LI></UL>
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#10Compression">10 Compression</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#10CompressionCM0">10.1 Compression =
method=20
    0</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#10CompressionFSL">10.2 Compression =
of the=20
    sequence of filtered scanlines</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#10CompressionOtherUses">10.3 Other =
uses of=20
    compression</A> </LI></UL>
  <LI class=3DContents><A class=3DHref =
href=3D"http://www.w3.org/TR/PNG/#11Chunks">11=20
  Chunk specifications</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#11Introduction">11.1 =
Introduction</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#11Critical-chunks">11.2 Critical =
chunks</A>=20
    <UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#11CcGen">11.2.1 General</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#11IHDR">11.2.2 <SPAN=20
      class=3Dchunk>IHDR</SPAN> Image header</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#11PLTE">11.2.3 <SPAN=20
      class=3Dchunk>PLTE</SPAN> Palette</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#11IDAT">11.2.4 <SPAN=20
      class=3Dchunk>IDAT</SPAN> Image data</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#11IEND">11.2.5 <SPAN=20
      class=3Dchunk>IEND</SPAN> Image trailer</A> </LI></UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#11Ancillary-chunks">11.3 Ancillary =

    chunks</A>=20
    <UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#11AcGen">11.3.1 General</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#11transinfo">11.3.2 Transparency =

      information</A>=20
      <UL>
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11tRNS">11.3.2.1 <SPAN=20
        class=3Dchunk>tRNS</SPAN> Transparency</A> </LI></UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#11addnlcolinfo">11.3.3 Colour =
space=20
      information</A>=20
      <UL>
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11cHRM">11.3.3.1 <SPAN=20
        class=3Dchunk>cHRM</SPAN> Primary chromaticities and white =
point</A>=20
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11gAMA">11.3.3.2 <SPAN=20
        class=3Dchunk>gAMA</SPAN> Image gamma</A>=20
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11iCCP">11.3.3.3 <SPAN=20
        class=3Dchunk>iCCP</SPAN> Embedded ICC profile</A>=20
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11sBIT">11.3.3.4 <SPAN=20
        class=3Dchunk>sBIT</SPAN> Significant bits</A>=20
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11sRGB">11.3.3.5 <SPAN=20
        class=3Dchunk>sRGB</SPAN> Standard RGB colour space</A> =
</LI></UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#11textinfo">11.3.4 Textual =
information</A>=20

      <UL>
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11textIntro">11.3.4.1 =
Introduction</A>=20
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11keywords">11.3.4.2 Keywords =
and text=20
        strings</A>=20
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11tEXt">11.3.4.3 <SPAN=20
        class=3Dchunk>tEXt</SPAN> Textual data</A>=20
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11zTXt">11.3.4.4 <SPAN=20
        class=3Dchunk>zTXt</SPAN> Compressed textual data</A>=20
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11iTXt">11.3.4.5 <SPAN=20
        class=3Dchunk>iTXt</SPAN> International textual data</A> =
</LI></UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#11addnlsiinfo">11.3.5 =
Miscellaneous=20
      information</A>=20
      <UL>
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11bKGD">11.3.5.1 <SPAN=20
        class=3Dchunk>bKGD</SPAN> Background colour</A>=20
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11hIST">11.3.5.2 <SPAN=20
        class=3Dchunk>hIST</SPAN> Image histogram</A>=20
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11pHYs">11.3.5.3 <SPAN=20
        class=3Dchunk>pHYs</SPAN> Physical pixel dimensions</A>=20
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11sPLT">11.3.5.4 <SPAN=20
        class=3Dchunk>sPLT</SPAN> Suggested palette</A> </LI></UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#11timestampinfo">11.3.6 Time =
stamp=20
      information</A>=20
      <UL>
        <LI class=3DContents><A class=3DHref=20
        href=3D"http://www.w3.org/TR/PNG/#11tIME">11.3.6.1 <SPAN=20
        class=3Dchunk>tIME</SPAN> Image last-modification time</A>=20
    </LI></UL></LI></UL></LI></UL>
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#12Encoders">12 PNG Encoders</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#12Introduction">12.1 =
Introduction</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#12Encoder-gamma-handling">12.2 =
Encoder gamma=20
    handling</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#12Encoder-colour-handling">12.3 =
Encoder=20
    colour handling</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#12Alpha-channel-creation">12.4 =
Alpha channel=20
    creation</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#12Sample-depth-scaling">12.5 =
Sample depth=20
    scaling</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#12Suggested-palettes">12.6 =
Suggested=20
    palettes</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#12Interlacing">12.7 =
Interlacing</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#12Filter-selection">12.8 Filter=20
    selection</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#12Compression">12.9 =
Compression</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#12Text-chunk-processing">12.10 =
Text chunk=20
    processing</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#12Chunk-processing">12.11 =
Chunking</A>=20
    <UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#12Use-of-private-chunks">12.11.1 =
Use of=20
      private chunks</A>=20
      <LI class=3DContents><A class=3DHref=20
      =
href=3D"http://www.w3.org/TR/PNG/#12Private-type-and-method-codes">12.11.=
2=20
      Private type and method codes</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#12Ancillary">12.11.3 Ancillary =
chunks</A>=20
      </LI></UL></LI></UL>
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#13Decoders">13 PNG decoders and =
viewers</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Introduction">13.1 =
Introduction</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Decoders.Errors">13.2 Error =
handling</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Error-checking">13.3 Error =
checking</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Security-considerations">13.4 =
Security=20
    considerations</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Chunking">13.5 Chunking</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Pixel-dimensions">13.6 Pixel=20
    dimensions</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Text-chunk-processing">13.7 Text =
chunk=20
    processing</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Decompression">13.8 =
Decompression</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Filtering">13.9 Filtering</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Progressive-display">13.10 =
Interlacing and=20
    progressive display</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Truecolour-image-handling">13.11 =

    Truecolour image handling</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Sample-depth-rescaling">13.12 =
Sample depth=20
    rescaling</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Decoder-gamma-handling">13.13 =
Decoder=20
    gamma handling</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Decoder-colour-handling">13.14 =
Decoder=20
    colour handling</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Background-colour">13.15 =
Background=20
    colour</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#13Alpha-channel-processing">13.16 =
Alpha=20
    channel processing</A>=20
    <LI class=3DContents><A class=3DHref=20
    =
href=3D"http://www.w3.org/TR/PNG/#13Histogram-and-suggested-palette-usage=
">13.17=20
    Histogram and suggested palette usage</A> </LI></UL>
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#14EditorsExt">14 Editors and =
extensions</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#14Additional-chunk-types">14.1 =
Additional=20
    chunk types</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#14Ordering">14.2 Behaviour of PNG=20
    editors</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#14Ordering-of-chunks">14.3 =
Ordering of=20
    chunks</A>=20
    <UL>
      <LI class=3DContents><A class=3DHref=20
      =
href=3D"http://www.w3.org/TR/PNG/#14Ordering-of-critical-chunks">14.3.1=20
      Ordering of critical chunks</A>=20
      <LI class=3DContents><A class=3DHref=20
      =
href=3D"http://www.w3.org/TR/PNG/#14Ordering-of-ancillary-chunks">14.3.2 =

      Ordering of ancillary chunks</A> </LI></UL></LI></UL>
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#15Conformance">15 Conformance</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#15ConfIntro">15.1 Introduction</A> =

    <UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#15ConfObjectives">15.1.1 =
Objectives</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#15ConfScope">15.1.2 Scope</A> =
</LI></UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#15ConformanceConf">15.2 =
Conformance=20
    conditions</A>=20
    <UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#15FileConformance">15.2.1 =
Conformance of=20
      PNG datastreams</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#15ConformanceEncoder">15.2.2 =
Conformance=20
      of PNG encoders</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#15ConformanceDecoder">15.2.3 =
Conformance=20
      of PNG decoders</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#15ConformanceEditor">15.2.4 =
Conformance of=20
      PNG editors</A> </LI></UL></LI></UL>
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#A-Conventions">Annex A File =
conventions and=20
  Internet media type</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#A-File-name-extension">A.1 File =
name=20
    extension</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#A-Media-type">A.2 Internet media =
type</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#A-Macintosh-file-layout">A.3 =
Macintosh file=20
    layout</A> </LI></UL>
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#B-NewChunksAppendix">Annex B =
Guidelines for=20
  new chunk types</A>=20
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#C-GammaAppendix">Annex C Gamma and=20
  chromaticity</A>=20
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#D-CRCAppendix">Annex D Sample Cyclic =

  Redundancy Code implementation</A>=20
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#E-Resources">Annex E Online =
resources</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#E-Intro">Introduction</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#E-Archive-sites">Archive sites</A> =

    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#E-icc-profile-specs">ICC profile=20
    specifications</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#E-PNG-home-page">PNG web site</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#E-Sample-implementation">Sample=20
    implementation and test images</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#E-Email">Electronic mail</A> =
</LI></UL>
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#F-Relationship">Annex F Relationship =
to W3C=20
  PNG</A>=20
  <UL>
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#F-Editor10">Editor (Version =
1.0)</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#F-Editor12">Editor (Versions 1.1 =
and=20
    1.2)</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#F-ContribEditor10">Contributing =
Editor=20
    (Version 1.0)</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#F-ContribEditor12">Contributing =
Editor=20
    (Versions 1.1 and 1.2)</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#F-Authors">Authors (Versions 1.0, =
1.1, and=20
    1.2 combined)</A>=20
    <LI class=3DContents><A class=3DHref=20
    href=3D"http://www.w3.org/TR/PNG/#F-ChangeList">List of changes =
between W3C=20
    Recommendation PNG Specification Version 1.0 and this International=20
    Standard</A>=20
    <UL>
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#F-EditorialChanges">Editorial =
changes</A>=20
      <LI class=3DContents><A class=3DHref=20
      href=3D"http://www.w3.org/TR/PNG/#F-TechnicalChanges">Technical =
changes</A>=20
      </LI></UL></LI></UL>
  <LI class=3DContents><A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#G-References">Bibliography</A> =
</LI></UL></DIV><!-- =
*********************************************************************

FROM HERE ON THIS FILE IS IDENTICAL TO THE ISO VERSION
with these exceptions:

- id added to any headings that did not have one, to comply with =
pubrules and allow indexing into the document
- URL for this document updated in Annex E and the words " [to be =
completed when published]" removed

*************************************************************************=
*  -->
<H1><A name=3DIntroduction>Introduction</A></H1>
<P></P>
<P>The design goals for this International Standard were:</P>
<OL>
  <LI>Portability: encoding, decoding, and transmission should be =
software and=20
  hardware platform independent.=20
  <LI>Completeness: it should be possible to represent truecolour,=20
  indexed-colour, and greyscale images, in each case with the option of=20
  transparency, colour space information, and ancillary information such =
as=20
  textual comments.=20
  <LI>Serial encode and decode: it should be possible for datastreams to =
be=20
  generated serially and read serially, allowing the datastream format =
to be=20
  used for on-the-fly generation and display of images across a serial=20
  communication channel.=20
  <LI>Progressive presentation: it should be possible to transmit =
datastreams so=20
  that an approximation of the whole image can be presented initially, =
and=20
  progressively enhanced as the datastream is received.=20
  <LI>Robustness to transmission errors: it should be possible to detect =

  datastream transmission errors reliably.=20
  <LI>Losslessness: filtering and compression should preserve all =
information.=20
  <LI>Performance: any filtering, compression, and progressive image=20
  presentation should be aimed at efficient decoding and presentation. =
Fast=20
  encoding is a less important goal than fast decoding. Decoding speed =
may be=20
  achieved at the expense of encoding speed.=20
  <LI>Compression: images should be compressed effectively, consistent =
with the=20
  other design goals.=20
  <LI>Simplicity: developers should be able to implement the standard =
easily.=20
  <LI>Interchangeability: any standard-conforming PNG decoder shall be =
capable=20
  of reading all conforming PNG datastreams.=20
  <LI>Flexibility: future extensions and private additions should be =
allowed for=20
  without compromising the interchangeability of standard PNG =
datastreams.=20
  <LI>Freedom from legal restrictions: no algorithms should be used that =
are not=20
  freely available. </LI></OL>
<H1><A name=3D1Scope>1 Scope</A></H1>
<P>This International Standard specifies a datastream and an associated =
file=20
format, Portable Network Graphics (PNG, pronounced "ping"), for a =
lossless,=20
portable, compressed individual computer graphics image transmitted =
across the=20
Internet. Indexed-colour, greyscale, and truecolour images are =
supported, with=20
optional transparency. Sample depths range from 1 to 16 bits. PNG is =
fully=20
streamable with a progressive display option. It is robust, providing =
both full=20
file integrity checking and simple detection of common transmission =
errors. PNG=20
can store gamma and chromaticity data as well as a full ICC colour =
profile for=20
accurate colour matching on heterogenous platforms. This Standard =
defines the=20
Internet Media type "image/png". The datastream and associated file =
format have=20
value outside of the main design goal.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H1><A name=3D2NormRefs>2 Normative references</A></H1>
<P>The following normative documents contain provisions which, through =
reference=20
in this text, constitute provisions of this International Standard. For =
dated=20
references, subsequent amendments to, or revisions of, any of these =
publications=20
do not apply. However, parties to agreements based on this International =

Standard are encouraged to investigate the possibility of applying the =
most=20
recent editions of the normative documents indicated below. For undated=20
references, the latest edition of the normative document referred to =
applies.=20
Members of ISO and IEC maintain registers of currently valid =
International=20
Standards.</P>
<P class=3DNormRefDef><A name=3D2-ISO-639>ISO 639:1988</A>, <I>Code for =
the=20
representation of names of languages</I>.</P>
<P class=3DNormRefDef><A name=3D2-ISO-646>ISO/IEC 646:1991</A>, =
<I>International=20
Organization for Standardization, Information technology =E2=80=94 ISO =
7-bit coded=20
character set for information interchange</I>.</P>
<P class=3DNormRefDef><A name=3D2-ISO-3309>ISO/IEC 3309:1993</A>, =
<I>Information=20
Technology =E2=80=94 Telecommunications and information exchange between =
systems =E2=80=94=20
High-level data link control (HDLC) procedures =E2=80=94 Frame =
structure</I>.</P>
<P class=3DNormRefDef><A name=3D2-ISO-8859-1>ISO/IEC 8859-1:1998</A>, =
<I>Information=20
technology =E2=80=94 8-bit single-byte coded graphic character sets =
=E2=80=94 Part 1: Latin=20
alphabet No. 1</I>.<BR class=3Dxhtml>For convenience, here is a =
non-normative <A=20
href=3D"http://www.w3.org/TR/PNG/iso_8859-1.txt">sample text file</A> =
describing=20
the codes and associated character names.</P>
<P class=3DNormRefDef><A name=3D2-ISO-9899>ISO/IEC 9899:1990(R1997)</A>, =

<I>Programming languages =E2=80=94 C</I>.</P>
<P class=3DNormRefDef><A name=3D2-ISO-10646-1>ISO/IEC =
10646-1:1993/AMD.2</A>,=20
<I>Information technology =E2=80=94 Universal Multiple-Octet Coded =
Character Sets (UCS)=20
=E2=80=94 Part 1: Architecture and Basic Multilingual Plane</I>.</P>
<P class=3DNormRefDef><A name=3D2-IEC-61966-2-1>IEC 61966-2-1</A>, =
<I>Multimedia=20
systems and equipment =E2=80=94 Colour measurement and management =
=E2=80=94 Part 2-1: Default=20
RGB colour space =E2=80=94 sRGB,</I> available at <CODE><A=20
href=3D"http://www.iec.ch/">http://www.iec.ch/</A></CODE>.</P>
<P class=3DNormRefDef><A name=3D2-CIE-15.2>CIE-15.2</A>, CIE, =
"Colorimetry, Second=20
Edition". CIE Publication 15.2-1986. ISBN 3-900-734-00-3.</P>
<P class=3DNormRefDef><A name=3D2-ICC-1>ICC-1</A>, International Color =
Consortium,=20
"Specification ICC.1: 1998-09, File Format for Color Profiles", 1998, =
available=20
at <CODE><A =
href=3D"http://www.color.org/">http://www.color.org/</A></CODE></P>
<P class=3DNormRefDef><A name=3D2-ICC-1A>ICC-1A</A>, International Color =
Consortium,=20
"Specification ICC.1A: 1999-04, Addendum 2 to ICC.1: 1998-09", 1999, =
available=20
at <CODE><A =
href=3D"http://www.color.org/">http://www.color.org/</A></CODE></P>
<P class=3DNormRefDef><A name=3D2-RFC-1123>RFC-1123</A>, Braden, R., =
Editor,=20
"Requirements for Internet Hosts =E2=80=94 Application and Support", STD =
3, RFC 1123,=20
USC/Information Sciences Institute, October 1989.<BR =
class=3Dxhtml><CODE><A=20
href=3D"http://www.ietf.org/rfc/rfc1123.txt">http://www.ietf.org/rfc/rfc1=
123.txt</A></CODE></P>
<P class=3DNormRefDef><A name=3D2-RFC-1950>RFC-1950</A>, Deutsch, P. and =
Gailly,=20
J-L., "ZLIB Compressed Data Format Specification version 3.3", RFC 1950, =
Aladdin=20
Enterprises, May 1996.<BR class=3Dxhtml><CODE><A=20
href=3D"http://www.ietf.org/rfc/rfc1950.txt">http://www.ietf.org/rfc/rfc1=
950.txt</A></CODE></P>
<P class=3DNormRefDef><A name=3D2-RFC-1951>RFC-1951</A>, Deutsch, P., =
"DEFLATE=20
Compressed Data Format Specification version 1.3", RFC 1951, Aladdin=20
Enterprises, May 1996.<BR class=3Dxhtml><CODE><A=20
href=3D"http://www.ietf.org/rfc/rfc1951.txt">http://www.ietf.org/rfc/rfc1=
951.txt</A></CODE></P>
<P class=3DNormRefDef><A name=3D2-RFC-2045>RFC-2045</A>, Freed, N. and =
Borenstein,=20
N. , "MIME (Multipurpose Internet Mail Extensions) Part One: Format of =
Internet=20
Message Bodies", RFC 2045, Innosoft, First Virtual, November 1996.<BR=20
class=3Dxhtml><CODE><A=20
href=3D"http://www.ietf.org/rfc/rfc2045.txt">http://www.ietf.org/rfc/rfc2=
045.txt</A></CODE></P>
<P class=3DNormRefDef><A name=3D2-RFC-2048>RFC-2048</A>, Freed, N., =
Klensin, J. and=20
Postel, J., "Multipurpose Internet Mail Extensions (MIME) Part Four:=20
Registration Procedures", RFC 2048, Innosoft, MCI, ISI, November =
1996.<BR=20
class=3Dxhtml><CODE><A=20
href=3D"http://www.ietf.org/rfc/rfc2048.txt">http://www.ietf.org/rfc/rfc2=
048.txt</A></CODE></P>
<P class=3DNormRefDef><A name=3D2-RFC-3066>RFC-3066</A>, Alvestrand, H., =
"Tags for=20
the Identification of Languages", RFC 3066, Cisco Systems, January 2001. =

(Obsoletes RFC 1766.)<BR class=3Dxhtml><CODE><A=20
href=3D"http://www.ietf.org/rfc/rfc3066.txt">http://www.ietf.org/rfc/rfc3=
066.txt</A></CODE></P><!-- ************Page Break******************* =
--><!-- ************Page Break******************* -->
<H1><A name=3D3Defsandabbrevs>3 Terms, definitions, and abbreviated =
terms</A></H1>
<H2><A name=3D3Definitions>3.1 Definitions</A></H2>
<P>For the purposes of this International Standard the following =
definitions=20
apply.</P>
<DL>
  <DT><A name=3D3alpha>3.1.1 alpha</A>=20
  <DD>a value representing a <A =
href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixel's</SPAN></A> degree of opacity. The more =
opaque a=20
  pixel, the more it hides the background against which the image is =
presented.=20
  Zero alpha represents a completely transparent pixel, maximum alpha =
represents=20
  a completely opaque pixel.=20
  <DT><A name=3D3alphaCompaction>3.1.2 alpha compaction</A>=20
  <DD>an implicit representation of transparent <A=20
  href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixels</SPAN></A>. If every pixel with a specific =
colour or=20
  <A href=3D"http://www.w3.org/TR/PNG/#3greyscale"><SPAN=20
  class=3DDefinition>greyscale</SPAN></A> value is fully transparent and =
all other=20
  pixels are fully opaque, the <A =
href=3D"http://www.w3.org/TR/PNG/#3alpha"><SPAN=20
  class=3DDefinition>alpha</SPAN></A> <A=20
  href=3D"http://www.w3.org/TR/PNG/#3channel"><SPAN=20
  class=3DDefinition>channel</SPAN></A> may be represented implicitly.=20
  <DT><A name=3D3alphaSeparation>3.1.3 alpha separation</A>=20
  <DD>separating an <A href=3D"http://www.w3.org/TR/PNG/#3alpha"><SPAN=20
  class=3DDefinition>alpha</SPAN></A> <A=20
  href=3D"http://www.w3.org/TR/PNG/#3channel"><SPAN=20
  class=3DDefinition>channel</SPAN></A> in which every <A=20
  href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixel</SPAN></A> is fully opaque; all alpha values =
are the=20
  maximum value. The fact that all pixels are fully opaque is =
represented=20
  implicitly.=20
  <DT><A name=3D3alphaTable>3.1.4 alpha table</A>=20
  <DD>indexed table of <A =
href=3D"http://www.w3.org/TR/PNG/#3alpha"><SPAN=20
  class=3DDefinition>alpha</SPAN></A> <A=20
  href=3D"http://www.w3.org/TR/PNG/#3sample"><SPAN=20
  class=3DDefinition>sample</SPAN></A> values, which in an <A=20
  href=3D"http://www.w3.org/TR/PNG/#3indexedColour"><SPAN=20
  class=3DDefinition>indexed-colour</SPAN></A> image defines the alpha =
sample=20
  values of the <A =
href=3D"http://www.w3.org/TR/PNG/#3referenceImage"><SPAN=20
  class=3DDefinition>reference image</SPAN></A>. The alpha table has the =
same=20
  number of entries as the <A =
href=3D"http://www.w3.org/TR/PNG/#3palette"><SPAN=20
  class=3DDefinition>palette</SPAN></A>.=20
  <DT><A name=3D3ancillaryChunk>3.1.5 ancillary chunk</A>=20
  <DD>class of <A href=3D"http://www.w3.org/TR/PNG/#3chunk"><SPAN=20
  class=3DDefinition>chunk</SPAN></A> that provides additional =
information. A <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGdecoder"><SPAN =
class=3DDefinition>PNG=20
  decoder</SPAN></A>, without processing an ancillary chunk, can still =
produce a=20
  meaningful image, though not necessarily the best possible image. <!-- =
agreed: don't need to define a bit -->
  <DT><A name=3D3bitDepth>3.1.6 bit depth</A>=20
  <DD>for <A href=3D"http://www.w3.org/TR/PNG/#3indexedColour"><SPAN=20
  class=3DDefinition>indexed-colour</SPAN></A> images, the number of =
bits per <A=20
  href=3D"http://www.w3.org/TR/PNG/#3palette"><SPAN=20
  class=3DDefinition>palette</SPAN></A> index. For other images, the =
number of=20
  bits per <A href=3D"http://www.w3.org/TR/PNG/#3sample"><SPAN=20
  class=3DDefinition>sample</SPAN></A> in the image. This is the value =
that=20
  appears in the <A href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN=20
  class=3Dchunk>IHDR</SPAN></A> <A =
href=3D"http://www.w3.org/TR/PNG/#3chunk"><SPAN=20
  class=3DDefinition>chunk</SPAN></A>.=20
  <DT><A name=3D3byte>3.1.7 byte</A>=20
  <DD>8 bits; also called an octet. The highest bit (value 128) of a =
byte is=20
  numbered bit 7; the lowest bit (value 1) is numbered bit 0.=20
  <DT><A name=3D3byteOrder>3.1.8 byte order</A>=20
  <DD>ordering of <A href=3D"http://www.w3.org/TR/PNG/#3byte"><SPAN=20
  class=3DDefinition>bytes</SPAN></A> for multi-byte data values within =
a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGfile"><SPAN =
class=3DDefinition>PNG=20
  file</SPAN></A> or <A =
href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN=20
  class=3DDefinition>PNG datastream</SPAN></A>. PNG uses <A=20
  href=3D"http://www.w3.org/TR/PNG/#3networkByteOrder"><SPAN=20
  class=3DDefinition>network byte order</SPAN></A>.=20
  <DT><A name=3D3channel>3.1.9 channel</A>=20
  <DD>array of all per-<A =
href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixel</SPAN></A> information of a particular kind =
within a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3referenceImage"><SPAN=20
  class=3DDefinition>reference image</SPAN></A>. There are five kinds of =

  information: red, green, blue, <A=20
  href=3D"http://www.w3.org/TR/PNG/#3greyscale"><SPAN=20
  class=3DDefinition>greyscale</SPAN></A>, and <A=20
  href=3D"http://www.w3.org/TR/PNG/#3alpha"><SPAN=20
  class=3DDefinition>alpha</SPAN></A>. For example the alpha channel is =
the array=20
  of alpha values within a reference image.=20
  <DT><A name=3D3chromaticity>3.1.10 chromaticity (CIE)</A>=20
  <DD>pair of values <I>x,y</I> that precisely specify a colour, except =
for the=20
  brightness information.=20
  <DT><A name=3D3chunk>3.1.11 chunk</A>=20
  <DD>section of a <A =
href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN=20
  class=3DDefinition>PNG datastream</SPAN></A>. Each chunk has a chunk =
type. Most=20
  chunks also include data. The format and meaning of the data within =
the chunk=20
  are determined by the chunk type. Each chunk is either a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3criticalChunk"><SPAN=20
  class=3DDefinition>critical chunk</SPAN></A> or an <A=20
  href=3D"http://www.w3.org/TR/PNG/#3ancillaryChunk"><SPAN=20
  class=3DDefinition>ancillary chunk</SPAN></A>.=20
  <DT><A name=3D3colourType>3.1.12 colour type</A>=20
  <DD>value denoting how colour and <A=20
  href=3D"http://www.w3.org/TR/PNG/#3alpha"><SPAN=20
  class=3DDefinition>alpha</SPAN></A> are specified in the <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGimage"><SPAN =
class=3DDefinition>PNG=20
  image</SPAN></A>. Colour types are sums of the following values: 1 (<A =

  href=3D"http://www.w3.org/TR/PNG/#3palette"><SPAN=20
  class=3DDefinition>palette</SPAN></A> used), 2 (<A=20
  href=3D"http://www.w3.org/TR/PNG/#3truecolour"><SPAN=20
  class=3DDefinition>truecolour</SPAN></A> used), 4 (alpha used). The =
permitted=20
  values of colour type are 0, 2, 3, 4, and 6.=20
  <DT><A name=3D3composite>3.1.13 composite (verb)</A>=20
  <DD>to form an image by merging a foreground image and a background =
image,=20
  using transparency information to determine where and to what extent =
the=20
  background should be visible. The foreground image is said to be =
"composited=20
  against" the background.=20
  <DT><A name=3D3criticalChunk>3.1.14 critical chunk</A>=20
  <DD><A href=3D"http://www.w3.org/TR/PNG/#3chunk"><SPAN=20
  class=3DDefinition>chunk</SPAN></A> that <!--must be understood and =
processed by the decoder-->shall be understood and=20
  processed by the decoder in order to produce a meaningful image from a =
<A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN =
class=3DDefinition>PNG=20
  datastream</SPAN></A>.=20
  <DT><A name=3D3datastream>3.1.15 datastream</A>=20
  <DD>sequence of <A href=3D"http://www.w3.org/TR/PNG/#3byte"><SPAN=20
  class=3DDefinition>bytes</SPAN></A>. This term is used rather than =
"file" to=20
  describe a byte sequence that may be only a portion of a file. It is =
also used=20
  to emphasize that the sequence of bytes might be generated and =
consumed "on=20
  the fly", never appearing in a stored file at all.=20
  <DT><A name=3D3deflate>3.1.16 deflate</A>=20
  <DD>name of a particular compression algorithm. This algorithm is =
used, in=20
  compression mode 0, in conforming <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN =
class=3DDefinition>PNG=20
  datastreams</SPAN></A>. Deflate is a member of the <A=20
  href=3D"http://www.w3.org/TR/PNG/#3LZ77"><SPAN =
class=3DDefinition>LZ77</SPAN></A>=20
  family of compression methods. It is defined in <A=20
  href=3D"http://www.w3.org/TR/PNG/#2-RFC-1951"><SPAN=20
  class=3DNormRef>[RFC-1951]</SPAN></A>. <!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
  <DT><A name=3D3deliveredImage>3.1.17 delivered image</A>=20
  <DD>image constructed from a decoded <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN =
class=3DDefinition>PNG=20
  datastream</SPAN></A>.=20
  <DT><A name=3D3filter>3.1.18 filter</A>=20
  <DD>transformation applied to an array of <A=20
  href=3D"http://www.w3.org/TR/PNG/#3scanline"><SPAN=20
  class=3DDefinition>scanlines</SPAN></A> with the aim of improving =
their=20
  compressibility. PNG uses only lossless (reversible) filter =
algorithms.=20
  <DT><A name=3D3frameBuffer>3.1.19 frame buffer</A>=20
  <DD>the final digital storage area for the image shown by most types =
of=20
  computer display. Software causes an image to appear on screen by =
loading the=20
  image into the frame buffer.=20
  <DT><A name=3D3gamma>3.1.20 gamma</A>=20
  <DD>exponent that describes approximations to certain non-linear =
transfer=20
  functions encountered in image capture and reproduction. Within this=20
  International Standard, gamma is the exponent in the transfer function =
from=20
  <TT>display_output</TT> to <TT>image_sample</TT> <PRE><TT>image_sample =
=3D display_output<SUP>gamma</SUP></TT>
</PRE>where both <TT>display_output</TT> and <TT>image_sample</TT> are =
scaled=20
  to the range 0 to 1.=20
  <DT><A name=3D3greyscale>3.1.21 greyscale</A>=20
  <DD>image representation in which each <A=20
  href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixel</SPAN></A> is defined by a single <A=20
  href=3D"http://www.w3.org/TR/PNG/#3sample"><SPAN=20
  class=3DDefinition>sample</SPAN></A> of colour information, =
representing overall=20
  <A href=3D"http://www.w3.org/TR/PNG/#3luminance"><SPAN=20
  class=3DDefinition>luminance</SPAN></A> (on a scale from black to =
white), and=20
  optionally an <A href=3D"http://www.w3.org/TR/PNG/#3alpha"><SPAN=20
  class=3DDefinition>alpha</SPAN></A> sample (in which case it is called =
greyscale=20
  with alpha).=20
  <DT><A name=3D3imageData>3.1.22 image data</A>=20
  <DD>1-dimensional array of <A =
href=3D"http://www.w3.org/TR/PNG/#3scanline"><SPAN=20
  class=3DDefinition>scanlines</SPAN></A> within an image.=20
  <DT><A name=3D3indexedColour>3.1.23 indexed-colour</A>=20
  <DD>image representation in which each <A=20
  href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixel</SPAN></A> of the original image is =
represented by a=20
  single index into a <A =
href=3D"http://www.w3.org/TR/PNG/#3palette"><SPAN=20
  class=3DDefinition>palette</SPAN></A>. The selected palette entry =
defines the=20
  actual colour of the pixel.=20
  <DT><A name=3D3indexing>3.1.24 indexing</A>=20
  <DD>representing an image by a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3palette"><SPAN=20
  class=3DDefinition>palette</SPAN></A>, an <A=20
  href=3D"http://www.w3.org/TR/PNG/#3alphaTable"><SPAN =
class=3DDefinition>alpha=20
  table</SPAN></A>, and an array of indices pointing to entries in the =
palette=20
  and alpha table.=20
  <DT><A name=3D3interlacedPNGimage>3.1.25 interlaced PNG image</A>=20
  <DD>sequence of <A =
href=3D"http://www.w3.org/TR/PNG/#3reducedImage"><SPAN=20
  class=3DDefinition>reduced images</SPAN></A> generated from the <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGimage"><SPAN =
class=3DDefinition>PNG=20
  image</SPAN></A> by <A =
href=3D"http://www.w3.org/TR/PNG/#3passExtraction"><SPAN=20
  class=3DDefinition>pass extraction</SPAN></A>.=20
  <DT><A name=3D3losslessCompression>3.1.26 lossless compression</A>=20
  <DD>method of data compression that permits reconstruction of the =
original=20
  data exactly, bit-for-bit.=20
  <DT><A name=3D3lossyCompression>3.1.27 lossy compression</A>=20
  <DD>method of data compression that permits reconstruction of the =
original=20
  data approximately, rather than exactly.=20
  <DT><A name=3D3luminance>3.1.28 luminance</A>=20
  <DD>formal definition of luminance is in <A=20
  href=3D"http://www.w3.org/TR/PNG/#2-CIE-15.2"><SPAN=20
  class=3DNormRef>[CIE-15.2]</SPAN></A>. Informally it is the perceived=20
  brightness, or <A href=3D"http://www.w3.org/TR/PNG/#3greyscale"><SPAN=20
  class=3DDefinition>greyscale</SPAN></A> level, of a colour. Luminance =
and <A=20
  href=3D"http://www.w3.org/TR/PNG/#3chromaticity"><SPAN=20
  class=3DDefinition>chromaticity</SPAN></A> together fully define a =
perceived=20
  colour.=20
  <DT><A name=3D3LZ77>3.1.29 LZ77</A>=20
  <DD>data compression algorithm described by Ziv and Lempel in their =
1977 paper=20
  <A href=3D"http://www.w3.org/TR/PNG/#G-ZL"><SPAN =
class=3Dbibref>[ZL]</SPAN></A>.=20
  <DT><A name=3D3networkByteOrder>3.1.30 network byte order</A>=20
  <DD><A href=3D"http://www.w3.org/TR/PNG/#3byteOrder"><SPAN =
class=3DDefinition>byte=20
  order</SPAN></A> in which the most significant byte comes first, then =
the less=20
  significant bytes in descending order of significance (<A=20
  href=3D"http://www.w3.org/TR/PNG/#3MSB"><SPAN =
class=3DDefinition>MSB</SPAN></A> <A=20
  href=3D"http://www.w3.org/TR/PNG/#3LSB"><SPAN =
class=3DDefinition>LSB</SPAN></A>=20
  for two-byte integers, <A =
href=3D"http://www.w3.org/TR/PNG/#3MSB"><SPAN=20
  class=3DDefinition>MSB</SPAN></A> B2 B1 <A=20
  href=3D"http://www.w3.org/TR/PNG/#3LSB"><SPAN =
class=3DDefinition>LSB</SPAN></A>=20
  for four-byte integers).=20
  <DT><A name=3D3palette>3.1.31 palette</A>=20
  <DD>indexed table of three 8-bit <A=20
  href=3D"http://www.w3.org/TR/PNG/#3sample"><SPAN=20
  class=3DDefinition>sample</SPAN></A> values, red, green, and blue, =
which with an=20
  <A href=3D"http://www.w3.org/TR/PNG/#3indexedColour"><SPAN=20
  class=3DDefinition>indexed-colour</SPAN></A> image defines the red, =
green, and=20
  blue sample values of the <A=20
  href=3D"http://www.w3.org/TR/PNG/#3referenceImage"><SPAN=20
  class=3DDefinition>reference image</SPAN></A>. In other cases, the =
palette may=20
  be a suggested palette that viewers may use to present the image on=20
  indexed-colour display hardware. <A=20
  href=3D"http://www.w3.org/TR/PNG/#3alpha"><SPAN=20
  class=3DDefinition>Alpha</SPAN></A> samples may be defined for palette =
entries=20
  via the <A href=3D"http://www.w3.org/TR/PNG/#3alphaTable"><SPAN=20
  class=3DDefinition>alpha table</SPAN></A> and may be used to =
reconstruct the=20
  alpha sample values of the reference image.=20
  <DT><A name=3D3passExtraction>3.1.32 pass extraction</A>=20
  <DD>organizing a <A href=3D"http://www.w3.org/TR/PNG/#3PNGimage"><SPAN =

  class=3DDefinition>PNG image</SPAN></A> as a sequence of <A=20
  href=3D"http://www.w3.org/TR/PNG/#3reducedImage"><SPAN =
class=3DDefinition>reduced=20
  images</SPAN></A> to change the order of transmission and enable =
progressive=20
  display.=20
  <DT><A name=3D3pixel>3.1.33 pixel</A>=20
  <DD>information stored for a single grid point in an image. A pixel =
consists=20
  of (or points to) a sequence of <A=20
  href=3D"http://www.w3.org/TR/PNG/#3sample"><SPAN=20
  class=3DDefinition>samples</SPAN></A> from all <A=20
  href=3D"http://www.w3.org/TR/PNG/#3channel"><SPAN=20
  class=3DDefinition>channels</SPAN></A>. The complete image is a =
rectangular=20
  array of pixels. <!-- ************Page Break******************* =
--><!-- ************Page Break******************* -->
  <DT><A name=3D3PNGdatastream>3.1.34 PNG datastream</A>=20
  <DD>result of encoding a <A =
href=3D"http://www.w3.org/TR/PNG/#3PNGimage"><SPAN=20
  class=3DDefinition>PNG image</SPAN></A>. A PNG <A=20
  href=3D"http://www.w3.org/TR/PNG/#3datastream"><SPAN=20
  class=3DDefinition>datastream</SPAN></A> consists of a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGsignature"><SPAN =
class=3DDefinition>PNG=20
  signature</SPAN></A> followed by a sequence of <A=20
  href=3D"http://www.w3.org/TR/PNG/#3chunk"><SPAN=20
  class=3DDefinition>chunks</SPAN></A>.=20
  <DT><A name=3D3PNGdecoder>3.1.35 PNG decoder</A>=20
  <DD>process or device which reconstructs the <A=20
  href=3D"http://www.w3.org/TR/PNG/#3referenceImage"><SPAN=20
  class=3DDefinition>reference image</SPAN></A> from a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN =
class=3DDefinition>PNG=20
  datastream</SPAN></A> and generates a corresponding delivered image.=20
  <DT><A name=3D3PNGeditor>3.1.36 PNG editor</A>=20
  <DD>process or device which creates a modification of an existing <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN =
class=3DDefinition>PNG=20
  datastream</SPAN></A>, preserving unmodified ancillary information =
wherever=20
  possible, and obeying the <A =
href=3D"http://www.w3.org/TR/PNG/#3chunk"><SPAN=20
  class=3DDefinition>chunk</SPAN></A> ordering rules, even for unknown =
chunk=20
  types.=20
  <DT><A name=3D3PNGencoder>3.1.37 PNG encoder</A>=20
  <DD>process or device which constructs a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3referenceImage"><SPAN=20
  class=3DDefinition>reference image</SPAN></A> from a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3sourceImage"><SPAN =
class=3DDefinition>source=20
  image</SPAN></A>, and generates a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN =
class=3DDefinition>PNG=20
  datastream</SPAN></A> representing the reference image.=20
  <DT><A name=3D3PNGfile>3.1.38 PNG file</A>=20
  <DD><A href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN=20
  class=3DDefinition>PNG datastream</SPAN></A> stored as a file.=20
  <DT><A name=3D3PNGfourByteSignedInteger>3.1.39 PNG four-byte signed =
integer</A>=20
  <DD>a four-byte signed integer limited to the range =
-(2<SUP>31</SUP>-1) to=20
  2<SUP>31</SUP>-1. The restriction is imposed in order to accommodate =
languages=20
  that have difficulty with the value -2<SUP>31</SUP>.=20
  <DT><A name=3D3PNGfourByteUnSignedInteger>3.1.40 PNG four-byte =
unsigned=20
  integer</A>=20
  <DD>a four-byte unsigned integer limited to the range 0 to =
2<SUP>31</SUP>-1.=20
  The restriction is imposed in order to accommodate languages that have =

  difficulty with unsigned four-byte values.=20
  <DT><A name=3D3PNGimage>3.1.41 PNG image</A>=20
  <DD>result of transformations applied by a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGencoder"><SPAN =
class=3DDefinition>PNG=20
  encoder</SPAN></A> to a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3referenceImage"><SPAN=20
  class=3DDefinition>reference image</SPAN></A>, in preparation for =
encoding as a=20
  <A href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN =
class=3DDefinition>PNG=20
  datastream</SPAN></A>, and the result of decoding a PNG datastream.=20
  <DT><A name=3D3PNGsignature>3.1.42 PNG signature</A>=20
  <DD>sequence of <A href=3D"http://www.w3.org/TR/PNG/#3byte"><SPAN=20
  class=3DDefinition>bytes</SPAN></A> appearing at the start of every <A =

  href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN =
class=3DDefinition>PNG=20
  datastream</SPAN></A>. It differentiates a PNG datastream from other =
types of=20
  <A href=3D"http://www.w3.org/TR/PNG/#3datastream"><SPAN=20
  class=3DDefinition>datastream</SPAN></A> and allows early detection of =
some=20
  transmission errors.=20
  <DT><A name=3D3reducedImage>3.1.43 reduced image</A>=20
  <DD>pass of the <A =
href=3D"http://www.w3.org/TR/PNG/#3interlacedPNGimage"><SPAN=20
  class=3DDefinition>interlaced PNG image</SPAN></A> extracted from the =
<A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGimage"><SPAN =
class=3DDefinition>PNG=20
  image</SPAN></A> by <A =
href=3D"http://www.w3.org/TR/PNG/#3passExtraction"><SPAN=20
  class=3DDefinition>pass extraction</SPAN></A>.=20
  <DT><A name=3D3referenceImage>3.1.44 reference image</A>=20
  <DD>rectangular array of rectangular <A=20
  href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixels</SPAN></A>, each having the same number of =
<A=20
  href=3D"http://www.w3.org/TR/PNG/#3sample"><SPAN=20
  class=3DDefinition>samples</SPAN></A>, either three (red, green, blue) =
or four=20
  (red, green, blue, <A href=3D"http://www.w3.org/TR/PNG/#3alpha"><SPAN=20
  class=3DDefinition>alpha</SPAN></A>). Every reference image can be =
represented=20
  exactly by a <A =
href=3D"http://www.w3.org/TR/PNG/#3PNGdatastream"><SPAN=20
  class=3DDefinition>PNG datastream</SPAN></A> and every PNG datastream =
can be=20
  converted into a reference image. Each <A=20
  href=3D"http://www.w3.org/TR/PNG/#3channel"><SPAN=20
  class=3DDefinition>channel</SPAN></A> has a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3sampleDepth"><SPAN =
class=3DDefinition>sample=20
  depth</SPAN></A> in the range 1 to 16. All samples in the same channel =
have=20
  the same sample depth. Different channels may have different sample =
depths.=20
  <DT><A name=3D3RGBmerging>3.1.45 RGB merging</A>=20
  <DD>converting an image in which the red, green, and blue <A=20
  href=3D"http://www.w3.org/TR/PNG/#3sample"><SPAN=20
  class=3DDefinition>samples</SPAN></A> for each <A=20
  href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixel</SPAN></A> have the same value, and the same =
<A=20
  href=3D"http://www.w3.org/TR/PNG/#3sampleDepth"><SPAN =
class=3DDefinition>sample=20
  depth</SPAN></A>, into an image with a single <A=20
  href=3D"http://www.w3.org/TR/PNG/#3greyscale"><SPAN=20
  class=3DDefinition>greyscale</SPAN></A> <A=20
  href=3D"http://www.w3.org/TR/PNG/#3channel"><SPAN=20
  class=3DDefinition>channel</SPAN></A>.=20
  <DT><A name=3D3sample>3.1.46 sample</A>=20
  <DD>intersection of a <A =
href=3D"http://www.w3.org/TR/PNG/#3channel"><SPAN=20
  class=3DDefinition>channel</SPAN></A> and a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixel</SPAN></A> in an image.=20
  <DT><A name=3D3sampleDepth>3.1.47 sample depth</A>=20
  <DD>number of bits used to represent a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3sample"><SPAN=20
  class=3DDefinition>sample</SPAN></A> value. In an <A=20
  href=3D"http://www.w3.org/TR/PNG/#3indexedColour"><SPAN=20
  class=3DDefinition>indexed-colour</SPAN></A> <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGimage"><SPAN =
class=3DDefinition>PNG=20
  image</SPAN></A>, samples are stored in the <A=20
  href=3D"http://www.w3.org/TR/PNG/#3palette"><SPAN=20
  class=3DDefinition>palette</SPAN></A> and thus the sample depth is =
always 8 by=20
  definition of the palette. In other types of PNG image it is the same =
as the=20
  <A href=3D"http://www.w3.org/TR/PNG/#3bitDepth"><SPAN =
class=3DDefinition>bit=20
  depth</SPAN></A>.=20
  <DT><A name=3D3sampleDepthScaling>3.1.48 sample depth scaling</A>=20
  <DD>mapping of a range of <A =
href=3D"http://www.w3.org/TR/PNG/#3sample"><SPAN=20
  class=3DDefinition>sample</SPAN></A> values onto the full range of a =
<A=20
  href=3D"http://www.w3.org/TR/PNG/#3sampleDepth"><SPAN =
class=3DDefinition>sample=20
  depth</SPAN></A> allowed in a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGimage"><SPAN =
class=3DDefinition>PNG=20
  image</SPAN></A>.=20
  <DT><A name=3D3scanline>3.1.49 scanline</A>=20
  <DD>row of <A href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixels</SPAN></A> within an image or <A=20
  href=3D"http://www.w3.org/TR/PNG/#3interlacedPNGimage"><SPAN=20
  class=3DDefinition>interlaced PNG image</SPAN></A>.=20
  <DT><A name=3D3sourceImage>3.1.50 source image</A>=20
  <DD>image which is presented to a <A=20
  href=3D"http://www.w3.org/TR/PNG/#3PNGencoder"><SPAN =
class=3DDefinition>PNG=20
  encoder</SPAN></A>.=20
  <DT><A name=3D3truecolour>3.1.51 truecolour</A>=20
  <DD>image representation in which each <A=20
  href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixel</SPAN></A> is defined by <A=20
  href=3D"http://www.w3.org/TR/PNG/#3sample"><SPAN=20
  class=3DDefinition>samples</SPAN></A>, representing red, green, and =
blue=20
  intensities and optionally an <A =
href=3D"http://www.w3.org/TR/PNG/#3alpha"><SPAN=20
  class=3DDefinition>alpha</SPAN></A> sample (in which case it is =
referred to as=20
  truecolour with alpha).=20
  <DT><A name=3D3whitePoint>3.1.52 white point</A>=20
  <DD><A href=3D"http://www.w3.org/TR/PNG/#3chromaticity"><SPAN=20
  class=3DDefinition>chromaticity</SPAN></A> of a computer display's =
nominal white=20
  value.=20
  <DT><A name=3D3zlib>3.1.53 zlib</A>=20
  <DD>particular format for data that have been compressed using <A=20
  href=3D"http://www.w3.org/TR/PNG/#3deflate"><SPAN=20
  class=3DDefinition>deflate</SPAN></A>-style compression. Also the name =
of a=20
  library containing a sample implementation of this method. The format =
is=20
  defined in <A href=3D"http://www.w3.org/TR/PNG/#2-RFC-1950"><SPAN=20
  class=3DNormRef>[RFC-1950]</SPAN></A>. </DD></DL><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H2><A name=3D3Abbreviations>3.2 Abbreviated terms</A></H2>
<DL>
  <DT><A name=3D3CRC>3.2.1 CRC</A>=20
  <DD>Cyclic Redundancy Code. A CRC is a type of check value designed to =
detect=20
  most transmission errors. A decoder calculates the CRC for the =
received data=20
  and checks by comparing it to the CRC calculated by the encoder and =
appended=20
  to the data. A mismatch indicates that the data or the CRC were =
corrupted in=20
  transit.=20
  <DT><A name=3D3CRT>3.2.2 CRT</A>=20
  <DD>Cathode Ray Tube: a common type of computer display hardware.=20
  <DT><A name=3D3LSB>3.2.2 LSB</A>=20
  <DD>Least Significant Byte of a multi-<A=20
  href=3D"http://www.w3.org/TR/PNG/#3byte"><SPAN =
class=3DDefinition>byte</SPAN></A>=20
  value.=20
  <DT><A name=3D3LUT>3.2.3 LUT</A>=20
  <DD>Look Up Table. In <A =
href=3D"http://www.w3.org/TR/PNG/#3frameBuffer"><SPAN=20
  class=3DDefinition>frame buffer</SPAN></A> hardware, a LUT can be used =
to map <A=20
  href=3D"http://www.w3.org/TR/PNG/#3indexedColour"><SPAN=20
  class=3DDefinition>indexed-colour</SPAN></A> <A=20
  href=3D"http://www.w3.org/TR/PNG/#3pixel"><SPAN=20
  class=3DDefinition>pixels</SPAN></A> into a selected set of <A=20
  href=3D"http://www.w3.org/TR/PNG/#3truecolour"><SPAN=20
  class=3DDefinition>truecolour</SPAN></A> values, or to perform <A=20
  href=3D"http://www.w3.org/TR/PNG/#3gamma"><SPAN=20
  class=3DDefinition>gamma</SPAN></A> correction. In software, a LUT can =
often be=20
  used as a fast way of implementing any mathematical function of a =
single=20
  integer variable.=20
  <DT><A name=3D3MSB>3.2.4 MSB</A>=20
  <DD>Most Significant Byte of a multi-<A=20
  href=3D"http://www.w3.org/TR/PNG/#3byte"><SPAN =
class=3DDefinition>byte</SPAN></A>=20
  value. </DD></DL><!-- ************Page Break******************* =
--><!-- ************Page Break******************* -->
<H1><A name=3D4Concepts>4 Concepts</A></H1>
<H2><A name=3D4Concepts.Sourceimage>4.1 Images</A></H2>
<P>This International Standard specifies the PNG datastream, and places =
some=20
requirements on PNG encoders, which generate PNG datastreams, PNG =
decoders,=20
which interpret PNG datastreams, and PNG editors, which transform one =
PNG=20
datastream into another. It does not specify the interface between an=20
application and either a PNG encoder, decoder, or editor. The precise =
form in=20
which an image is presented to an encoder or delivered by a decoder is =
not=20
specified. Four kinds of image are distinguished.</P>
<OL>
  <LI>The <I>source image</I> is the image presented to a PNG encoder.=20
  <LI>The <I>reference image</I>, which only exists conceptually, is a=20
  rectangular array of rectangular pixels, all having the same width and =
height,=20
  and all containing the same number of unsigned integer samples, either =
three=20
  (red, green, blue) or four (red, green, blue, alpha). The array of all =
samples=20
  of a particular kind (red, green, blue, or alpha) is called a channel. =
Each=20
  channel has a sample depth in the range 1 to 16, which is the number =
of bits=20
  used by every sample in the channel. Different channels may have =
different=20
  sample depths. The red, green, and blue samples determine the =
intensities of=20
  the red, green, and blue components of the pixel's colour; if they are =
all=20
  zero, the pixel is black, and if they all have their maximum values=20
  (2<SUP>sampledepth</SUP>-1), the pixel is white. The alpha sample =
determines a=20
  pixel's degree of opacity, where zero means fully transparent and the =
maximum=20
  value means fully opaque. In a three-channel reference image all =
pixels are=20
  fully opaque. (It is also possible for a four-channel reference image =
to have=20
  all pixels fully opaque; the difference is that the latter has a =
specific=20
  alpha sample depth, whereas the former does not.) Each horizontal row =
of=20
  pixels is called a scanline. Pixels are ordered from left to right =
within each=20
  scanline, and scanlines are ordered from top to bottom. A PNG encoder =
may=20
  transform the source image directly into a PNG image, but conceptually =
it=20
  first transforms the source image into a reference image, then =
transforms the=20
  reference image into a PNG image. Depending on the type of source =
image, the=20
  transformation from the source image to a reference image may require =
the loss=20
  of information. That transformation is beyond the scope of this =
International=20
  Standard. The reference image, however, can always be recovered =
exactly from a=20
  PNG datastream.=20
  <LI>The <I>PNG image</I> is obtained from the reference image by a =
series of=20
  transformations: alpha separation, indexing, RGB merging, alpha =
compaction,=20
  and sample depth scaling. Five types of PNG image are defined (see =
6.1: <A=20
  href=3D"http://www.w3.org/TR/PNG/#6Colour-values"><SPAN =
class=3Dxref>Colour types=20
  and values</SPAN></A>). (If the PNG encoder actually transforms the =
source=20
  image directly into the PNG image, and the source image format is =
already=20
  similar to the PNG image format, the encoder may be able to avoid =
doing some=20
  of these transformations.) Although not all sample depths in the range =
1 to 16=20
  bits are explicitly supported in the PNG image, the number of =
significant bits=20
  in each channel of the reference image may be recorded. All channels =
in the=20
  PNG image have the same sample depth. A PNG encoder generates a PNG =
datastream=20
  from the PNG image. A PNG decoder takes the PNG datastream and =
recreates the=20
  PNG image.=20
  <LI>The <I>delivered image</I> is constructed from the PNG image =
obtained by=20
  decoding a PNG datastream. No specific format is specified for the =
delivered=20
  image. A viewer presents an image to the user as close to the =
appearance of=20
  the original source image as it can achieve. </LI></OL>
<P>The relationships between the four kinds of image are illustrated in =
<A=20
href=3D"http://www.w3.org/TR/PNG/#figure41"><SPAN class=3Dfigref>figure=20
4.1</SPAN></A>.</P>
<P><A name=3Dfigure41>
<OBJECT data=3D"figures/fig41.svg" width=3D640 type=3Dimage/svg+xml =
height=3D290>
   <img height=3D"280" width=3D"640" src=3D"png-figures/fig41.png" =
alt=3D"Figure 4.1:=20
Relationships betweensource, reference, PNG, and display images" />
</OBJECT></A></P>
<P class=3DFiguretitle>Figure 4.1 =E2=80=94 Relationships between =
source, reference, PNG,=20
and display images</P><!-- ************Page Break******************* =
--><!-- ************Page Break******************* -->
<P>The relationships between samples, channels, pixels, and sample depth =
are=20
illustrated in <A href=3D"http://www.w3.org/TR/PNG/#figure42"><SPAN=20
class=3Dfigref>figure 4.2</SPAN></A>.</P>
<P><A name=3Dfigure42>
<OBJECT data=3D"figures/fig42.svg" width=3D640 type=3Dimage/svg+xml =
height=3D290>
  <img height=3D"290" width=3D"640" src=3D"png-figures/fig42.png" =
alt=3D"Figure 4.2:=20
Relationships betweensample, sample depth, pixel, and channel" />
</OBJECT></A></P>
<P class=3DFiguretitle>Figure 4.2 =E2=80=94 Relationships between =
sample, sample depth,=20
pixel, and channel</P>
<H2><A name=3D4Concepts.ColourSpaces>4.2 Colour spaces</A></H2>
<P>The RGB colour space in which colour samples are situated may be =
specified in=20
one of three ways:</P><!-- <ol start=3D"1"> -->
<OL>
  <LI>by an ICC profile;=20
  <LI>by specifying explicitly that the colour space is sRGB when the =
samples=20
  conform to this colour space;=20
  <LI>by specifying the value of gamma and the 1931 CIE <I>x,y</I>=20
  chromaticities of the red, green, and blue primaries used in the image =
and the=20
  reference white point. </LI></OL>
<P>For high-end applications the first method provides the most =
flexibility and=20
control. The second method enables one particular colour space to be =
indicated.=20
The third method enables the exact chromaticities of the RGB data to be=20
specified, along with the gamma correction (the power function relating =
the=20
desired display output with the image samples) to be applied (see Annex =
C: <A=20
href=3D"http://www.w3.org/TR/PNG/#C-GammaAppendix"><SPAN =
class=3Dxref>Gamma and=20
chromaticity</SPAN></A>). It is recommended that explicit gamma =
information also=20
be provided when either the first or second method is used, for use by =
PNG=20
decoders that do not support full ICC profiles or the sRGB colour space. =
Such=20
PNG decoders can still make sensible use of gamma information. PNG =
decoders are=20
strongly encouraged to use this information, plus information about the =
display=20
system, in order to present the image to the viewer in a way that =
reproduces as=20
closely as possible what the image's original author saw .</P>
<P>Gamma correction is not applied to the alpha channel, if present. =
Alpha=20
samples always represent a linear fraction of full opacity.</P>
<H2><A name=3D4Concepts.PNGImageTransformation>4.3 Reference image to =
PNG image=20
transformation</A></H2>
<H3><A name=3D4Concepts.Introduction>4.3.1 Introduction</A></H3>
<P>A number of transformations are applied to the reference image to =
create the=20
PNG image to be encoded (see <A =
href=3D"http://www.w3.org/TR/PNG/#figure43"><SPAN=20
class=3Dfigref>figure 4.3</SPAN></A>). The transformations are applied =
in the=20
following sequence, where square brackets mean the transformation is=20
optional:</P><PRE>        [alpha separation]
        indexing or ( [RGB merging] [alpha compaction] )
        sample depth scaling
</PRE>
<P>When every pixel is either fully transparent or fully opaque, the =
alpha=20
separation, alpha compaction, and indexing transformations can cause the =

recovered reference image to have an alpha sample depth different from =
the=20
original reference image, or to have no alpha channel. This has no =
effect on the=20
degree of opacity of any pixel. The two reference images are considered=20
equivalent, and the transformations are considered lossless. Encoders =
that=20
nevertheless wish to preserve the alpha sample depth may elect not to =
perform=20
transformations that would alter the alpha sample depth.</P><!-- =
************Page Break******************* --><!-- ************Page =
Break******************* -->
<P><A name=3Dfigure43>
<OBJECT data=3D"figures/fig43.svg" width=3D640 type=3Dimage/svg+xml =
height=3D525>
<img height=3D"525" width=3D"640" src=3D"png-figures/fig43.png" =
alt=3D"Figure 4.3:=20
Reference image to PNGimage transformation" /></OBJECT></A></P>
<P class=3DFiguretitle>Figure 4.3 =E2=80=94 Reference image to PNG image =

transformation</P>
<H3><A name=3D4Concepts.Implied-alpha>4.3.2 Alpha separation</A></H3>
<P>If all alpha samples in a reference image have the maximum value, =
then the=20
alpha channel may be omitted, resulting in an equivalent image that can =
be=20
encoded more compactly.</P>
<H3><A name=3D4Concepts.Indexing>4.3.3 Indexing</A></H3>
<P>If the number of distinct pixel values is 256 or less, and the RGB =
sample=20
depths are not greater than 8, and the alpha channel is absent or =
exactly 8 bits=20
deep or every pixel is either fully transparent or fully opaque, then an =

alternative representation called indexed-colour may be more efficient =
for=20
encoding. Each pixel is replaced by an index into a palette. The palette =
is a=20
list of entries each containing three 8-bit samples (red, green, blue). =
If an=20
alpha channel is present, there is also a parallel table of 8-bit alpha=20
samples.</P><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<P><A name=3Dfigure44>
<OBJECT data=3D"figures/fig44.svg" width=3D660 type=3Dimage/svg+xml =
height=3D450>
  <img height=3D"450" width=3D"660" src=3D"png-figures/fig44.png" =
alt=3D"Figure 4.4:=20
Indexed-colourimage" /></OBJECT></A></P>
<P class=3DFiguretitle>Figure 4.4 =E2=80=94 Indexed-colour image</P>
<P>A suggested palette or palettes may be constructed even when the PNG =
image is=20
not indexed-colour in order to assist viewers that are capable of =
displaying=20
only a limited number of colours.</P>
<P>For indexed-colour images, encoders can rearrange the palette so that =
the=20
table entries with the maximum alpha value are grouped at the end. In =
this case=20
the table can be encoded in a shortened form that does not include these =

entries.</P>
<H3><A name=3D4Concepts.RGBMerging>4.3.4 RGB merging</A></H3>
<P>If the red, green, and blue channels have the same sample depth, and =
for each=20
pixel the values of the red, green, and blue samples are equal, then =
these three=20
channels may be merged into a single greyscale channel.</P>
<H3><A name=3D4Concepts.Alpha-indexing>4.3.5 Alpha compaction</A></H3>
<P>For non-indexed images, if there exists an RGB (or greyscale) value =
such that=20
all pixels with that value are fully transparent while all other pixels =
are=20
fully opaque, then the alpha channel can be represented more compactly =
by merely=20
identifying the RGB (or greyscale) value that is transparent.</P>
<H3><A name=3D4Concepts.Scaling>4.3.6 Sample depth scaling</A></H3>
<P>In the PNG image, not all sample depths are supported (see 6.1: <A=20
href=3D"http://www.w3.org/TR/PNG/#6Colour-values"><SPAN =
class=3Dxref>Colour types=20
and values</SPAN></A>), and all channels shall have the same sample =
depth. All=20
channels of the PNG image use the smallest allowable sample depth that =
is not=20
less than any sample depth in the reference image, and the possible =
sample=20
values in the reference image are linearly mapped into the next =
allowable range=20
for the PNG image. <A href=3D"http://www.w3.org/TR/PNG/#figure45"><SPAN=20
class=3Dfigref>Figure 4.5</SPAN></A> shows how samples of depth 3 might =
be mapped=20
into samples of depth 4.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<P><A name=3Dfigure45>
<OBJECT data=3D"figures/fig45.svg" width=3D640 type=3Dimage/svg+xml =
height=3D320>
  <img height=3D"320" width=3D"640" src=3D"png-figures/fig45.png" =
alt=3D"Figure 4.5:=20
Scaling samplevalues" /></OBJECT></A></P>
<P class=3DFiguretitle>Figure 4.5 =E2=80=94 Scaling sample values</P>
<P>Allowing only a few sample depths reduces the number of cases that =
decoders=20
have to cope with. Sample depth scaling is reversible with no loss of =
data,=20
because the reference image sample depths can be recorded in the PNG =
datastream.=20
In the absence of recorded sample depths, the reference image sample =
depth=20
equals the PNG image sample depth. See 12.5: <A=20
href=3D"http://www.w3.org/TR/PNG/#12Sample-depth-scaling"><SPAN =
class=3Dxref>Sample=20
depth scaling</SPAN></A> and 13.12: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Sample-depth-rescaling"><SPAN=20
class=3Dxref>Sample depth rescaling</SPAN></A>.</P>
<P><A name=3Dfigure46>
<OBJECT data=3D"figures/fig46.svg" width=3D660 type=3Dimage/svg+xml =
height=3D450>
  <img  height=3D"450" width=3D"660" src=3D "png-figures/fig46.png" =
alt=3D"Figure 4.6:=20
Possible PNG imagepixel types" /></OBJECT></A></P>
<P class=3DFiguretitle>Figure 4.6 =E2=80=94 Possible PNG image pixel =
types</P><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<H2><A name=3D4Concepts.PNGImage>4.4 PNG image</A></H2>
<P>The transformation of the reference image results in one of five =
types of PNG=20
image (see <A href=3D"http://www.w3.org/TR/PNG/#figure46"><SPAN=20
class=3Dfigref>figure 4.6</SPAN></A>) :</P><!-- <ol start=3D"1"> -->
<OL>
  <LI>Truecolour with alpha: each pixel consists of four samples: red, =
green,=20
  blue, and alpha.=20
  <LI>Greyscale with alpha: each pixel consists of two samples: grey and =
alpha.=20
  <LI>Truecolour: each pixel consists of three samples: red, green, and =
blue.=20
  The alpha channel may be represented by a single pixel value. Matching =
pixels=20
  are fully transparent, and all others are fully opaque. If the alpha =
channel=20
  is not represented in this way, all pixels are fully opaque.=20
  <LI>Greyscale: each pixel consists of a single sample: grey. The alpha =
channel=20
  may be represented by a single pixel value as in the previous case. If =
the=20
  alpha channel is not represented in this way, all pixels are fully =
opaque.=20
  <LI>Indexed-colour: each pixel consists of an index into a palette =
(and into=20
  an associated table of alpha values, if present). </LI></OL>
<P>The format of each pixel depends on the PNG image type and the bit =
depth. For=20
PNG image types other than indexed-colour, the bit depth specifies the =
number of=20
bits per sample, not the total number of bits per pixel. For =
indexed-colour=20
images, the bit depth specifies the number of bits in each palette =
index, not=20
the sample depth of the colours in the palette or alpha table. Within =
the pixel=20
the samples appear in the following order, depending on the PNG image =
type.</P><!-- <ol start=3D"6"> -->
<OL>
  <LI>Truecolour with alpha: red, green, blue, alpha.=20
  <LI>Greyscale with alpha: grey, alpha.=20
  <LI>Truecolour: red, green, blue.=20
  <LI>Greyscale: grey.=20
  <LI>Indexed-colour: palette index. </LI></OL>
<H2><A name=3D4Concepts.Encoding>4.5 Encoding the PNG image</A></H2>
<H3><A name=3D4Concepts.EncodingIntro>4.5.1 Introduction</A></H3>
<P>A conceptual model of the process of encoding a PNG image is given in =
<A=20
href=3D"http://www.w3.org/TR/PNG/#figure47"><SPAN class=3Dfigref>figure=20
4.7</SPAN></A>. The steps refer to the operations on the array of pixels =
or=20
indices in the PNG image. The palette and alpha table are not encoded in =
this=20
way.</P><!-- <ol start=3D"1"> -->
<OL>
  <LI>Pass extraction: to allow for progressive display, the PNG image =
pixels=20
  can be rearranged to form several smaller images called reduced images =
or=20
  passes.=20
  <LI>Scanline serialization: the image is serialized a scanline at a =
time.=20
  Pixels are ordered left to right in a scanline and scanlines are =
ordered top=20
  to bottom.=20
  <LI>Filtering: each scanline is transformed into a filtered scanline =
using one=20
  of the defined filter types to prepare the scanline for image =
compression.=20
  <LI>Compression: occurs on all the filtered scanlines in the image.=20
  <LI>Chunking: the compressed image is divided into conveniently sized =
chunks.=20
  An error detection code is added to each chunk.=20
  <LI>Datastream construction: the chunks are inserted into the =
datastream.=20
</LI></OL>
<H3><A name=3D4Concepts.EncodingPassAbs>4.5.2 Pass extraction</A></H3>
<P>Pass extraction (see <A =
href=3D"http://www.w3.org/TR/PNG/#figure48"><SPAN=20
class=3Dfigref>figure 4.8</SPAN></A>) splits a PNG image into a sequence =
of=20
reduced images where the first image defines a coarse view and =
subsequent images=20
enhance this coarse view until the last image completes the PNG image. =
The set=20
of reduced images is also called an interlaced PNG image. Two interlace =
methods=20
are defined in this International Standard. The first method is a null =
method;=20
pixels are stored sequentially from left to right and scanlines from top =
to=20
bottom. The second method makes multiple scans over the image to produce =
a=20
sequence of seven reduced images. The seven passes for a sample image =
are=20
illustrated in <A href=3D"http://www.w3.org/TR/PNG/#figure48"><SPAN=20
class=3Dfigref>figure 4.8</SPAN></A>. See clause&nbsp;8: <A=20
href=3D"http://www.w3.org/TR/PNG/#8Interlace"><SPAN =
class=3Dxref>Interlacing and=20
pass extraction</SPAN></A>.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<P><A name=3Dfigure47>
<OBJECT data=3D"figures/fig47.svg" width=3D645 type=3Dimage/svg+xml =
height=3D575>
	<img height=3D"575" width=3D"645" src=3D"png-figures/fig47.png" =
alt=3D"Figure 4.7:=20
Encoding the PNGimage" /></OBJECT></A></P>
<P class=3DFiguretitle>Figure 4.7 =E2=80=94 Encoding the PNG image</P>
<P><A name=3Dfigure48>
<OBJECT data=3D"figures/fig48.svg" width=3D645 type=3Dimage/svg+xml =
height=3D450>
	<img height=3D"450" width=3D"645" src=3D"png-figures/fig48.png" =
alt=3D"Figure 4.8: Pass=20
extraction" /></OBJECT></A></P>
<P class=3DFiguretitle>Figure 4.8 =E2=80=94 Pass extraction</P><!-- =
************Page Break******************* --><!-- ************Page =
Break******************* -->
<H3><A name=3D4Concepts.EncodingScanlineAbs>4.5.3 Scanline =
serialization</A></H3>
<P>Each row of pixels, called a scanline, is represented as a sequence =
of=20
bytes.</P>
<H3><A name=3D4Concepts.EncodingFiltering>4.5.4 Filtering</A></H3>
<P>PNG standardizes one filter method and several filter types that may =
be used=20
to prepare image data for compression. It transforms the byte sequence =
in a=20
scanline to an equal length sequence of bytes preceded by a filter type =
byte=20
(see <A href=3D"http://www.w3.org/TR/PNG/#figure49"><SPAN =
class=3Dfigref>figure=20
4.9</SPAN></A> for an example). The filter type byte defines the =
specific=20
filtering to be applied to a specific scanline. The encoder shall use =
only a=20
single filter method for an interlaced PNG image, but may use different =
filter=20
types for each scanline in a reduced image. See clause&nbsp;9: <A=20
href=3D"http://www.w3.org/TR/PNG/#9Filters"><SPAN=20
class=3Dxref>Filtering</SPAN></A>.</P>
<P><A name=3Dfigure49>
<OBJECT data=3D"figures/fig49.svg" width=3D710 type=3Dimage/svg+xml =
height=3D340>
  <img height=3D"340" width=3D"710" src=3D"png-figures/fig49.png" =
alt=3D"Figure 4.9:=20
Serializing andfiltering a scanline" /></OBJECT></A></P>
<P class=3DFiguretitle>Figure 4.9 =E2=80=94 Serializing and filtering a =
scanline</P>
<H3><A name=3D4Concepts.EncodingCompression>4.5.5 Compression</A></H3>
<P>The sequence of filtered scanlines in the pass or passes of the PNG =
image is=20
compressed (see <A href=3D"http://www.w3.org/TR/PNG/#figure410"><SPAN=20
class=3Dfigref>figure 4.10</SPAN></A>) by one of the defined compression =
methods.=20
The concatenated filtered scanlines form the input to the compression =
stage. The=20
output from the compression stage is a single compressed datastream. See =

clause&nbsp;10: <A =
href=3D"http://www.w3.org/TR/PNG/#10Compression"><SPAN=20
class=3Dxref>Compression</SPAN></A>.</P>
<H3><A name=3D4Concepts.EncodingChunking>4.5.6 Chunking</A></H3>
<P>Chunking provides a convenient breakdown of the compressed datastream =
into=20
manageable chunks (see <SPAN class=3Dfigref><A=20
href=3D"http://www.w3.org/TR/PNG/#figure410">figure 4.10</A></SPAN>). =
Each chunk=20
has its own redundancy check. See clause&nbsp;11: <A=20
href=3D"http://www.w3.org/TR/PNG/#11Chunks"><SPAN class=3Dxref>Chunk=20
specifications</SPAN></A>.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<P><A name=3Dfigure410>
<OBJECT data=3D"figures/fig410.svg" width=3D700 type=3Dimage/svg+xml =
height=3D450>
 <img height=3D"450" width=3D"700" src=3D"png-figures/fig410.png" =
alt=3D"Figure 4.10:=20
Compression" /></OBJECT></A></P>
<P class=3DFiguretitle>Figure 4.10 =E2=80=94 Compression</P>
<H2><A name=3D4Concepts.AncillInfo>4.6 Additional information</A></H2>
<P>Ancillary information may be associated with an image. Decoders may =
ignore=20
all or some of the ancillary information. The types of ancillary =
information=20
provided are described in <A =
href=3D"http://www.w3.org/TR/PNG/#table41"><SPAN=20
class=3Dtabref>Table 4.1</SPAN></A>.</P>
<TABLE class=3DRegular=20
summary=3D"This table lists the types of ancillary information that may =
be associated with an image">
  <CAPTION><A name=3Dtable41><B>Table 4.1 =E2=80=94 Types of ancillary=20
  information</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>Type of information</TH>
    <TH>Description</TH></TR>
  <TR>
    <TD class=3DRegular>Background colour</TD>
    <TD class=3DRegular>Solid background colour to be used when =
presenting the=20
      image if no better option is available.</TD></TR>
  <TR>
    <TD class=3DRegular>Gamma and chromaticity</TD>
    <TD class=3DRegular>Gamma characteristic of the image with respect =
to the=20
      desired output intensity, and chromaticity characteristics of the =
RGB=20
      values used in the image.</TD></TR>
  <TR>
    <TD class=3DRegular>ICC profile</TD>
    <TD class=3DRegular>Description of the colour space (in the form of =
an=20
      International Color Consortium (ICC) profile) to which the samples =
in the=20
      image conform.</TD></TR>
  <TR>
    <TD class=3DRegular>Image histogram</TD>
    <TD class=3DRegular>Estimates of how frequently the image uses each =
palette=20
      entry.</TD></TR>
  <TR>
    <TD class=3DRegular>Physical pixel dimensions</TD>
    <TD class=3DRegular>Intended pixel size and aspect ratio to be used =
in=20
      presenting the PNG image.</TD></TR>
  <TR>
    <TD class=3DRegular>Significant bits</TD>
    <TD class=3DRegular>The number of bits that are significant in the=20
    samples.</TD></TR>
  <TR>
    <TD class=3DRegular>sRGB colour space</TD>
    <TD class=3DRegular>A rendering intent (as defined by the =
International=20
      Color Consortium) and an indication that the image samples conform =
to this=20
      colour space.</TD></TR>
  <TR>
    <TD class=3DRegular>Suggested palette</TD>
    <TD class=3DRegular>A reduced palette that may be used when the =
display=20
      device is not capable of displaying the full range of colours in =
the=20
    image.</TD></TR>
  <TR>
    <TD class=3DRegular>Textual data</TD>
    <TD class=3DRegular>Textual information (which may be compressed) =
associated=20
      with the image.</TD></TR>
  <TR>
    <TD class=3DRegular>Time</TD>
    <TD class=3DRegular>The time when the PNG image was last =
modified.</TD></TR>
  <TR>
    <TD class=3DRegular>Transparency</TD>
    <TD class=3DRegular>Alpha information that allows the reference =
image to be=20
      reconstructed when the alpha channel is not retained in the PNG=20
  image.</TD></TR></TBODY></TABLE><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H2><A name=3D4Concepts.Format>4.7 PNG datastream</A></H2>
<H3><A name=3D4Concepts.FormatChunks>4.7.1 Chunks</A></H3>
<P>The PNG datastream consists of a PNG signature (see 5.2: <A=20
href=3D"http://www.w3.org/TR/PNG/#5PNG-file-signature"><SPAN =
class=3Dxref>PNG=20
signature</SPAN></A>) followed by a sequence of chunks (see =
clause&nbsp;11: <A=20
href=3D"http://www.w3.org/TR/PNG/#11Chunks"><SPAN class=3Dxref>Chunk=20
specifications</SPAN></A>). Each chunk has a chunk type which specifies =
its=20
function.</P>
<H3><A name=3D4Concepts.FormatTypes>4.7.2 Chunk types</A></H3>
<P>There are 18 chunk types defined in this International Standard. =
Chunk types=20
are four-byte sequences chosen so that they correspond to readable =
labels when=20
interpreted in the ISO 646.IRV:1991 character set. The first four are =
termed=20
critical chunks, which shall be understood and correctly interpreted =
according=20
to the provisions of this International Standard. These are:</P><!-- <ol =
start=3D"1"> -->
<OL>
  <LI><A href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN=20
  class=3Dchunk>IHDR</SPAN></A>: image header, which is the first chunk =
in a PNG=20
  datastream.=20
  <LI><A href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
  class=3Dchunk>PLTE</SPAN></A>: palette table associated with indexed =
PNG images.=20

  <LI><A href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
  class=3Dchunk>IDAT</SPAN></A>: image data chunks.=20
  <LI><A href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN=20
  class=3Dchunk>IEND</SPAN></A>: image trailer, which is the last chunk =
in a PNG=20
  datastream. </LI></OL>
<P>The remaining 14 chunk types are termed ancillary chunk types, which =
encoders=20
may generate and decoders may interpret.</P><!-- <ol start=3D"5"> -->
<OL>
  <LI>Transparency information: <A =
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN=20
  class=3Dchunk>tRNS</SPAN></A> (see 11.3.2: <A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#11transinfo">Transparency =
information</A>).=20
  <LI>Colour space information: <A =
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
  class=3Dchunk>cHRM</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
  class=3Dchunk>gAMA</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN=20
  class=3Dchunk>iCCP</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN=20
  class=3Dchunk>sBIT</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN=20
  class=3Dchunk>sRGB</SPAN></A> (see 11.3.3: <A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#11addnlcolinfo">Colour space =
information</A>).=20

  <LI>Textual information: <A =
href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN=20
  class=3Dchunk>iTXt</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN=20
  class=3Dchunk>tEXt</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN=20
  class=3Dchunk>zTXt</SPAN></A> (see 11.3.4: <A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#11textinfo">Textual =
information</A>).=20
  <LI>Miscellaneous information: <A=20
  href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A>, <A=20
  href=3D"http://www.w3.org/TR/PNG/#11hIST"><SPAN =
class=3Dchunk>hIST</SPAN></A>, <A=20
  href=3D"http://www.w3.org/TR/PNG/#11pHYs"><SPAN =
class=3Dchunk>pHYs</SPAN></A>, <A=20
  href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A> (see=20
  11.3.5: <A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#11addnlsiinfo">Miscellaneous =
information</A>).=20

  <LI>Time information: <A =
href=3D"http://www.w3.org/TR/PNG/#11tIME"><SPAN=20
  class=3Dchunk>tIME</SPAN></A> (see 11.3.6: <A class=3DHref=20
  href=3D"http://www.w3.org/TR/PNG/#11timestampinfo">Time stamp =
information</A>).=20
  </LI></OL>
<H2><A name=3D4Concepts.Errors>4.8 Error handling</A></H2>
<P>Errors in a PNG datastream fall into two general classes:</P><!-- <ol =
start=3D"1"> -->
<OL>
  <LI>transmission errors or damage to a computer file system, which =
tend to=20
  corrupt much or all of the datastream;=20
  <LI>syntax errors, which appear as invalid values in chunks, or as =
missing or=20
  misplaced chunks. Syntax errors can be caused not only by encoding =
mistakes,=20
  but also by the use of registered or private values, if those values =
are=20
  unknown to the decoder. </LI></OL>
<P>PNG decoders should detect errors as early as possible, recover from =
errors=20
whenever possible, and fail gracefully otherwise. The error handling =
philosophy=20
is described in detail in 13.2: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Decoders.Errors"><SPAN =
class=3Dxref>Error=20
handling</SPAN></A>.</P>
<H2><A name=3D4Concepts.Registration>4.9 Extension and =
registration</A></H2>
<P>For some facilities in PNG, there are a number of alternatives =
defined, and=20
this International Standard allows other alternatives to be defined by=20
registration. According to the rules for the designation and operation =
of=20
registration authorities in the ISO/IEC Directives, the ISO and IEC =
Councils=20
have designated the following as the registration authority:</P>
<ADDRESS>The World-Wide Web Consortium Host at ERCIM</ADDRESS>
<ADDRESS>The Registration Authority for PNG</ADDRESS>
<ADDRESS>INRIA- Sophia Antipolis</ADDRESS>
<ADDRESS>BP 93</ADDRESS>
<ADDRESS>06902 Sophia Antipolis Cedex</ADDRESS>
<ADDRESS>FRANCE</ADDRESS>
<ADDRESS>Email:png-group@w3.org</ADDRESS>
<P>To ensure timely processing the Registration Authority should be =
contacted by=20
email.</P>
<P>The following entities may be registered:</P><!-- <ol start=3D"1"> =
-->
<OL>
  <LI>chunk type;=20
  <LI>text keyword. </LI></OL>
<P>The following entities are reserved for future =
standardization:</P><!-- <ol start=3D"4"> -->
<OL>
  <LI>undefined field values less than 128;=20
  <LI>filter method;=20
  <LI>filter type;=20
  <LI>interlace method;=20
  <LI>compression method. </LI></OL><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H1><A name=3D5DataRep>5 Datastream structure</A></H1>
<H2><A name=3D5Introduction>5.1 Introduction</A></H2>
<P>This clause defines the PNG signature and the basic properties of =
chunks.=20
Individual chunk types are discussed in clause&nbsp;11: <A=20
href=3D"http://www.w3.org/TR/PNG/#11Chunks"><SPAN class=3Dxref>Chunk=20
specifications</SPAN></A>.</P>
<H2><A name=3D5PNG-file-signature>5.2 PNG signature</A></H2>
<P>The first eight bytes of a PNG datastream always contain the =
following=20
(decimal) values:</P><PRE>   137 80 78 71 13 10 26 10
</PRE>
<P>This signature indicates that the remainder of the datastream =
contains a=20
single PNG image, consisting of a series of chunks beginning with an <A=20
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A> chunk=20
and ending with an <A href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN=20
class=3Dchunk>IEND</SPAN></A> chunk.</P>
<H2><A name=3D5Chunk-layout>5.3 Chunk layout</A></H2>
<P>Each chunk consists of three or four fields (see figure 5.1). The =
meaning of=20
the fields is described in <A =
href=3D"http://www.w3.org/TR/PNG/#table51"><SPAN=20
class=3Dtabref>Table 5.1</SPAN></A>. The chunk data field may be =
empty.</P>
<P><A name=3Dfigure411>
<OBJECT data=3D"figures/fig51.svg" width=3D480 type=3Dimage/svg+xml =
height=3D160>
 <img height=3D"160" width=3D"480" src=3D"png-figures/fig51.png" =
alt=3D"Figure 5.1:=20
Chunk parts" /></OBJECT></A></P>
<P class=3DFiguretitle>Figure 5.1 =E2=80=94 Chunk parts</P>
<TABLE class=3DRegular summary=3D"This table defines the chunk fields">
  <CAPTION><A name=3Dtable51><B>Table 5.1 =E2=80=94 Chunk =
fields</B></A></CAPTION>
  <TBODY>
  <TR>
    <TD class=3DRegular>Length</TD>
    <TD class=3DRegular>A four-byte unsigned integer giving the number =
of bytes=20
      in the chunk's data field. The length counts <STRONG>only</STRONG> =
the=20
      data field, <STRONG>not</STRONG> itself, the chunk type, or the =
CRC. Zero=20
      is a valid length. Although encoders and decoders should treat the =
length=20
      as unsigned, its value shall not exceed 2<SUP>31</SUP>-1 =
bytes.</TD></TR>
  <TR>
    <TD class=3DRegular>Chunk Type</TD>
    <TD class=3DRegular>A sequence of four bytes defining the chunk =
type. Each=20
      byte of a chunk type is restricted to the decimal values 65 to 90 =
and 97=20
      to 122. These correspond to the uppercase and lowercase ISO 646 =
letters=20
      (<TT>A</TT>-<TT>Z</TT> and <TT>a</TT>-<TT>z</TT>) respectively for =

      convenience in description and examination of PNG datastreams. =
Encoders=20
      and decoders shall treat the chunk types as fixed binary values, =
not=20
      character strings. For example, it would not be correct to =
represent the=20
      chunk type <A href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
      class=3Dchunk>IDAT</SPAN></A> by the equivalents of those letters =
in the UCS=20
      2 character set. Additional naming conventions for chunk types are =

      discussed in 5.4: <A=20
      href=3D"http://www.w3.org/TR/PNG/#5Chunk-naming-conventions"><SPAN =

      class=3Dxref>Chunk naming conventions</SPAN></A>.</TD></TR>
  <TR>
    <TD class=3DRegular>Chunk Data</TD>
    <TD class=3DRegular>The data bytes appropriate to the chunk type, if =
any.=20
      This field can be of zero length.</TD></TR>
  <TR>
    <TD class=3DRegular>CRC</TD>
    <TD class=3DRegular>A four-byte CRC (Cyclic Redundancy Code) =
calculated on=20
      the preceding bytes in the chunk, including the chunk type field =
and chunk=20
      data fields, but <STRONG>not</STRONG> including the length field. =
The CRC=20
      can be used to check for corruption of the data. The CRC is always =

      present, even for chunks containing no data. See 5.5: <A=20
      href=3D"http://www.w3.org/TR/PNG/#5CRC-algorithm"><SPAN =
class=3Dxref>Cyclic=20
      Redundancy Code algorithm</SPAN></A>.</TD></TR></TBODY></TABLE>
<P>The chunk data length may be any number of bytes up to the maximum;=20
therefore, implementors cannot assume that chunks are aligned on any =
boundaries=20
larger than bytes.</P><!-- ************Page Break******************* =
--><!-- ************Page Break******************* -->
<H2><A name=3D5Chunk-naming-conventions>5.4 Chunk naming =
conventions</A></H2>
<P>Chunk types are chosen to be meaningful names when the bytes of the =
chunk=20
type are interpreted as ISO 646 letters. Chunk types are assigned so =
that a=20
decoder can determine some properties of a chunk even when the type is =
not=20
recognized. These rules allow safe, flexible extension of the PNG =
format, by=20
allowing a PNG decoder to decide what to do when it encounters an =
unknown chunk.=20
(The chunk types standardized in this International Standard are defined =
in=20
clause&nbsp;11: <A href=3D"http://www.w3.org/TR/PNG/#11Chunks"><SPAN=20
class=3Dxref>Chunk specifications</SPAN></A>, and the way to add =
non-standard=20
chunks is defined in clause&nbsp;14: <A=20
href=3D"http://www.w3.org/TR/PNG/#14EditorsExt"><SPAN =
class=3Dxref>Editors and=20
extensions</SPAN></A>.) The naming rules are normally of interest only =
when the=20
decoder does not recognize the chunk's type.</P>
<P>Four bits of the chunk type, the property bits, namely bit 5 (value =
32) of=20
each byte, are used to convey chunk properties. This choice means that a =
human=20
can read off the assigned properties according to whether the letter=20
corresponding to each byte of the chunk type is uppercase (bit 5 is 0) =
or=20
lowercase (bit 5 is 1). However, decoders should test the properties of =
an=20
unknown chunk type by numerically testing the specified bits; testing =
whether a=20
character is uppercase or lowercase is inefficient, and even incorrect =
if a=20
locale-specific case definition is used.</P>
<P>The property bits are an inherent part of the chunk type, and hence =
are fixed=20
for any chunk type. Thus, <SPAN class=3Dchunk>CHNK</SPAN> and <SPAN=20
class=3Dchunk>cHNk</SPAN> would be unrelated chunk types, not the same =
chunk with=20
different properties.</P>
<P>The semantics of the property bits are defined in <A=20
href=3D"http://www.w3.org/TR/PNG/#table52"><SPAN class=3Dtabref>Table=20
5.2</SPAN></A>. </P>
<TABLE class=3DRegular=20
summary=3D"This table defines the semantics of the property bits">
  <CAPTION><A name=3Dtable52><B>Table 5.2 =E2=80=94 Semantics of =
property=20
  bits</B></A></CAPTION>
  <TBODY>
  <TR>
    <TD class=3DRegular>Ancillary bit: first byte</TD>
    <TD class=3DRegular>0 (uppercase) =3D critical,<BR class=3Dxhtml>1 =
(lowercase) =3D=20
      ancillary.</TD>
    <TD class=3DRegular>Critical chunks are necessary for successful =
display of=20
      the contents of the datastream, for example the image header chunk =
(<A=20
      href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN=20
      class=3Dchunk>IHDR</SPAN></A>). A decoder trying to extract the =
image, upon=20
      encountering an unknown chunk type in which the ancillary bit is =
0, shall=20
      indicate to the user that the image contains information it cannot =
safely=20
      interpret.<BR class=3Dxhtml>Ancillary chunks are not strictly =
necessary in=20
      order to meaningfully display the contents of the datastream, for =
example=20
      the time chunk (<A href=3D"http://www.w3.org/TR/PNG/#11tIME"><SPAN =

      class=3Dchunk>tIME</SPAN></A>). A decoder encountering an unknown =
chunk type=20
      in which the ancillary bit is 1 can safely ignore the chunk and =
proceed to=20
      display the image.</TD></TR>
  <TR>
    <TD class=3DRegular>Private bit: second byte</TD>
    <TD class=3DRegular>0 (uppercase) =3D public,<BR class=3Dxhtml>1 =
(lowercase) =3D=20
      private.</TD>
    <TD class=3DRegular>A public chunk is one that is defined in this=20
      International Standard or is registered in the list of PNG =
special-purpose=20
      public chunk types maintained by the Registration Authority (see =
4.9 <A=20
      href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration"><SPAN=20
      class=3Dxref>Extension and registration</SPAN></A>). Applications =
can also=20
      define private (unregistered) chunk types for their own purposes. =
The=20
      names of private chunks have a lowercase second letter, while =
public=20
      chunks will always be assigned names with uppercase second =
letters.=20
      Decoders do not need to test the private-chunk property bit, since =
it has=20
      no functional significance; it is simply an administrative =
convenience to=20
      ensure that public and private chunk names will not conflict. See=20
      clause&nbsp;14: <A =
href=3D"http://www.w3.org/TR/PNG/#14EditorsExt"><SPAN=20
      class=3Dxref>Editors and extensions</SPAN></A> and 12.10.2: <A=20
      href=3D"http://www.w3.org/TR/PNG/#12Use-of-private-chunks"><SPAN=20
      class=3Dxref>Use of private chunks</SPAN></A>.</TD></TR>
  <TR>
    <TD class=3DRegular>Reserved bit: third byte</TD>
    <TD class=3DRegular>0 (uppercase) in this version of PNG.<BR =
class=3Dxhtml>If=20
      the reserved bit is 1, the datastream does not conform to this =
version of=20
      PNG.</TD>
    <TD class=3DRegular>The significance of the case of the third letter =
of the=20
      chunk name is reserved for possible future extension. In this=20
      International Standard, all chunk names shall have uppercase third =

    letters.</TD></TR>
  <TR>
    <TD class=3DRegular>Safe-to-copy bit: fourth byte</TD>
    <TD class=3DRegular>0 (uppercase) =3D unsafe to copy,<BR =
class=3Dxhtml>1=20
      (lowercase) =3D safe to copy.</TD>
    <TD class=3DRegular>This property bit is not of interest to pure =
decoders,=20
      but it is needed by PNG editors. This bit defines the proper =
handling of=20
      unrecognized chunks in a datastream that is being modified. Rules =
for PNG=20
      editors are discussed further in 14.2: <A=20
      href=3D"http://www.w3.org/TR/PNG/#14Ordering"><SPAN =
class=3Dxref>Behaviour of=20
      PNG editors</SPAN></A>.</TD></TR></TBODY></TABLE>
<P>EXAMPLE The hypothetical chunk type "<SPAN class=3Dchunk>cHNk</SPAN>" =
has the=20
property bits:</P><PRE>   cHNk  &lt;-- 32 bit chunk type represented in =
text form
   ||||
   |||+- Safe-to-copy bit is 1 (lower case letter; bit 5 is 1)
   ||+-- Reserved bit is 0     (upper case letter; bit 5 is 0)
   |+--- Private bit is 0      (upper case letter; bit 5 is 0)
   +---- Ancillary bit is 1    (lower case letter; bit 5 is 1)
</PRE>
<P>Therefore, this name represents an ancillary, public, safe-to-copy =
chunk.</P>
<H2><A name=3D5CRC-algorithm>5.5 Cyclic Redundancy Code =
algorithm</A></H2>
<P>CRC fields are calculated using standardized CRC methods with pre and =
post=20
conditioning, as defined by ISO 3309 <A=20
href=3D"http://www.w3.org/TR/PNG/#2-ISO-3309"><SPAN=20
class=3DNormRef>[ISO-3309]</SPAN></A> and ITU-T V.42 <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ITU-T-V42"><SPAN=20
class=3Dbibref>[ITU-T-V42]</SPAN></A>. The CRC polynomial employed =
is</P>
<P>x<SUP>32</SUP> + x<SUP>26</SUP> + x<SUP>23</SUP> + x<SUP>22</SUP> +=20
x<SUP>16</SUP> + x<SUP>12</SUP> + x<SUP>11</SUP> + x<SUP>10</SUP> +=20
x<SUP>8</SUP> + x<SUP>7</SUP> + x<SUP>5</SUP> + x<SUP>4</SUP> + =
x<SUP>2</SUP> +=20
x + 1</P>
<P>In PNG, the 32-bit CRC is initialized to all 1's, and then the data =
from each=20
byte is processed from the least significant bit (1) to the most =
significant bit=20
(128). After all the data bytes are processed, the CRC is inverted (its =
ones=20
complement is taken). This value is transmitted (stored in the =
datastream) MSB=20
first. For the purpose of separating into bytes and ordering, the least=20
significant bit of the 32-bit CRC is defined to be the coefficient of =
the=20
<TT>x<SUP>31</SUP></TT> term.</P>
<P>Practical calculation of the CRC often employs a precalculated table =
to=20
accelerate the computation. See Annex D: <A=20
href=3D"http://www.w3.org/TR/PNG/#D-CRCAppendix"><SPAN =
class=3Dxref>Sample Cyclic=20
Redundancy Code implementation</SPAN></A>.</P>
<H2><A name=3D5ChunkOrdering>5.6 Chunk ordering</A></H2>
<P>The constraints on the positioning of the individual chunks are =
listed in <A=20
href=3D"http://www.w3.org/TR/PNG/#table53"><SPAN class=3Dtabref>Table =
5.3</SPAN></A>=20
and illustrated diagrammatically in <A=20
href=3D"http://www.w3.org/TR/PNG/#figure52"><SPAN class=3Dfigref>figure=20
5.2</SPAN></A> and <A href=3D"http://www.w3.org/TR/PNG/#figure53"><SPAN=20
class=3Dfigref>figure 5.3</SPAN></A>. These lattice diagrams represent =
the=20
constraints on positioning imposed by this International Standard. The =
lines in=20
the diagrams define partial ordering relationships. Chunks higher up =
shall=20
appear before chunks lower down. Chunks which are horizontally aligned =
and=20
appear between two other chunk types (higher and lower than the =
horizontally=20
aligned chunks) may appear in any order between the two higher and lower =
chunk=20
types to which they are connected. The superscript associated with the =
chunk=20
type is defined in <A href=3D"http://www.w3.org/TR/PNG/#table54"><SPAN=20
class=3Dtabref>Table 5.4</SPAN></A>. It indicates whether the chunk is =
mandatory,=20
optional, or may appear more than once. A vertical bar between two chunk =
types=20
indicates alternatives.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<TABLE class=3DRegular summary=3D"This table lists the chunk ordering =
rules">
  <CAPTION><A name=3Dtable53><B>Table 5.3 =E2=80=94 Chunk ordering =
rules</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH colSpan=3D3>Critical chunks<BR class=3Dxhtml>(shall appear in =
this order,=20
      except <A href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
      class=3Dchunk>PLTE</SPAN></A> is optional)</TH></TR>
  <TR>
    <TH>Chunk name</TH>
    <TH>Multiple allowed</TH>
    <TH>Ordering constraints</TH></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN=20
      class=3Dchunk>IHDR</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>Shall be first</TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
      class=3Dchunk>PLTE</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>Before first <A=20
      href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
    </TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
      class=3Dchunk>IDAT</SPAN></A> </TD>
    <TD class=3DRegular>Yes</TD>
    <TD class=3DRegular>Multiple <A=20
      href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
      chunks shall be consecutive</TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN=20
      class=3Dchunk>IEND</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>Shall be last</TD></TR>
  <TR>
    <TH colSpan=3D3>Ancillary chunks<BR class=3Dxhtml>(need not appear =
in this=20
      order)</TH></TR>
  <TR>
    <TH>Chunk name</TH>
    <TH>Multiple allowed</TH>
    <TH>Ordering constraints</TH></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
      class=3Dchunk>cHRM</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>Before <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
      class=3Dchunk>PLTE</SPAN></A> and <A=20
      href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
    </TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
      class=3Dchunk>gAMA</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>Before <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
      class=3Dchunk>PLTE</SPAN></A> and <A=20
      href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
    </TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN=20
      class=3Dchunk>iCCP</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>Before <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
      class=3Dchunk>PLTE</SPAN></A> and <A=20
      href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>.=20
      If the <A href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN=20
      class=3Dchunk>iCCP</SPAN></A> chunk is present, the <A=20
      href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN =
class=3Dchunk>sRGB</SPAN></A>=20
      chunk should not be present.</TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN=20
      class=3Dchunk>sBIT</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>Before <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
      class=3Dchunk>PLTE</SPAN></A> and <A=20
      href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
    </TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN=20
      class=3Dchunk>sRGB</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>Before <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
      class=3Dchunk>PLTE</SPAN></A> and <A=20
      href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>.=20
      If the <A href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN=20
      class=3Dchunk>sRGB</SPAN></A> chunk is present, the <A=20
      href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN =
class=3Dchunk>iCCP</SPAN></A>=20
      chunk should not be present.</TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN=20
      class=3Dchunk>bKGD</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>After <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
      class=3Dchunk>PLTE</SPAN></A>; before <A=20
      href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
    </TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11hIST"><SPAN=20
      class=3Dchunk>hIST</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>After <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
      class=3Dchunk>PLTE</SPAN></A>; before <A=20
      href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
    </TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN=20
      class=3Dchunk>tRNS</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>After <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
      class=3Dchunk>PLTE</SPAN></A>; before <A=20
      href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
    </TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11pHYs"><SPAN=20
      class=3Dchunk>pHYs</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>Before <A =
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
      class=3Dchunk>IDAT</SPAN></A> </TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN=20
      class=3Dchunk>sPLT</SPAN></A> </TD>
    <TD class=3DRegular>Yes</TD>
    <TD class=3DRegular>Before <A =
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
      class=3Dchunk>IDAT</SPAN></A> </TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11tIME"><SPAN=20
      class=3Dchunk>tIME</SPAN></A> </TD>
    <TD class=3DRegular>No</TD>
    <TD class=3DRegular>None</TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN=20
      class=3Dchunk>iTXt</SPAN></A> </TD>
    <TD class=3DRegular>Yes</TD>
    <TD class=3DRegular>None</TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN=20
      class=3Dchunk>tEXt</SPAN></A> </TD>
    <TD class=3DRegular>Yes</TD>
    <TD class=3DRegular>None</TD></TR>
  <TR>
    <TD class=3DRegular><A =
href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN=20
      class=3Dchunk>zTXt</SPAN></A> </TD>
    <TD class=3DRegular>Yes</TD>
    <TD class=3DRegular>None</TD></TR></TBODY></TABLE>
<TABLE class=3DRegular=20
summary=3D"This table lists the symbols used in lattice diagrams">
  <CAPTION><A name=3Dtable54><B>Table 5.4 =E2=80=94 Meaning of symbols =
used in lattice=20
  diagrams</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>Symbol</TH>
    <TH>Meaning</TH></TR>
  <TR>
    <TD class=3DRegular>+</TD>
    <TD class=3DRegular>One or more</TD></TR>
  <TR>
    <TD class=3DRegular>1</TD>
    <TD class=3DRegular>Only one</TD></TR>
  <TR>
    <TD class=3DRegular>?</TD>
    <TD class=3DRegular>Zero or one</TD></TR>
  <TR>
    <TD class=3DRegular>*</TD>
    <TD class=3DRegular>Zero or more</TD></TR>
  <TR>
    <TD class=3DRegular>|</TD>
    <TD class=3DRegular>Alternative</TD></TR></TBODY></TABLE><!-- =
************Page Break******************* --><!-- ************Page =
Break******************* -->
<P>
<OBJECT data=3D"figures/fig52.svg" width=3D800 type=3Dimage/svg+xml =
height=3D540>
 <img height=3D"540" width=3D"800" src=3D"png-figures/fig52.png" =
alt=3D"Figure 5.2:=20
Lattice diagram: PNG images with PLTE in datastream" /></OBJECT></P>
<P class=3DFiguretitle><A name=3Dfigure52>Figure 5.2 =E2=80=94</A> =
Lattice diagram: PNG=20
images with <A href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
class=3Dchunk>PLTE</SPAN></A> in datastream</P>
<P>
<OBJECT data=3D"figures/fig53.svg" width=3D900 type=3Dimage/svg+xml =
height=3D540>
 <img height=3D"540" width=3D"900" src=3D"png-figures/fig53.png" =
alt=3D"Figure 5.3:=20
Lattice diagram: PNG images without PLTE in datastream" /></OBJECT></P>
<P class=3DFiguretitle><A name=3Dfigure53>Figure 5.3 =E2=80=94</A> =
Lattice diagram: PNG=20
images without <A href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
class=3Dchunk>PLTE</SPAN></A> in datastream</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H1><A name=3D6Transformation>6 Reference image to PNG image=20
transformation</A></H1>
<H2><A name=3D6Colour-values>6.1 Colour types and values</A></H2>
<P>As explained in 4.4: <A=20
href=3D"http://www.w3.org/TR/PNG/#4Concepts.PNGImage"><SPAN =
class=3Dxref>PNG=20
image</SPAN></A> there are five types of PNG image. Corresponding to =
each type=20
is a colour type, which is the sum of the following values: 1 (palette =
used), 2=20
(truecolour used) and 4 (alpha used). Greyscale and truecolour images =
may have=20
an explicit alpha channel. The PNG image types and corresponding colour =
types=20
are listed in <A href=3D"http://www.w3.org/TR/PNG/#table6.1"><SPAN=20
class=3Dtabref>Table 6.1</SPAN></A>.</P>
<TABLE class=3DRegular=20
  summary=3D"This table lists the PNG image and colour =
types"><CAPTION><A=20
  name=3Dtable6.1><B>Table 6.1 =E2=80=94 PNG image types and colour=20
types</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>PNG image type</TH>
    <TH>Colour type</TH></TR>
  <TR>
    <TD class=3DRegular>Greyscale</TD>
    <TD class=3DRegular>0</TD></TR>
  <TR>
    <TD class=3DRegular>Truecolour</TD>
    <TD class=3DRegular>2</TD></TR>
  <TR>
    <TD class=3DRegular>Indexed-colour</TD>
    <TD class=3DRegular>3</TD></TR>
  <TR>
    <TD class=3DRegular>Greyscale with alpha</TD>
    <TD class=3DRegular>4</TD></TR>
  <TR>
    <TD class=3DRegular>Truecolour with alpha</TD>
    <TD class=3DRegular>6</TD></TR></TBODY></TABLE>
<P>The allowed bit depths and sample depths for each PNG image type are =
listed=20
in 11.2.2: <A href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dxref><SPAN=20
class=3Dchunk>IHDR</SPAN> Image header</SPAN></A>.</P>
<P>Greyscale samples represent luminance if the transfer curve is =
indicated (by=20
<A href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN =
class=3Dchunk>sRGB</SPAN></A>, or <A=20
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN =
class=3Dchunk>iCCP</SPAN></A>) or=20
device-dependent greyscale if not. RGB samples represent calibrated =
colour=20
information if the colour space is indicated (by <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A>, or <A=20
href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN =
class=3Dchunk>sRGB</SPAN></A>, or <A=20
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN =
class=3Dchunk>iCCP</SPAN></A>) or=20
uncalibrated device-dependent colour if not.</P>
<P>Sample values are not necessarily proportional to light intensity; =
the <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> chunk=20
specifies the relationship between sample values and display output =
intensity.=20
Viewers are strongly encouraged to compensate properly. See 4.2: <A=20
href=3D"http://www.w3.org/TR/PNG/#4Concepts.ColourSpaces"><SPAN =
class=3Dxref>Colour=20
spaces</SPAN></A>, 13.13: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Decoder-gamma-handling"><SPAN=20
class=3Dxref>Decoder gamma handling</SPAN></A> and Annex C: <A=20
href=3D"http://www.w3.org/TR/PNG/#C-GammaAppendix"><SPAN =
class=3Dxref>Gamma and=20
chromaticity</SPAN></A>.</P>
<H2><A name=3D6AlphaRepresentation>6.2 Alpha representation</A></H2>
<P>In a PNG datastream transparency may be represented in one of four =
ways,=20
depending on the PNG image type (see 4.3.2: <A=20
href=3D"http://www.w3.org/TR/PNG/#4Concepts.Implied-alpha"><SPAN =
class=3Dxref>Alpha=20
separation</SPAN></A> and 4.3.5: <A=20
href=3D"http://www.w3.org/TR/PNG/#4Concepts.Alpha-indexing"><SPAN =
class=3Dxref>Alpha=20
compaction</SPAN></A>).</P><!-- <ol start=3D"1"> -->
<OL>
  <LI>Truecolour with alpha, greyscale with alpha: an alpha channel is =
part of=20
  the image array.=20
  <LI>Truecolour, greyscale: A <A =
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN=20
  class=3Dchunk>tRNS</SPAN></A> chunk contains a single pixel value =
distinguishing=20
  the fully transparent pixels from the fully opaque pixels.=20
  <LI>Indexed-colour: A <A =
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN=20
  class=3Dchunk>tRNS</SPAN></A> chunk contains the alpha table that =
associates an=20
  alpha sample with each palette entry.=20
  <LI>Truecolour, greyscale, indexed-colour: there is no <A=20
  href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A>=20
  chunk present and all pixels are fully opaque. </LI></OL>
<P>An alpha channel included in the image array has 8-bit or 16-bit =
samples, the=20
same size as the other samples. The alpha sample for each pixel is =
stored=20
immediately following the greyscale or RGB samples of the pixel. An =
alpha value=20
of zero represents full transparency, and a value of =
2<SUP>sampledepth</SUP> - 1=20
represents full opacity. Intermediate values indicate partially =
transparent=20
pixels that can be composited against a background image to yield the =
delivered=20
image.</P>
<P>The colour values in a pixel are not premultiplied by the alpha value =

assigned to the pixel. This rule is sometimes called "unassociated" or=20
"non-premultiplied" alpha. (Another common technique is to store sample =
values=20
premultiplied by the alpha value; in effect, such an image is already =
composited=20
against a black background. PNG does <STRONG>not</STRONG> use =
premultiplied=20
alpha. In consequence an image editor can take a PNG image and easily =
change its=20
transparency.) See 12.4: <A=20
href=3D"http://www.w3.org/TR/PNG/#12Alpha-channel-creation"><SPAN =
class=3Dxref>Alpha=20
channel creation</SPAN></A> and 13.16: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Alpha-channel-processing"><SPAN=20
class=3Dxref>Alpha channel processing</SPAN></A>.</P><!-- =
************Page Break******************* --><!-- ************Page =
Break******************* -->
<H1><A name=3D7Transformation>7 Encoding the PNG image as a PNG=20
datastream</A></H1>
<H2><A name=3D7Integers-and-byte-order>7.1 Integers and byte =
order</A></H2>
<P>All integers that require more than one byte shall be in network byte =
order=20
(as illustrated in <A href=3D"http://www.w3.org/TR/PNG/#figure71"><SPAN=20
class=3Dfigref>figure 7.1</SPAN></A>): the most significant byte comes =
first, then=20
the less significant bytes in descending order of significance (MSB LSB =
for=20
two-byte integers, MSB B2 B1 LSB for four-byte integers). The highest =
bit (value=20
128) of a byte is numbered bit 7; the lowest bit (value 1) is numbered =
bit 0.=20
Values are unsigned unless otherwise noted. Values explicitly noted as =
signed=20
are represented in two's complement notation.</P>
<P>PNG four-byte unsigned integers are limited to the range 0 to=20
2<SUP>31</SUP>-1 to accommodate languages that have difficulty with =
unsigned=20
four-byte values. Similarly PNG four-byte signed integers are limited to =
the=20
range -(2<SUP>31</SUP>-1) to 2<SUP>31</SUP>-1 to accommodate languages =
that have=20
difficulty with the value -2<SUP>31</SUP>.</P>
<P>
<OBJECT data=3D"figures/fig71.svg" width=3D810 type=3Dimage/svg+xml =
height=3D310>
  <img height=3D"310" width=3D"810" src=3D"png-figures/fig71.png" =
alt=3D"Figure 7.1:=20
Integer representation in PNG" /> </OBJECT></P>
<P class=3DFiguretitle><A name=3Dfigure71>Figure 7.1</A> =E2=80=94 =
Integer representation in=20
PNG</P>
<H2><A name=3D7Scanline>7.2 Scanlines</A></H2>
<P>A PNG image (or pass, see clause&nbsp;8: <A=20
href=3D"http://www.w3.org/TR/PNG/#8Interlace"><SPAN =
class=3Dxref>Interlacing and=20
pass extraction</SPAN></A>) is a rectangular pixel array, with pixels =
appearing=20
left-to-right within each scanline, and scanlines appearing =
top-to-bottom. The=20
size of each pixel is determined by the number of bits per pixel.</P>
<P>Pixels within a scanline are always packed into a sequence of bytes =
with no=20
wasted bits between pixels. Scanlines always begin on byte boundaries. =
Permitted=20
bit depths and colour types are restricted so that in all cases the =
packing is=20
simple and efficient.</P>
<P>In PNG images of colour type 0 (greyscale) each pixel is a single =
sample,=20
which may have precision less than a byte (1, 2, or 4 bits). These =
samples are=20
packed into bytes with the leftmost sample in the high-order bits of a =
byte=20
followed by the other samples for the scanline. </P>
<P>In PNG images of colour type 3 (indexed-colour) each pixel is a =
single=20
palette index. These indices are packed into bytes in the same way as =
the=20
samples for colour type 0.</P>
<P>When there are multiple pixels per byte, some low-order bits of the =
last byte=20
of a scanline may go unused. The contents of these unused bits are not=20
specified.</P>
<P>PNG images that are not indexed-colour images may have sample values =
with a=20
bit depth of 16. Such sample values are in network byte order (MSB =
first, LSB=20
second). PNG permits multi-sample pixels only with 8 and 16-bit samples, =
so=20
multiple samples of a single pixel are never packed into one =
byte.</P><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<H2><A name=3D7Filtering>7.3 Filtering</A></H2>
<P>PNG allows the scanline data to be <STRONG>filtered</STRONG> before =
it is=20
compressed. Filtering can improve the compressibility of the data. The =
filter=20
step itself results in a sequence of bytes of the same size as the =
incoming=20
sequence, but in a different representation, preceded by a filter type =
byte.=20
Filtering does not reduce the size of the actual scanline data. All PNG =
filters=20
are strictly lossless.</P>
<P>Different filter types can be used for different scanlines, and the =
filter=20
algorithm is specified for each scanline by a filter type byte. The =
filter type=20
byte is not considered part of the image data, but it is included in the =

datastream sent to the compression step. An intelligent encoder can =
switch=20
filters from one scanline to the next. The method for choosing which =
filter to=20
employ is left to the encoder.</P>
<P>See clause&nbsp;9: <A =
href=3D"http://www.w3.org/TR/PNG/#9Filters"><SPAN=20
class=3Dxref>Filtering</SPAN></A>.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H1><A name=3D8Interlace>8 Interlacing and pass extraction</A></H1>
<H2><A name=3D8InterlaceIntro>8.1 Introduction</A></H2>
<P>Pass extraction (see <A =
href=3D"http://www.w3.org/TR/PNG/#figure48"><SPAN=20
class=3Dfigref>figure 4.8</SPAN></A>) splits a PNG image into a sequence =
of=20
reduced images (the interlaced PNG image) where the first image defines =
a coarse=20
view and subsequent images enhance this coarse view until the last image =

completes the PNG image. This allows progressive display of the =
interlaced PNG=20
image by the decoder and allows images to "fade in" when they are being=20
displayed on-the-fly. On average, interlacing slightly expands the =
datastream=20
size, but it can give the user a meaningful display much more =
rapidly.</P>
<H2><A name=3D8InterlaceMethods>8.2 Interlace methods</A></H2>
<P>Two interlace methods are defined in this International Standard, =
methods 0=20
and 1. Other values of interlace method are reserved for future =
standardization=20
(see 4.9: <A =
href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration"><SPAN=20
class=3Dxref>Extension and registration</SPAN></A>).</P>
<P>With interlace method 0, the null method, pixels are extracted =
sequentially=20
from left to right, and scanlines sequentially from top to bottom. The=20
interlaced PNG image is a single reduced image.</P>
<P>Interlace method 1, known as Adam7, defines seven distinct passes =
over the=20
image. Each pass transmits a subset of the pixels in the reference =
image. The=20
pass in which each pixel is transmitted (numbered from 1 to 7) is =
defined by=20
replicating the following 8-by-8 pattern over the entire image, starting =
at the=20
upper left corner:</P><PRE>   1 6 4 6 2 6 4 6
   7 7 7 7 7 7 7 7
   5 6 5 6 5 6 5 6
   7 7 7 7 7 7 7 7
   3 6 4 6 3 6 4 6
   7 7 7 7 7 7 7 7
   5 6 5 6 5 6 5 6
   7 7 7 7 7 7 7 7
</PRE>
<P><A href=3D"http://www.w3.org/TR/PNG/#figure48"><SPAN =
class=3Dfigref>Figure=20
4.8</SPAN></A> shows the seven passes of interlace method 1. Within each =
pass,=20
the selected pixels are transmitted left to right within a scanline, and =

selected scanlines sequentially from top to bottom. For example, pass 2 =
contains=20
pixels 4, 12, 20, etc. of scanlines 0, 8, 16, etc. (where scanline 0, =
pixel 0 is=20
the upper left corner). The last pass contains all of scanlines 1, 3, 5, =
etc.=20
The transmission order is defined so that all the scanlines transmitted =
in a=20
pass will have the same number of pixels; this is necessary for proper=20
application of some of the filters. The interlaced PNG image consists of =
a=20
sequence of seven reduced images. For example, if the PNG image is 16 by =
16=20
pixels, then the third pass will be a reduced image of two scanlines, =
each=20
containing four pixels (see <A =
href=3D"http://www.w3.org/TR/PNG/#figure48"><SPAN=20
class=3Dfigref>figure 4.8</SPAN></A>).</P>
<P>Scanlines that do not completely fill an integral number of bytes are =
padded=20
as defined in 7.2: <A href=3D"http://www.w3.org/TR/PNG/#7Scanline"><SPAN =

class=3Dxref>Scanlines</SPAN></A>.</P>
<P class=3DNote>NOTE If the reference image contains fewer than five =
columns or=20
fewer than five rows, some passes will be empty.</P><!-- =
************Page Break******************* --><!-- ************Page =
Break******************* -->
<H1><A name=3D9Filters>9 Filtering</A></H1>
<H2><A name=3D9FtIntro>9.1 Filter methods and filter types</A></H2>
<P>Filtering transforms the PNG image with the goal of improving =
compression.=20
PNG allows for a number of filter methods. All the reduced images in an=20
interlaced image shall use a single filter method. Only filter method 0 =
is=20
defined by this International Standard. Other filter methods are =
reserved for=20
future standardization (see 4.9 <A=20
href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration"><SPAN=20
class=3Dxref>Extension and registration</SPAN></A>). Filter method 0 =
provides a=20
set of five filter types, and individual scanlines in each reduced image =
may use=20
different filter types.</P>
<P>PNG imposes no additional restriction on which filter types can be =
applied to=20
an interlaced PNG image. However, the filter types are not equally =
effective on=20
all types of data. See 12.8: <A=20
href=3D"http://www.w3.org/TR/PNG/#12Filter-selection"><SPAN =
class=3Dxref>Filter=20
selection</SPAN></A>.</P>
<P>Filtering transforms the byte sequence in a scanline to an equal =
length=20
sequence of bytes preceded by the filter type. Filter type bytes are =
associated=20
only with non-empty scanlines. No filter type bytes are present in an =
empty=20
pass. See 13.8: <A =
href=3D"http://www.w3.org/TR/PNG/#13Progressive-display"><SPAN=20
class=3Dxref>Interlacing and progressive display</SPAN></A>.</P>
<H2><A name=3D9Filter-types>9.2 Filter types for filter method =
0</A></H2>
<P>Filters are applied to <STRONG>bytes</STRONG>, not to pixels, =
regardless of=20
the bit depth or colour type of the image. The filters operate on the =
byte=20
sequence formed by a scanline that has been represented as described in =
7.2: <A=20
href=3D"http://www.w3.org/TR/PNG/#7Scanline"><SPAN=20
class=3Dxref>Scanlines</SPAN></A>. If the image includes an alpha =
channel, the=20
alpha data is filtered in the same way as the image data.</P>
<P>Filters may use the original values of the following bytes to =
generate the=20
new byte value:</P>
<TABLE class=3DRegular=20
summary=3D"This table defines the variables usedin table 9.1">
  <TBODY>
  <TR>
    <TD class=3DRegular><TT>x</TT> </TD>
    <TD class=3DRegular>the byte being filtered;</TD></TR>
  <TR>
    <TD class=3DRegular><TT>a</TT> </TD>
    <TD class=3DRegular>the byte corresponding to x in the pixel =
immediately=20
      before the pixel containing x (or the byte immediately before x, =
when the=20
      bit depth is less than 8);</TD></TR>
  <TR>
    <TD class=3DRegular><TT>b</TT> </TD>
    <TD class=3DRegular>the byte corresponding to x in the previous=20
  scanline;</TD></TR>
  <TR>
    <TD class=3DRegular><TT>c</TT> </TD>
    <TD class=3DRegular>the byte corresponding to b in the pixel =
immediately=20
      before the pixel containing b (or the byte immediately before b, =
when the=20
      bit depth is less than 8).</TD></TR></TBODY></TABLE>
<P><A href=3D"http://www.w3.org/TR/PNG/#9-figure91"><SPAN =
class=3Dfigref>Figure=20
9.1</SPAN></A> shows the relative positions of the bytes <TT>x</TT>, =
<TT>a</TT>,=20
<TT>b</TT>, and <TT>c</TT>.</P>
<P>PNG filter method 0 defines five basic filter types as listed in <A=20
href=3D"http://www.w3.org/TR/PNG/#9-table91"><SPAN class=3Dtabref>Table=20
9.1</SPAN></A>. <TT>Orig(y)</TT> denotes the orginal (unfiltered) value =
of byte=20
<TT>y</TT>. <TT>Filt(y)</TT> denotes the value after a filter has been =
applied.=20
<TT>Recon(y)</TT> denotes the value after the corresponding =
reconstruction=20
function has been applied. The filter function for the Paeth type=20
<TT>PaethPredictor</TT> is defined below.</P>
<P>Filter method 0 specifies exactly this set of five filter types and =
this=20
shall not be extended. This ensures that decoders need not decompress =
the data=20
to determine whether it contains unsupported filter types: it is =
sufficient to=20
check the filter method in <A =
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN=20
class=3Dchunk>IHDR</SPAN></A>.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<TABLE class=3DRegular summary=3D"This table lists the filter types">
  <CAPTION><A name=3D9-table91><B>Table 9.1 =E2=80=94 Filter =
types</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>Type</TH>
    <TH>Name</TH>
    <TH>Filter Function</TH>
    <TH>Reconstruction Function</TH></TR>
  <TR>
    <TD class=3DRegular align=3Dcenter>0</TD>
    <TD class=3DRegular>None</TD>
    <TD class=3DRegular><TT>Filt(x) =3D Orig(x)</TT> </TD>
    <TD class=3DRegular><TT>Recon(x) =3D Filt(x)</TT> </TD></TR>
  <TR>
    <TD class=3DRegular align=3Dcenter>1</TD>
    <TD class=3DRegular>Sub</TD>
    <TD class=3DRegular><TT>Filt(x) =3D Orig(x) - Orig(a)</TT> </TD>
    <TD class=3DRegular><TT>Recon(x) =3D Filt(x) + Recon(a)</TT> =
</TD></TR>
  <TR>
    <TD class=3DRegular align=3Dcenter>2</TD>
    <TD class=3DRegular>Up</TD>
    <TD class=3DRegular><TT>Filt(x) =3D Orig(x) - Orig(b)</TT> </TD>
    <TD class=3DRegular><TT>Recon(x) =3D Filt(x) + Recon(b)</TT> =
</TD></TR>
  <TR>
    <TD class=3DRegular align=3Dcenter>3</TD>
    <TD class=3DRegular>Average</TD>
    <TD class=3DRegular><TT>Filt(x) =3D Orig(x) - floor((Orig(a) + =
Orig(b)) /=20
      2)</TT> </TD>
    <TD class=3DRegular><TT>Recon(x) =3D Filt(x) + floor((Recon(a) + =
Recon(b)) /=20
      2)</TT> </TD></TR>
  <TR>
    <TD class=3DRegular align=3Dcenter>4</TD>
    <TD class=3DRegular>Paeth</TD>
    <TD class=3DRegular><TT>Filt(x) =3D Orig(x) - =
PaethPredictor(Orig(a), Orig(b),=20
      Orig(c))</TT> </TD>
    <TD class=3DRegular><TT>Recon(x) =3D Filt(x) + =
PaethPredictor(Recon(a),=20
      Recon(b), Recon(c))</TT> </TD></TR></TBODY></TABLE>
<P>For all filters, the bytes "to the left of" the first pixel in a =
scanline=20
shall be treated as being zero. For filters that refer to the prior =
scanline,=20
the entire prior scanline and bytes "to the left of" the first pixel in =
the=20
prior scanline shall be treated as being zeroes for the first scanline =
of a=20
reduced image.</P>
<P>To reverse the effect of a filter requires the decoded values of the =
prior=20
pixel on the same scanline, the pixel immediately above the current =
pixel on the=20
prior scanline, and the pixel just to the left of the pixel above.</P>
<P>Unsigned arithmetic modulo 256 is used, so that both the inputs and =
outputs=20
fit into bytes. Filters are applied to each byte regardless of bit =
depth. The=20
sequence of <TT>Filt</TT> values is transmitted as the filtered =
scanline.</P>
<H2><A name=3D9Filter-type-3-Average>9.3 Filter type 3: Average</A></H2>
<P>The sum <TT>Orig(a) + Orig(b)</TT> shall be performed without =
overflow (using=20
at least nine-bit arithmetic). <TT>floor()</TT> indicates that the =
result of the=20
division is rounded to the next lower integer if fractional; in other =
words, it=20
is an integer division or right shift operation.</P>
<H2><A name=3D9Filter-type-4-Paeth>9.4 Filter type 4: Paeth</A></H2>
<P>The Paeth filter function computes a simple linear function of the =
three=20
neighbouring pixels (left, above, upper left), then chooses as predictor =
the=20
neighbouring pixel closest to the computed value. The algorithm used in =
this=20
International Standard is an adaptation of the technique due to Alan W. =
Paeth <A=20
href=3D"http://www.w3.org/TR/PNG/#G-PAETH"><SPAN=20
class=3Dbibref>[PAETH]</SPAN></A>.</P>
<P>The PaethPredictor function is defined in the code below. The logic =
of the=20
function and the locations of the bytes <TT>a</TT>, <TT>b</TT>, =
<TT>c</TT>, and=20
<TT>x</TT> are shown in <A =
href=3D"http://www.w3.org/TR/PNG/#9-figure91"><SPAN=20
class=3Dfigref>figure 9.1</SPAN></A>. <TT>Pr</TT> is the predictor for =
byte=20
<TT>x</TT>.</P><PRE>    p =3D a + b - c
    pa =3D abs(p - a)
    pb =3D abs(p - b)
    pc =3D abs(p - c)
    if pa &lt;=3D pb and pa &lt;=3D pc then Pr =3D a
    else if pb &lt;=3D pc then Pr =3D b
    else Pr =3D c
    return Pr
</PRE><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<P><A name=3D9-figure91>
<OBJECT data=3D"figures/fig91.svg" width=3D640 type=3Dimage/svg+xml =
height=3D360>
  <img height=3D"360" width=3D"640" src=3D"png-figures/fig91.png" =
alt=3D"Figure 9.1: The=20
PaethPredictorfunction" /></OBJECT></A></P>
<P class=3DFiguretitle><B>Figure 9.1: The PaethPredictor =
function</B></P>
<P>The calculations within the PaethPredictor function shall be =
performed=20
exactly, without overflow.</P>
<P><STRONG>The order in which the comparisons are performed is critical =
and=20
shall not be altered.</STRONG> The function tries to establish in which =
of the=20
three directions (vertical, horizontal, or diagonal) the gradient of the =
image=20
is smallest.</P>
<P>Exactly the same PaethPredictor function is used by both encoder and=20
decoder.</P><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<H1><A name=3D10Compression>10 Compression</A></H1>
<H2><A name=3D10CompressionCM0>10.1 Compression method 0</A></H2>
<P>Only PNG compression method 0 is defined by this International =
Standard.=20
Other values of compression method are reserved for future =
standardization (see=20
4.9: <A href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration"><SPAN=20
class=3Dxref>Extension and registration</SPAN></A>). PNG compression =
method 0 is=20
deflate/inflate compression with a sliding window (which is an upper =
bound on=20
the distances appearing in the deflate stream) of at most 32768 bytes. =
Deflate=20
compression is an LZ77 derivative <A =
href=3D"http://www.w3.org/TR/PNG/#G-ZL"><SPAN=20
class=3Dbibref>[ZL]</SPAN></A>.</P>
<P>Deflate-compressed datastreams within PNG are stored in the "zlib" =
format,=20
which has the structure:</P>
<TABLE class=3DRegular=20
summary=3D"This table gives the structure of the zlib format">
  <TBODY>
  <TR>
    <TD class=3DRegular>zlib compression method/flags code</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Additional flags/check bits</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Compressed data blocks</TD>
    <TD class=3DRegular>n bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Check value</TD>
    <TD class=3DRegular>4 bytes</TD></TR></TBODY></TABLE>
<P>Further details on this format are given in the zlib specification <A =

href=3D"http://www.w3.org/TR/PNG/#2-RFC-1950"><SPAN=20
class=3DNormRef>[RFC-1950]</SPAN></A>.</P>
<P>For PNG compression method 0, the zlib compression method/flags code =
shall=20
specify method code 8 (deflate compression) and an LZ77 window size of =
not more=20
than 32768 bytes. The zlib compression method number is not the same as =
the PNG=20
compression method number in the <A=20
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A> chunk=20
(see 11.2.2 <A href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dxref><SPAN=20
class=3Dchunk>IHDR</SPAN> Image header</SPAN></A>). The additional flags =
shall not=20
specify a preset dictionary.</P>
<P>If the data to be compressed contain 16384 bytes or fewer, the PNG =
encoder=20
may set the window size by rounding up to a power of 2 (256 minimum). =
This=20
decreases the memory required for both encoding and decoding, without =
adversely=20
affecting the compression ratio.</P>
<P>The compressed data within the zlib datastream are stored as a series =
of=20
blocks, each of which can represent raw (uncompressed) data, =
LZ77-compressed=20
data encoded with fixed Huffman codes, or LZ77-compressed data encoded =
with=20
custom Huffman codes. A marker bit in the final block identifies it as =
the last=20
block, allowing the decoder to recognize the end of the compressed =
datastream.=20
Further details on the compression algorithm and the encoding are given =
in the=20
deflate specification <A =
href=3D"http://www.w3.org/TR/PNG/#2-RFC-1951"><SPAN=20
class=3DNormRef>[RFC-1951]</SPAN></A>.</P>
<P>The check value stored at the end of the zlib datastream is =
calculated on the=20
uncompressed data represented by the datastream. The algorithm used to =
calculate=20
this is not the same as the CRC calculation used for PNG chunk CRC field =
values.=20
The zlib check value is useful mainly as a cross-check that the deflate =
and=20
inflate algorithms are implemented correctly. Verifying the individual =
PNG chunk=20
CRCs provides confidence that the PNG datastream has been transmitted=20
undamaged.</P>
<H2><A name=3D10CompressionFSL>10.2 Compression of the sequence of =
filtered=20
scanlines</A></H2>
<P>The sequence of filtered scanlines is compressed and the resulting =
data=20
stream is split into <A href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
class=3Dchunk>IDAT</SPAN></A> chunks. The concatenation of the contents =
of all the=20
<A href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
chunks makes up a zlib datastream. This datastream decompresses to =
filtered=20
image data.</P>
<P>It is important to emphasize that the boundaries between <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A> chunks=20
are arbitrary and can fall anywhere in the zlib datastream. There is not =

necessarily any correlation between <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A> chunk=20
boundaries and deflate block boundaries or any other feature of the zlib =
data.=20
For example, it is entirely possible for the terminating zlib check =
value to be=20
split across <A href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
class=3Dchunk>IDAT</SPAN></A> chunks.</P>
<P>Similarly, there is no required correlation between the structure of =
the=20
image data (i.e., scanline boundaries) and deflate block boundaries or =
<A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A> chunk=20
boundaries. The complete filtered PNG image is represented by a single =
zlib=20
datastream that is stored in a number of <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
chunks.</P><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<H2><A name=3D10CompressionOtherUses>10.3 Other uses of =
compression</A></H2>
<P>PNG also uses compression method 0 in <A=20
href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN =
class=3Dchunk>iTXt</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN =
class=3Dchunk>iCCP</SPAN></A>, and=20
<A href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN =
class=3Dchunk>zTXt</SPAN></A>=20
chunks. Unlike the image data, such datastreams are not split across =
chunks;=20
each such chunk contains an independent zlib datastream (see 10.1: <A=20
href=3D"http://www.w3.org/TR/PNG/#10CompressionCM0"><SPAN =
class=3Dxref>Compression=20
method 0</SPAN></A>).</P><!-- ************Page Break******************* =
--><!-- ************Page Break******************* -->
<H1><A name=3D11Chunks>11 Chunk specifications</A></H1>
<H2><A name=3D11Introduction>11.1 Introduction</A></H2>
<P>The PNG datastream consists of a PNG signature (see 5.2: <A=20
href=3D"http://www.w3.org/TR/PNG/#5PNG-file-signature"><SPAN =
class=3Dxref>PNG=20
signature</SPAN></A>) followed by a sequence of chunks. Each chunk has a =
chunk=20
type which specifies its function. This clause defines the PNG chunk =
types=20
standardized in this International Standard. The PNG datastream =
structure is=20
defined in clause&nbsp;5: <A =
href=3D"http://www.w3.org/TR/PNG/#5DataRep"><SPAN=20
class=3Dxref>Datastream structure</SPAN></A>. This also defines the =
order in which=20
chunks may appear. For details specific to encoders see 12.11: <A=20
href=3D"http://www.w3.org/TR/PNG/#12Chunk-processing"><SPAN=20
class=3Dxref>Chunking</SPAN></A>. For details specific to decoders see =
13.5: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Chunking"><SPAN=20
class=3Dxref>Chunking</SPAN></A>.</P>
<H2><A name=3D11Critical-chunks>11.2 Critical chunks</A></H2>
<H3><A name=3D11CcGen>11.2.1 General</A></H3>
<P>Critical chunks are those chunks that are absolutely required in =
order to=20
successfully decode a PNG image from a PNG datastream. Extension chunks =
may be=20
defined as critical chunks (see clause&nbsp;14: <A=20
href=3D"http://www.w3.org/TR/PNG/#14EditorsExt"><SPAN =
class=3Dxref>Editors and=20
extensions</SPAN></A>), though this practice is strongly =
discouraged.</P>
<P>A valid PNG datastream shall begin with a PNG signature, immediately =
followed=20
by an <A href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN=20
class=3Dchunk>IHDR</SPAN></A> chunk, then one or more <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
chunks, and shall end with an <A =
href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN=20
class=3Dchunk>IEND</SPAN></A> chunk. Only one <A=20
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A> chunk=20
and one <A href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN=20
class=3Dchunk>IEND</SPAN></A> chunk are allowed in a PNG datastream.</P>
<H3><A name=3D11IHDR>11.2.2 <SPAN class=3Dchunk>IHDR</SPAN> Image =
header</A></H3>
<P>The four-byte chunk type field contains the decimal values</P><PRE>73 =
72 68 82
</PRE>
<P>The <SPAN class=3Dchunk>IHDR</SPAN> chunk shall be the first chunk in =
the PNG=20
datastream. It contains:</P>
<TABLE class=3DRegular summary=3D"This table defines the IHDR chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>Width</TD>
    <TD class=3DRegular>4 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Height</TD>
    <TD class=3DRegular>4 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Bit depth</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Colour type</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Compression method</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Filter method</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Interlace method</TD>
    <TD class=3DRegular>1 byte</TD></TR></TBODY></TABLE>
<P>Width and height give the image dimensions in pixels. They are PNG =
four-byte=20
unsigned integers. Zero is an invalid value.</P>
<P>Bit depth is a single-byte integer giving the number of bits per =
sample or=20
per palette index (not per pixel). Valid values are 1, 2, 4, 8, and 16, =
although=20
not all values are allowed for all colour types. See 6.1: <A=20
href=3D"http://www.w3.org/TR/PNG/#6Colour-values"><SPAN =
class=3Dxref>Colour types=20
and values</SPAN></A>.</P>
<P>Colour type is a single-byte integer that defines the PNG image type. =
Valid=20
values are 0, 2, 3, 4, and 6.</P>
<P>Bit depth restrictions for each colour type are imposed to simplify=20
implementations and to prohibit combinations that do not compress well. =
The=20
allowed combinations are defined in <A=20
href=3D"http://www.w3.org/TR/PNG/#table111"><SPAN class=3Dtabref>Table=20
11.1</SPAN></A>.</P>
<TABLE class=3DRegular summary=3D"This table defines the colour types">
  <CAPTION><A name=3Dtable111><B>Table 11.1 =E2=80=94 Allowed =
combinations of colour type=20
  and bit depth</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>PNG image type</TH>
    <TH>Colour type</TH>
    <TH>Allowed bit depths</TH>
    <TH>Interpretation</TH></TR>
  <TR>
    <TD class=3DRegular>Greyscale</TD>
    <TD class=3DRegular align=3Dcenter>0</TD>
    <TD class=3DRegular>1, 2, 4, 8, 16</TD>
    <TD class=3DRegular>Each pixel is a greyscale sample</TD></TR>
  <TR>
    <TD class=3DRegular>Truecolour</TD>
    <TD class=3DRegular align=3Dcenter>2</TD>
    <TD class=3DRegular>8, 16</TD>
    <TD class=3DRegular>Each pixel is an R,G,B triple</TD></TR>
  <TR>
    <TD class=3DRegular>Indexed-colour</TD>
    <TD class=3DRegular align=3Dcenter>3</TD>
    <TD class=3DRegular>1, 2, 4, 8</TD>
    <TD class=3DRegular>Each pixel is a palette index; a <A=20
      href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A>=20
      chunk shall appear.</TD></TR>
  <TR>
    <TD class=3DRegular>Greyscale with alpha</TD>
    <TD class=3DRegular align=3Dcenter>4</TD>
    <TD class=3DRegular>8, 16</TD>
    <TD class=3DRegular>Each pixel is a greyscale sample followed by an =
alpha=20
      sample.</TD></TR>
  <TR>
    <TD class=3DRegular>Truecolour with alpha</TD>
    <TD class=3DRegular align=3Dcenter>6</TD>
    <TD class=3DRegular>8, 16</TD>
    <TD class=3DRegular>Each pixel is an R,G,B triple followed by an =
alpha=20
      sample.</TD></TR></TBODY></TABLE>
<P>The sample depth is the same as the bit depth except in the case of=20
indexed-colour PNG images (colour type 3), in which the sample depth is =
always 8=20
bits (see 4.4: <A =
href=3D"http://www.w3.org/TR/PNG/#4Concepts.PNGImage"><SPAN=20
class=3Dxref>PNG image</SPAN></A>).</P>
<P>Compression method is a single-byte integer that indicates the method =
used to=20
compress the image data. Only compression method 0 (deflate/inflate =
compression=20
with a sliding window of at most 32768 bytes) is defined in this =
International=20
Standard. All conforming PNG images shall be compressed with this =
scheme.</P>
<P>Filter method is a single-byte integer that indicates the =
preprocessing=20
method applied to the image data before compression. Only filter method =
0=20
(adaptive filtering with five basic filter types) is defined in this=20
International Standard. See clause&nbsp;9: <A=20
href=3D"http://www.w3.org/TR/PNG/#9Filters"><SPAN =
class=3Dxref>Filtering</SPAN></A>=20
for details.</P>
<P>Interlace method is a single-byte integer that indicates the =
transmission=20
order of the image data. Two values are defined in this International =
Standard:=20
0 (no interlace) or 1 (Adam7 interlace). See clause&nbsp;8: <A=20
href=3D"http://www.w3.org/TR/PNG/#8Interlace"><SPAN =
class=3Dxref>Interlacing and=20
pass extraction</SPAN></A> for details.</P>
<H3><A name=3D11PLTE>11.2.3 <SPAN class=3Dchunk>PLTE</SPAN> =
Palette</A></H3>
<P>The four-byte chunk type field contains the decimal values</P><PRE>80 =
76 84 69
</PRE>
<P>The <SPAN class=3Dchunk>PLTE</SPAN> chunk contains from 1 to 256 =
palette=20
entries, each a three-byte series of the form:</P>
<TABLE class=3DRegular=20
summary=3D"This table defines the PLTE palette table entries">
  <TBODY>
  <TR>
    <TD class=3DRegular>Red</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Green</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Blue</TD>
    <TD class=3DRegular>1 byte</TD></TR></TBODY></TABLE>
<P>The number of entries is determined from the chunk length. A chunk =
length not=20
divisible by 3 is an error.</P>
<P>This chunk shall appear for colour type 3, and may appear for colour =
types 2=20
and 6; it shall not appear for colour types 0 and 4. There shall not be =
more=20
than one <SPAN class=3Dchunk>PLTE</SPAN> chunk.</P>
<P>For colour type 3 (indexed-colour), the <SPAN =
class=3Dchunk>PLTE</SPAN> chunk=20
is required. The first entry in <SPAN class=3Dchunk>PLTE</SPAN> is =
referenced by=20
pixel value 0, the second by pixel value 1, etc. The number of palette =
entries=20
shall not exceed the range that can be represented in the image bit =
depth (for=20
example, 2<SUP>4</SUP> =3D 16 for a bit depth of 4). It is permissible =
to have=20
fewer entries than the bit depth would allow. In that case, any =
out-of-range=20
pixel value found in the image data is an error.</P>
<P>For colour types 2 and 6 (truecolour and truecolour with alpha), the =
<SPAN=20
class=3Dchunk>PLTE</SPAN> chunk is optional. If present, it provides a =
suggested=20
set of colours (from 1 to 256) to which the truecolour image can be =
quantized if=20
it cannot be displayed directly. It is, however, recommended that the <A =

href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A> chunk=20
be used for this purpose, rather than the <SPAN =
class=3Dchunk>PLTE</SPAN> chunk.=20
If neither <SPAN class=3Dchunk>PLTE</SPAN> nor <A=20
href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A> chunks=20
are present and the image cannot be displayed directly, quantization has =
to be=20
done by the viewing system. However, it is often preferable for the =
selection of=20
colours to be done once by the PNG encoder. (See 12.6: <A=20
href=3D"http://www.w3.org/TR/PNG/#12Suggested-palettes"><SPAN =
class=3Dxref>Suggested=20
palettes</SPAN></A>.)</P>
<P>Note that the palette uses 8 bits (1 byte) per sample regardless of =
the image=20
bit depth. In particular, the palette is 8 bits deep even when it is a =
suggested=20
quantization of a 16-bit truecolour image.</P>
<P>There is no requirement that the palette entries all be used by the =
image,=20
nor that they all be different.</P>
<H3><A name=3D11IDAT>11.2.4 <SPAN class=3Dchunk>IDAT</SPAN> Image =
data</A></H3>
<P>The four-byte chunk type field contains the decimal values</P><PRE>73 =
68 65 84
</PRE>
<P>The <SPAN class=3Dchunk>IDAT</SPAN> chunk contains the actual image =
data which=20
is the output stream of the compression algorithm. See clause&nbsp;9: <A =

href=3D"http://www.w3.org/TR/PNG/#9Filters"><SPAN =
class=3Dxref>Filtering</SPAN></A>=20
and clause&nbsp;10: <A =
href=3D"http://www.w3.org/TR/PNG/#10Compression"><SPAN=20
class=3Dxref>Compression</SPAN></A> for details.</P>
<P>There may be multiple <SPAN class=3Dchunk>IDAT</SPAN> chunks; if so, =
they shall=20
appear consecutively with no other intervening chunks. The compressed =
datastream=20
is then the concatenation of the contents of the data fields of all the =
<SPAN=20
class=3Dchunk>IDAT</SPAN> chunks.</P>
<H3><A name=3D11IEND>11.2.5 <SPAN class=3Dchunk>IEND</SPAN> Image =
trailer</A></H3>
<P>The four-byte chunk type field contains the decimal values</P><PRE>73 =
69 78 68
</PRE>
<P>The <SPAN class=3Dchunk>IEND</SPAN> chunk marks the end of the PNG =
datastream.=20
The chunk's data field is empty.</P>
<H2><A name=3D11Ancillary-chunks>11.3 Ancillary chunks</A></H2>
<H3><A name=3D11AcGen>11.3.1 General</A></H3>
<P>The ancillary chunks defined in this International Standard are =
listed in the=20
order in 4.7.2: <A =
href=3D"http://www.w3.org/TR/PNG/#4Concepts.FormatTypes"><SPAN=20
class=3Dxref>Chunk types</SPAN></A>. This is not the order in which they =
appear in=20
a PNG datastream. Ancillary chunks may be ignored by a decoder. For each =

ancillary chunk, the actions described are under the assumption that the =
decoder=20
is not ignoring the chunk.</P>
<H3><A name=3D11transinfo>11.3.2 Transparency information</A></H3>
<H4><A name=3D11tRNS>11.3.2.1 <SPAN class=3Dchunk>tRNS</SPAN> =
Transparency</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>116 82 78 83
</PRE>
<P>The <SPAN class=3Dchunk>tRNS</SPAN> chunk specifies either alpha =
values that=20
are associated with palette entries (for indexed-colour images) or a =
single=20
transparent colour (for greyscale and truecolour images). The <SPAN=20
class=3Dchunk>tRNS</SPAN> chunk contains: <!-- ************Page =
Break******************* --></P><!-- ************Page =
Break******************* -->
<TABLE class=3DRegular summary=3D"This table defines the tRNS chunk">
  <TBODY>
  <TR>
    <TH colSpan=3D2>Colour type 0</TH></TR>
  <TR>
    <TD class=3DRegular>Grey sample value</TD>
    <TD class=3DRegular>2 bytes</TD></TR>
  <TR>
    <TH colSpan=3D2>Colour type 2</TH></TR>
  <TR>
    <TD class=3DRegular>Red sample value</TD>
    <TD class=3DRegular>2 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Blue sample value</TD>
    <TD class=3DRegular>2 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Green sample value</TD>
    <TD class=3DRegular>2 bytes</TD></TR>
  <TR>
    <TH colSpan=3D2>Colour type 3</TH></TR>
  <TR>
    <TD class=3DRegular>Alpha for palette index 0</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Alpha for palette index 1</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>...etc...</TD>
    <TD class=3DRegular>1 byte</TD></TR></TBODY></TABLE>
<P>For colour type 3 (indexed-colour), the <SPAN =
class=3Dchunk>tRNS</SPAN> chunk=20
contains a series of one-byte alpha values, corresponding to entries in =
the <A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> chunk.=20
Each entry indicates that pixels of the corresponding palette index =
shall be=20
treated as having the specified alpha value. Alpha values have the same=20
interpretation as in an 8-bit full alpha channel: 0 is fully =
transparent, 255 is=20
fully opaque, regardless of image bit depth. The <SPAN =
class=3Dchunk>tRNS</SPAN>=20
chunk shall not contain more alpha values than there are palette =
entries, but a=20
<SPAN class=3Dchunk>tRNS</SPAN> chunk may contain fewer values than =
there are=20
palette entries. In this case, the alpha value for all remaining palette =
entries=20
is assumed to be 255. In the common case in which only palette index 0 =
need be=20
made transparent, only a one-byte <SPAN class=3Dchunk>tRNS</SPAN> chunk =
is needed,=20
and when all palette indices are opaque, the <SPAN =
class=3Dchunk>tRNS</SPAN> chunk=20
may be omitted.</P>
<P>For colour types 0 or 2, two bytes per sample are used regardless of =
the=20
image bit depth (see 7.1: <A=20
href=3D"http://www.w3.org/TR/PNG/#7Integers-and-byte-order"><SPAN=20
class=3Dxref>Integers and byte order</SPAN></A>). Pixels of the =
specified grey=20
sample value or RGB sample values are treated as transparent (equivalent =
to=20
alpha value 0); all other pixels are to be treated as fully opaque =
(alpha value=20
2<SUP>bitdepth</SUP>-1). If the image bit depth is less than 16, the =
least=20
significant bits are used and the others are 0.</P>
<P>A <SPAN class=3Dchunk>tRNS</SPAN> chunk shall not appear for colour =
types 4 and=20
6, since a full alpha channel is already present in those cases.</P>
<P class=3DNote>NOTE For 16-bit greyscale or truecolour data, only =
pixels matching=20
the entire 16-bit values in <SPAN class=3Dchunk>tRNS</SPAN> chunks are=20
transparent. Decoders have to postpone any sample depth rescaling until =
after=20
the pixels have been tested for transparency.</P>
<H3><A name=3D11addnlcolinfo>11.3.3 Colour space information</A></H3>
<H4><A name=3D11cHRM>11.3.3.1 <SPAN class=3Dchunk>cHRM</SPAN> Primary =
chromaticities=20
and white point</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>99 =
72 82 77
</PRE>
<P>The <SPAN class=3Dchunk>cHRM</SPAN> chunk may be used to specify the =
1931 CIE=20
<I>x,y</I> chromaticities of the red, green, and blue display primaries =
used in=20
the image, and the referenced white point. See Annex C: <A=20
href=3D"http://www.w3.org/TR/PNG/#C-GammaAppendix"><SPAN =
class=3Dxref>Gamma and=20
chromaticity</SPAN></A> for more information. The <A=20
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN =
class=3Dchunk>iCCP</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN =
class=3Dchunk>sRGB</SPAN></A> chunks=20
provide more sophisticated support for colour management and =
control.</P>
<P>The <SPAN class=3Dchunk>cHRM</SPAN> chunk contains:</P><!-- =
************Page Break******************* --><!-- ************Page =
Break******************* -->
<TABLE class=3DRegular summary=3D"This table defines the cHRM chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>White point x</TD>
    <TD class=3DRegular>4 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>White point y</TD>
    <TD class=3DRegular>4 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Red x</TD>
    <TD class=3DRegular>4 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Red y</TD>
    <TD class=3DRegular>4 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Green x</TD>
    <TD class=3DRegular>4 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Green y</TD>
    <TD class=3DRegular>4 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Blue x</TD>
    <TD class=3DRegular>4 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Blue y</TD>
    <TD class=3DRegular>4 bytes</TD></TR></TBODY></TABLE>
<P>Each value is encoded as a four-byte PNG unsigned integer, =
representing the=20
<I>x</I> or <I>y</I> value times 100000.</P>
<P>EXAMPLE A value of 0.3127 would be stored as the integer 31270.</P>
<P>The <SPAN class=3Dchunk>cHRM</SPAN> chunk is allowed in all PNG =
datastreams,=20
although it is of little value for greyscale images.</P>
<P>An <A href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN=20
class=3Dchunk>sRGB</SPAN></A> chunk or <A=20
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN =
class=3Dchunk>iCCP</SPAN></A> chunk,=20
when present and recognized, overrides the <SPAN =
class=3Dchunk>cHRM</SPAN>=20
chunk.</P>
<H4><A name=3D11gAMA>11.3.3.2 <SPAN class=3Dchunk>gAMA</SPAN> Image =
gamma</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>103 65 77 65
</PRE>
<P>The <SPAN class=3Dchunk>gAMA</SPAN> chunk specifies the relationship =
between=20
the image samples and the desired display output intensity. Gamma is =
defined in=20
3.1.20: <A href=3D"http://www.w3.org/TR/PNG/#3gamma">gamma</A>.</P>
<P>In fact specifying the desired display output intensity is =
insufficient. It=20
is also necessary to specify the viewing conditions under which the =
output is=20
desired. For <SPAN class=3Dchunk>gAMA</SPAN> these are the reference =
viewing=20
conditions of the sRGB specification <A=20
href=3D"http://www.w3.org/TR/PNG/#2-IEC-61966-2-1"><SPAN =
class=3DNormRef>[IEC=20
61966-2-1]</SPAN></A>, which are based on ISO 3664 <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ISO-3664"><SPAN=20
class=3Dbibref>[ISO-3664]</SPAN></A>. Adjustment for different viewing =
conditions=20
is normally handled by a Colour Management System. If the adjustment is =
not=20
performed, the error is usually small. Applications desiring high colour =

fidelity may wish to use an <A =
href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN=20
class=3Dchunk>sRGB</SPAN></A> chunk or <A=20
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN =
class=3Dchunk>iCCP</SPAN></A>=20
chunk.</P>
<P>The <SPAN class=3Dchunk>gAMA</SPAN> chunk contains:</P>
<TABLE class=3DRegular summary=3D"This table defines the gAMA chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>Image gamma</TD>
    <TD class=3DRegular>4 bytes</TD></TR></TBODY></TABLE>
<P>The value is encoded as a four-byte PNG unsigned integer, =
representing gamma=20
times 100000.</P>
<P>EXAMPLE A gamma of 1/2.2 would be stored as the integer 45455.</P>
<P>See 12.2: <A =
href=3D"http://www.w3.org/TR/PNG/#12Encoder-gamma-handling"><SPAN=20
class=3Dxref>Encoder gamma handling</SPAN></A> and 13.13: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Decoder-gamma-handling"><SPAN=20
class=3Dxref>Decoder gamma handling</SPAN></A> for more information.</P>
<P>An <A href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN=20
class=3Dchunk>sRGB</SPAN></A> chunk or <A=20
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN =
class=3Dchunk>iCCP</SPAN></A> chunk,=20
when present and recognized, overrides the <SPAN =
class=3Dchunk>gAMA</SPAN>=20
chunk.</P>
<H4><A name=3D11iCCP>11.3.3.3 <SPAN class=3Dchunk>iCCP</SPAN> Embedded =
ICC=20
profile</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>105 67 67 80
</PRE>
<P>The <SPAN class=3Dchunk>iCCP</SPAN> chunk contains:</P>
<TABLE class=3DRegular summary=3D"This table defines the iCCP chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>Profile name</TD>
    <TD class=3DRegular>1-79 bytes (character string)</TD></TR>
  <TR>
    <TD class=3DRegular>Null separator</TD>
    <TD class=3DRegular>1 byte (null character)</TD></TR>
  <TR>
    <TD class=3DRegular>Compression method</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Compressed profile</TD>
    <TD class=3DRegular>n bytes</TD></TR></TBODY></TABLE>
<P>The profile name may be any convenient name for referring to the =
profile. It=20
is case-sensitive. Profile names shall contain only printable Latin-1 =
characters=20
and spaces (only character codes 32-126 and 161-255 decimal are =
allowed).=20
Leading, trailing, and consecutive spaces are not permitted. The only=20
compression method defined in this International Standard is method 0 =
(zlib=20
datastream with deflate compression, see 10.3: <A=20
href=3D"http://www.w3.org/TR/PNG/#10CompressionOtherUses"><SPAN =
class=3Dxref>Other=20
uses of compression</SPAN></A>). The compression method entry is =
followed by a=20
compressed profile that makes up the remainder of the chunk. =
Decompression of=20
this datastream yields the embedded ICC profile.</P>
<P>If the <SPAN class=3Dchunk>iCCP</SPAN> chunk is present, the image =
samples=20
conform to the colour space represented by the embedded ICC profile as =
defined=20
by the International Color Consortium <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ICC"><SPAN =
class=3Dbibref>[ICC]</SPAN></A>. The=20
colour space of the ICC profile shall be an RGB colour space for colour =
images=20
(PNG colour types 2, 3, and 6), or a greyscale colour space for =
greyscale images=20
(PNG colour types 0 and 4). A PNG encoder that writes the <SPAN=20
class=3Dchunk>iCCP</SPAN> chunk is encouraged to also write <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A> chunks=20
that approximate the ICC profile, to provide compatibility with =
applications=20
that do not use the <SPAN class=3Dchunk>iCCP</SPAN> chunk. When the =
<SPAN=20
class=3Dchunk>iCCP</SPAN> chunk is present, PNG decoders that recognize =
it and are=20
capable of colour management <A =
href=3D"http://www.w3.org/TR/PNG/#G-ICC"><SPAN=20
class=3Dbibref>[ICC]</SPAN></A> shall ignore the <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A> chunks=20
and use the <SPAN class=3Dchunk>iCCP</SPAN> chunk instead and interpret =
it=20
according to <A href=3D"http://www.w3.org/TR/PNG/#2-ICC-1"><SPAN=20
class=3DNormRef>[ICC-1]</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#2-ICC-1A"><SPAN=20
class=3DNormRef>[ICC-1A]</SPAN></A>. PNG decoders that are used in an =
environment=20
that is incapable of full-fledged colour management should use the <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A> chunks=20
if present.</P>
<P>A PNG datastream should contain at most one embedded profile, whether =

specified explicitly with an <SPAN class=3Dchunk>iCCP</SPAN> chunk or =
implicitly=20
with an <A href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN=20
class=3Dchunk>sRGB</SPAN></A> chunk.</P>
<H4><A name=3D11sBIT>11.3.3.4 <SPAN class=3Dchunk>sBIT</SPAN> =
Significant=20
bits</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>115 66 73 84
</PRE>
<P>To simplify decoders, PNG specifies that only certain sample depths =
may be=20
used, and further specifies that sample values should be scaled to the =
full=20
range of possible values at the sample depth. The <A=20
href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN =
class=3Dchunk>sBIT</SPAN></A> chunk=20
defines the original number of significant bits (which can be less than =
or equal=20
to the sample depth). This allows PNG decoders to recover the original =
data=20
losslessly even if the data had a sample depth not directly supported by =

PNG.</P>
<P>The <SPAN class=3Dchunk>sBIT</SPAN> chunk contains:</P><!-- =
************Page Break******************* --><!-- ************Page =
Break******************* -->
<TABLE class=3DRegular summary=3D"This table defines the sBIT chunk">
  <TBODY>
  <TR>
    <TH colSpan=3D2>Colour type 0</TH></TR>
  <TR>
    <TD class=3DRegular>significant greyscale bits</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TH colSpan=3D2>Colour types 2 and 3</TH></TR>
  <TR>
    <TD class=3DRegular>significant red bits</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>significant green bits</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>significant blue bits</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TH colSpan=3D2>Colour type 4</TH></TR>
  <TR>
    <TD class=3DRegular>significant greyscale bits</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>significant alpha bits</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TH colSpan=3D2>Colour type 6</TH></TR>
  <TR>
    <TD class=3DRegular>significant red bits</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>significant green bits</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>significant blue bits</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>significant alpha bits</TD>
    <TD class=3DRegular>1 byte</TD></TR></TBODY></TABLE>
<P>Each depth specified in <SPAN class=3Dchunk>sBIT</SPAN> shall be =
greater than=20
zero and less than or equal to the sample depth (which is 8 for =
indexed-colour=20
images, and the bit depth given in <A=20
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A> for=20
other colour types). Note that <SPAN class=3Dchunk>sBIT</SPAN> does not =
provide a=20
sample depth for the alpha channel that is implied by a <A=20
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A> chunk;=20
in that case, all of the sample bits of the alpha channel are to be =
treated as=20
significant. If the <SPAN class=3Dchunk>sBIT</SPAN> chunk is not =
present, then all=20
of the sample bits of all channels are to be treated as significant.</P>
<H4><A name=3D11sRGB>11.3.3.5 <SPAN class=3Dchunk>sRGB</SPAN> Standard =
RGB colour=20
space</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>115 82 71 66
</PRE>
<P>If the <SPAN class=3Dchunk>sRGB</SPAN> chunk is present, the image =
samples=20
conform to the sRGB colour space <A=20
href=3D"http://www.w3.org/TR/PNG/#2-IEC-61966-2-1"><SPAN =
class=3DNormRef>[IEC=20
61966-2-1]</SPAN></A> and should be displayed using the specified =
rendering=20
intent defined by the International Color Consortium <A=20
href=3D"http://www.w3.org/TR/PNG/#2-ICC-1"><SPAN =
class=3DNormRef>[ICC-1]</SPAN></A>=20
and <A href=3D"http://www.w3.org/TR/PNG/#2-ICC-1A"><SPAN=20
class=3DNormRef>[ICC-1A]</SPAN></A>.</P>
<P>The <SPAN class=3Dchunk>sRGB</SPAN> chunk contains:</P>
<TABLE class=3DRegular summary=3D"This table defines the sRGB chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>Rendering intent</TD>
    <TD class=3DRegular>1 byte</TD></TR></TBODY></TABLE>
<P>The following values are defined for rendering intent:</P>
<TABLE class=3DRegular=20
summary=3D"This table defines the values of rendering intent in the sRGB =
chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>0</TD>
    <TD class=3DRegular>Perceptual</TD>
    <TD class=3DRegular>for images preferring good adaptation to the =
output=20
      device gamut at the expense of colorimetric accuracy, such as=20
    photographs.</TD></TR>
  <TR>
    <TD class=3DRegular>1</TD>
    <TD class=3DRegular>Relative colorimetric</TD>
    <TD class=3DRegular>for images requiring colour appearance matching=20
      (relative to the output device white point), such as =
logos.</TD></TR>
  <TR>
    <TD class=3DRegular>2</TD>
    <TD class=3DRegular>Saturation</TD>
    <TD class=3DRegular>for images preferring preservation of saturation =
at the=20
      expense of hue and lightness, such as charts and graphs.</TD></TR>
  <TR>
    <TD class=3DRegular>3</TD>
    <TD class=3DRegular>Absolute colorimetric</TD>
    <TD class=3DRegular>for images requiring preservation of absolute=20
      colorimetry, such as previews of images destined for a different =
output=20
      device (proofs).</TD></TR></TBODY></TABLE>
<P>It is recommended that a PNG encoder that writes the <SPAN=20
class=3Dchunk>sRGB</SPAN> chunk also write a <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> chunk=20
(and optionally a <A href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
class=3Dchunk>cHRM</SPAN></A> chunk) for compatibility with decoders =
that do not=20
use the <SPAN class=3Dchunk>sRGB</SPAN> chunk. Only the following values =
shall be=20
used.</P>
<TABLE class=3DRegular=20
summary=3D"This table defines the gAMA and cHRM values for sRGB">
  <TBODY>
  <TR>
    <TH colSpan=3D2><A href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
      class=3Dchunk>gAMA</SPAN></A> </TH></TR>
  <TR>
    <TD class=3DRegular>Gamma</TD>
    <TD class=3DRegular>45455</TD></TR>
  <TR>
    <TH colSpan=3D2><A href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
      class=3Dchunk>cHRM</SPAN></A> </TH></TR>
  <TR>
    <TD class=3DRegular>White point x</TD>
    <TD class=3DRegular>31270</TD></TR>
  <TR>
    <TD class=3DRegular>White point y</TD>
    <TD class=3DRegular>32900</TD></TR>
  <TR>
    <TD class=3DRegular>Red x</TD>
    <TD class=3DRegular>64000</TD></TR>
  <TR>
    <TD class=3DRegular>Red y</TD>
    <TD class=3DRegular>33000</TD></TR>
  <TR>
    <TD class=3DRegular>Green x</TD>
    <TD class=3DRegular>30000</TD></TR>
  <TR>
    <TD class=3DRegular>Green y</TD>
    <TD class=3DRegular>60000</TD></TR>
  <TR>
    <TD class=3DRegular>Blue x</TD>
    <TD class=3DRegular>15000</TD></TR>
  <TR>
    <TD class=3DRegular>Blue y</TD>
    <TD class=3DRegular>6000</TD></TR></TBODY></TABLE>
<P>When the <SPAN class=3Dchunk>sRGB</SPAN> chunk is present, it is =
recommended=20
that decoders that recognize it and are capable of colour management <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ICC"><SPAN =
class=3Dbibref>[ICC]</SPAN></A>=20
ignore the <A href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
class=3Dchunk>gAMA</SPAN></A> and <A =
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
class=3Dchunk>cHRM</SPAN></A> chunks and use the <SPAN =
class=3Dchunk>sRGB</SPAN>=20
chunk instead. Decoders that recognize the <SPAN =
class=3Dchunk>sRGB</SPAN> chunk=20
but are not capable of colour management <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ICC"><SPAN =
class=3Dbibref>[ICC]</SPAN></A> are=20
recommended to ignore the <A =
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
class=3Dchunk>gAMA</SPAN></A> and <A =
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
class=3Dchunk>cHRM</SPAN></A> chunks, and use the values given above as =
if they=20
had appeared in <A href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
class=3Dchunk>gAMA</SPAN></A> and <A =
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
class=3Dchunk>cHRM</SPAN></A> chunks.</P>
<P>It is recommended that the <SPAN class=3Dchunk>sRGB</SPAN> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN =
class=3Dchunk>iCCP</SPAN></A> chunks=20
do not both appear in a PNG datastream.</P>
<H3><A name=3D11textinfo>11.3.4 Textual information</A></H3>
<H4><A name=3D11textIntro>11.3.4.1 Introduction</A></H4>
<P>PNG provides the <A href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN=20
class=3Dchunk>tEXt</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN=20
class=3Dchunk>iTXt</SPAN></A>, and <A=20
href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN =
class=3Dchunk>zTXt</SPAN></A> chunks=20
for storing text strings associated with the image, such as an image =
description=20
or copyright notice. Keywords are used to indicate what each text string =

represents. Any number of such text chunks may appear, and more than one =
with=20
the same keyword is permitted.</P>
<H4><A name=3D11keywords>11.3.4.2 Keywords and text strings</A></H4>
<P>The following keywords are predefined and should be used where=20
appropriate.</P>
<TABLE class=3DRegular=20
summary=3D"This table defines the keywords defined for tEXt, iTXt and =
zTXt chunks">
  <TBODY>
  <TR>
    <TD class=3DRegular>Title</TD>
    <TD class=3DRegular>Short (one line) title or caption for =
image</TD></TR>
  <TR>
    <TD class=3DRegular>Author</TD>
    <TD class=3DRegular>Name of image's creator</TD></TR>
  <TR>
    <TD class=3DRegular>Description</TD>
    <TD class=3DRegular>Description of image (possibly long)</TD></TR>
  <TR>
    <TD class=3DRegular>Copyright</TD>
    <TD class=3DRegular>Copyright notice</TD></TR>
  <TR>
    <TD class=3DRegular>Creation Time</TD>
    <TD class=3DRegular>Time of original image creation</TD></TR>
  <TR>
    <TD class=3DRegular>Software</TD>
    <TD class=3DRegular>Software used to create the image</TD></TR>
  <TR>
    <TD class=3DRegular>Disclaimer</TD>
    <TD class=3DRegular>Legal disclaimer</TD></TR>
  <TR>
    <TD class=3DRegular>Warning</TD>
    <TD class=3DRegular>Warning of nature of content</TD></TR>
  <TR>
    <TD class=3DRegular>Source</TD>
    <TD class=3DRegular>Device used to create the image</TD></TR>
  <TR>
    <TD class=3DRegular>Comment</TD>
    <TD class=3DRegular>Miscellaneous comment</TD></TR></TBODY></TABLE>
<P>Other keywords may be defined for other purposes. Keywords of general =

interest can be registered with the PNG Registration Authority (see 4.9 =
<A=20
href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration"><SPAN=20
class=3Dxref>Extension and registration</SPAN></A>). It is also =
permitted to use=20
private unregistered keywords. (Private keywords should be reasonably=20
self-explanatory, in order to minimize the chance that the same keyword =
is used=20
for incompatible purposes by different people.)</P>
<P>Keywords shall contain only printable Latin-1 <A=20
href=3D"http://www.w3.org/TR/PNG/#2-ISO-8859-1"><SPAN=20
class=3DNormRef>[ISO-8859-1]</SPAN></A> characters and spaces; that is, =
only=20
character codes 32-126 and 161-255 decimal are allowed. To reduce the =
chances=20
for human misreading of a keyword, leading spaces, trailing spaces, and=20
consecutive spaces are not permitted in keywords, nor is the =
non-breaking space=20
(code 160) since it is visually indistinguishable from an ordinary =
space.</P>
<P>Keywords shall be spelled exactly as registered, so that decoders can =
use=20
simple literal comparisons when looking for particular keywords. In =
particular,=20
keywords are considered case-sensitive. Keywords are restricted to 1 to =
79 bytes=20
in length.</P>
<P>For the Creation Time keyword, the date format defined in =
section&nbsp;5.2.14=20
of RFC 1123 is suggested, but not required <A=20
href=3D"http://www.w3.org/TR/PNG/#2-RFC-1123"><SPAN=20
class=3DNormRef>[RFC-1123]</SPAN></A>.</P>
<P>In the <A href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN=20
class=3Dchunk>tEXt</SPAN></A> and <A =
href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN=20
class=3Dchunk>zTXt</SPAN></A> chunks, the text string associated with a =
keyword is=20
restricted to the Latin-1 character set plus the linefeed character. =
Text=20
strings in <A href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN=20
class=3Dchunk>zTXt</SPAN></A> are compressed into zlib datastreams using =
deflate=20
compression (see 10.3: <A=20
href=3D"http://www.w3.org/TR/PNG/#10CompressionOtherUses"><SPAN =
class=3Dxref>Other=20
uses of compression</SPAN></A>). The <A=20
href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN =
class=3Dchunk>iTXt</SPAN></A> chunk=20
can be used to convey characters outside the Latin-1 set. It uses the =
UTF-8=20
encoding of UCS <A =
href=3D"http://www.w3.org/TR/PNG/#2-ISO-10646-1"><SPAN=20
class=3DNormRef>[ISO/IEC 10646-1]</SPAN></A> . There is an option to =
compress text=20
strings in the <A href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN=20
class=3Dchunk>iTXt</SPAN></A> chunk.</P>
<H4><A name=3D11tEXt>11.3.4.3 <SPAN class=3Dchunk>tEXt</SPAN> Textual =
data</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>116 69 88 116
</PRE>
<P>Each <SPAN class=3Dchunk>tEXt</SPAN> chunk contains a keyword and a =
text=20
string, in the format:</P>
<TABLE class=3DRegular summary=3D"This table defines the tEXt chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>Keyword</TD>
    <TD class=3DRegular>1-79 bytes (character string)</TD></TR>
  <TR>
    <TD class=3DRegular>Null separator</TD>
    <TD class=3DRegular>1 byte (null character)</TD></TR>
  <TR>
    <TD class=3DRegular>Text string</TD>
    <TD class=3DRegular>0 or more bytes (character =
string)</TD></TR></TBODY></TABLE>
<P>The keyword and text string are separated by a zero byte (null =
character).=20
Neither the keyword nor the text string may contain a null character. =
The text=20
string is <STRONG>not</STRONG> null-terminated (the length of the chunk =
defines=20
the ending). The text string may be of any length from zero bytes up to =
the=20
maximum permissible chunk size less the length of the keyword and null =
character=20
separator.</P>
<P>The keyword indicates the type of information represented by the text =
string=20
as described in 11.3.4.2: <A =
href=3D"http://www.w3.org/TR/PNG/#11keywords"><SPAN=20
class=3Dxref>Keywords and text strings</SPAN></A>.</P>
<P>Text is interpreted according to the Latin-1 character set <A=20
href=3D"http://www.w3.org/TR/PNG/#2-ISO-8859-1"><SPAN=20
class=3DNormRef>[ISO-8859-1]</SPAN></A>. The text string may contain any =
Latin-1=20
character. Newlines in the text string should be represented by a single =

linefeed character (decimal 10). Characters other than those defined in =
Latin-1=20
plus the linefeed character have no defined meaning in <SPAN=20
class=3Dchunk>tEXt</SPAN> chunks. Text containing characters outside the =

repertoire of ISO/IEC 8859-1 should be encoded using the <A=20
href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN =
class=3Dchunk>iTXt</SPAN></A>=20
chunk.</P>
<H4><A name=3D11zTXt>11.3.4.4 <SPAN class=3Dchunk>zTXt</SPAN> Compressed =
textual=20
data</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>122 84 88 116
</PRE>
<P>The <SPAN class=3Dchunk>zTXt</SPAN> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN =
class=3Dchunk>tEXt</SPAN></A> chunks=20
are semantically equivalent, but the <SPAN class=3Dchunk>zTXt</SPAN> =
chunk is=20
recommended for storing large blocks of text.</P>
<P>A <SPAN class=3Dchunk>zTXt</SPAN> chunk contains:</P>
<TABLE class=3DRegular summary=3D"This table defines the zTXt chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>Keyword</TD>
    <TD class=3DRegular>1-79 bytes (character string)</TD></TR>
  <TR>
    <TD class=3DRegular>Null separator</TD>
    <TD class=3DRegular>1 byte (null character)</TD></TR>
  <TR>
    <TD class=3DRegular>Compression method</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Compressed text datastream</TD>
    <TD class=3DRegular>n bytes</TD></TR></TBODY></TABLE>
<P>The keyword and null character are the same as in the <A=20
href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN =
class=3Dchunk>tEXt</SPAN></A> chunk=20
(see 11.3.4.3: <A href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN =
class=3Dxref><SPAN=20
class=3Dchunk>tEXt</SPAN> Textual data</SPAN></A>). The keyword is not =
compressed.=20
The compression method entry defines the compression method used. The =
only value=20
defined in this International Standard is 0 (deflate/inflate =
compression). Other=20
values are reserved for future standardization (see 4.9 <A=20
href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration"><SPAN=20
class=3Dxref>Extension and registration</SPAN></A>). The compression =
method entry=20
is followed by the compressed text datastream that makes up the =
remainder of the=20
chunk. For compression method 0, this datastream is a zlib datastream =
with=20
deflate compression (see 10.3: <A=20
href=3D"http://www.w3.org/TR/PNG/#10CompressionOtherUses"><SPAN =
class=3Dxref>Other=20
uses of compression</SPAN></A>). Decompression of this datastream yields =
Latin-1=20
text that is identical to the text that would be stored in an equivalent =
<A=20
href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN =
class=3Dchunk>tEXt</SPAN></A>=20
chunk.</P>
<H4><A name=3D11iTXt>11.3.4.5 <SPAN class=3Dchunk>iTXt</SPAN> =
International textual=20
data</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>105 84 88 116
</PRE>
<P>An <SPAN class=3Dchunk>iTXt</SPAN> chunk contains:</P>
<TABLE class=3DRegular summary=3D"This table defines the iTXt chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>Keyword</TD>
    <TD class=3DRegular>1-79 bytes (character string)</TD></TR>
  <TR>
    <TD class=3DRegular>Null separator</TD>
    <TD class=3DRegular>1 byte (null character)</TD></TR>
  <TR>
    <TD class=3DRegular>Compression flag</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Compression method</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Language tag</TD>
    <TD class=3DRegular>0 or more bytes (character string)</TD></TR>
  <TR>
    <TD class=3DRegular>Null separator</TD>
    <TD class=3DRegular>1 byte (null character)</TD></TR>
  <TR>
    <TD class=3DRegular>Translated keyword</TD>
    <TD class=3DRegular>0 or more bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Null separator</TD>
    <TD class=3DRegular>1 byte (null character)</TD></TR>
  <TR>
    <TD class=3DRegular>Text</TD>
    <TD class=3DRegular>0 or more bytes</TD></TR></TBODY></TABLE>
<P>The keyword is described in 11.3.4.2: <A=20
href=3D"http://www.w3.org/TR/PNG/#11keywords"><SPAN =
class=3Dxref>Keywords and text=20
strings</SPAN></A>.</P>
<P>The compression flag is 0 for uncompressed text, 1 for compressed =
text. Only=20
the text field may be compressed. The compression method entry defines =
the=20
compression method used. The only compression method defined in this=20
International Standard is 0 (zlib datastream with deflate compression, =
see 10.3:=20
<A href=3D"http://www.w3.org/TR/PNG/#10CompressionOtherUses"><SPAN=20
class=3Dxref>Other uses of compression</SPAN></A>). For uncompressed =
text,=20
encoders shall set the compression method to 0, and decoders shall =
ignore=20
it.</P>
<P>The language tag defined in <A=20
href=3D"http://www.w3.org/TR/PNG/#2-RFC-3066"><SPAN=20
class=3DNormRef>[RFC-3066]</SPAN></A> indicates the human language used =
by the=20
translated keyword and the text. Unlike the keyword, the language tag is =

case-insensitive. It is an ISO 646.IRV:1991 <A=20
href=3D"http://www.w3.org/TR/PNG/#2-ISO-646"><SPAN class=3DNormRef>[ISO=20
646]</SPAN></A> string consisting of hyphen-separated words of 1-8 =
alphanumeric=20
characters each (for example cn, en-uk, no-bok, x-klingon, x-KlInGoN). =
If the=20
first word is two or three letters long, it is an ISO language code <A=20
href=3D"http://www.w3.org/TR/PNG/#2-ISO-639"><SPAN=20
class=3DNormRef>[ISO-639]</SPAN></A>. If the language tag is empty, the =
language=20
is unspecified.</P>
<P>The translated keyword and text both use the UTF-8 encoding of UCS <A =

href=3D"http://www.w3.org/TR/PNG/#2-ISO-10646-1"><SPAN =
class=3DNormRef>[ISO/IEC=20
10646-1]</SPAN></A>, and neither shall contain a zero byte (null =
character). The=20
text, unlike other textual data in this chunk, is not null-terminated; =
its=20
length is derived from the chunk length.</P>
<P>Line breaks should not appear in the translated keyword. In the text, =
a=20
newline should be represented by a single linefeed character (decimal =
10). The=20
remaining control characters (1-9, 11-31, 127-159) are discouraged in =
both the=20
translated keyword and text. In UTF-8 there is a difference between the=20
characters 128-159 (which are discouraged) and the bytes 128-159 (which =
are=20
often necessary).</P>
<P>The translated keyword, if not empty, should contain a translation of =
the=20
keyword into the language indicated by the language tag, and =
applications=20
displaying the keyword should display the translated keyword in =
addition.</P><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<H3><A name=3D11addnlsiinfo>11.3.5 Miscellaneous information</A></H3>
<H4><A name=3D11bKGD>11.3.5.1 <SPAN class=3Dchunk>bKGD</SPAN> Background =

colour</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>98 =
75 71 68
</PRE>
<P>The <SPAN class=3Dchunk>bKGD</SPAN> chunk specifies a default =
background colour=20
to present the image against. If there is any other preferred =
background, either=20
user-specified or part of a larger page (as in a browser), the <SPAN=20
class=3Dchunk>bKGD</SPAN> chunk should be ignored. The <SPAN=20
class=3Dchunk>bKGD</SPAN> chunk contains:</P>
<TABLE class=3DRegular summary=3D"This table defines the bKGD chunk">
  <TBODY>
  <TR>
    <TH colSpan=3D2>Colour types 0 and 4</TH></TR>
  <TR>
    <TD class=3DRegular>Greyscale</TD>
    <TD class=3DRegular>2 bytes</TD></TR>
  <TR>
    <TH colSpan=3D2>Colour types 2 and 6</TH></TR>
  <TR>
    <TD class=3DRegular>Red</TD>
    <TD class=3DRegular>2 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Green</TD>
    <TD class=3DRegular>2 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Blue</TD>
    <TD class=3DRegular>2 bytes</TD></TR>
  <TR>
    <TH colSpan=3D2>Colour type 3</TH></TR>
  <TR>
    <TD class=3DRegular>Palette index</TD>
    <TD class=3DRegular>1 byte</TD></TR></TBODY></TABLE>
<P>For colour type 3 (indexed-colour), the value is the palette index of =
the=20
colour to be used as background.</P>
<P>For colour types 0 and 4 (greyscale, greyscale with alpha), the value =
is the=20
grey level to be used as background in the range 0 to =
(2<SUP>bitdepth</SUP>)-1.=20
For colour types 2 and 6 (truecolour, truecolour with alpha), the values =
are the=20
colour to be used as background, given as RGB samples in the range 0 to=20
(2<SUP>bitdepth</SUP>)-1. In each case, for consistency, two bytes per =
sample=20
are used regardless of the image bit depth. If the image bit depth is =
less than=20
16, the least significant bits are used and the others are 0.</P>
<H4><A name=3D11hIST>11.3.5.2 <SPAN class=3Dchunk>hIST</SPAN> Image=20
histogram</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>104 73 83 84
</PRE>
<P>The <SPAN class=3Dchunk>hIST</SPAN> chunk contains a series of =
two-byte=20
(16-bit) unsigned integers:</P>
<TABLE class=3DRegular summary=3D"This table defines the hIST chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>Frequency</TD>
    <TD class=3DRegular>2 bytes (unsigned integer)</TD></TR>
  <TR>
    <TD class=3DRegular>...etc...</TD>
    <TD class=3DRegular>&nbsp;</TD></TR></TBODY></TABLE>
<P>The <SPAN class=3Dchunk>hIST</SPAN> chunk gives the approximate usage =
frequency=20
of each colour in the palette. A histogram chunk can appear only when a =
<A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> chunk=20
appears. If a viewer is unable to provide all the colours listed in the =
palette,=20
the histogram may help it decide how to choose a subset of the colours =
for=20
display.</P>
<P>There shall be exactly one entry for each entry in the <A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> chunk.=20
Each entry is proportional to the fraction of pixels in the image that =
have that=20
palette index; the exact scale factor is chosen by the encoder.</P>
<P>Histogram entries are approximate, with the exception that a zero =
entry=20
specifies that the corresponding palette entry is not used at all in the =
image.=20
A histogram entry shall be nonzero if there are any pixels of that =
colour.</P>
<P class=3DNote>NOTE When the palette is a suggested quantization of a =
truecolour=20
image, the histogram is necessarily approximate, since a decoder may map =
pixels=20
to palette entries differently than the encoder did. In this situation, =
zero=20
entries should not normally appear, because any entry might be used.</P>
<H4><A name=3D11pHYs>11.3.5.3 <SPAN class=3Dchunk>pHYs</SPAN> Physical =
pixel=20
dimensions</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>112 72 89 115
</PRE>
<P>The <SPAN class=3Dchunk>pHYs</SPAN> chunk specifies the intended =
pixel size or=20
aspect ratio for display of the image. It contains:</P>
<TABLE class=3DRegular summary=3D"This table defines the pHYs chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>Pixels per unit, X axis</TD>
    <TD class=3DRegular>4 bytes (PNG unsigned integer)</TD></TR>
  <TR>
    <TD class=3DRegular>Pixels per unit, Y axis</TD>
    <TD class=3DRegular>4 bytes (PNG unsigned integer)</TD></TR>
  <TR>
    <TD class=3DRegular>Unit specifier</TD>
    <TD class=3DRegular>1 byte</TD></TR></TBODY></TABLE>
<P>The following values are defined for the unit specifier:</P>
<TABLE class=3DRegular=20
summary=3D"This table defines the allowed values for the unit specifier =
in the pHYs chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>0</TD>
    <TD class=3DRegular>unit is unknown</TD></TR>
  <TR>
    <TD class=3DRegular>1</TD>
    <TD class=3DRegular>unit is the metre</TD></TR></TBODY></TABLE>
<P>When the unit specifier is 0, the <SPAN class=3Dchunk>pHYs</SPAN> =
chunk defines=20
pixel aspect ratio only; the actual size of the pixels remains =
unspecified.</P>
<P>If the <SPAN class=3Dchunk>pHYs</SPAN> chunk is not present, pixels =
are assumed=20
to be square, and the physical size of each pixel is unspecified.</P>
<H4><A name=3D11sPLT>11.3.5.4 <SPAN class=3Dchunk>sPLT</SPAN> Suggested=20
palette</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>115 80 76 84
</PRE>
<P>The <SPAN class=3Dchunk>sPLT</SPAN> chunk contains:</P>
<TABLE class=3DRegular summary=3D"This table defines the sPLT chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>Palette name</TD>
    <TD class=3DRegular>1-79 bytes (character string)</TD></TR>
  <TR>
    <TD class=3DRegular>Null separator</TD>
    <TD class=3DRegular>1 byte (null character)</TD></TR>
  <TR>
    <TD class=3DRegular>Sample depth</TD>
    <TD class=3DRegular>1 byte</TD></TR>
  <TR>
    <TD class=3DRegular>Red</TD>
    <TD class=3DRegular>1 or 2 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Green</TD>
    <TD class=3DRegular>1 or 2 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Blue</TD>
    <TD class=3DRegular>1 or 2 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Alpha</TD>
    <TD class=3DRegular>1 or 2 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>Frequency</TD>
    <TD class=3DRegular>2 bytes</TD></TR>
  <TR>
    <TD class=3DRegular>...etc...</TD>
    <TD class=3DRegular>&nbsp;</TD></TR></TBODY></TABLE>
<P>Each palette entry is six bytes or ten bytes containing five unsigned =

integers (red, blue, green, alpha, and frequency).</P>
<P>There may be any number of entries. A PNG decoder determines the =
number of=20
entries from the length of the chunk remaining after the sample depth =
byte. This=20
shall be divisible by 6 if the <SPAN class=3Dchunk>sPLT</SPAN> sample =
depth is 8,=20
or by 10 if the <SPAN class=3Dchunk>sPLT</SPAN> sample depth is 16. =
Entries shall=20
appear in decreasing order of frequency. There is no requirement that =
the=20
entries all be used by the image, nor that they all be different.</P>
<P>The palette name can be any convenient name for referring to the =
palette (for=20
example "256 colour including Macintosh default", "256 colour including=20
Windows-3.1 default", "Optimal 512"). The palette name may aid the =
choice of the=20
appropriate suggested palette when more than one appears in a PNG=20
datastream.</P>
<P>The palette name is case-sensitive, and subject to the same =
restrictions as=20
the keyword parameter for the <A =
href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN=20
class=3Dchunk>tEXt</SPAN></A> chunk. Palette names shall contain only =
printable=20
Latin-1 characters and spaces (only character codes 32-126 and 161-255 =
decimal=20
are allowed). Leading, trailing, and consecutive spaces are not =
permitted.</P>
<P>The <SPAN class=3Dchunk>sPLT</SPAN> sample depth shall be 8 or =
16.</P>
<P>The red, green, blue, and alpha samples are either one or two bytes =
each,=20
depending on the <SPAN class=3Dchunk>sPLT</SPAN> sample depth, =
regardless of the=20
image bit depth. The colour samples are not premultiplied by alpha, nor =
are they=20
precomposited against any background. An alpha value of 0 means fully=20
transparent. An alpha value of 255 (when the <SPAN =
class=3Dchunk>sPLT</SPAN>=20
sample depth is 8) or 65535 (when the <SPAN class=3Dchunk>sPLT</SPAN> =
sample depth=20
is 16) means fully opaque. The <SPAN class=3Dchunk>sPLT</SPAN> chunk may =
appear=20
for any PNG colour type. Entries in <SPAN class=3Dchunk>sPLT</SPAN> use =
the same=20
gamma and chromaticity values as the PNG image, but may fall outside the =
range=20
of values used in the colour space of the PNG image; for example, in a =
greyscale=20
PNG image, each <SPAN class=3Dchunk>sPLT</SPAN> entry would typically =
have equal=20
red, green, and blue values, but this is not required. Similarly, <SPAN=20
class=3Dchunk>sPLT</SPAN> entries can have non-opaque alpha values even =
when the=20
PNG image does not use transparency.</P>
<P>Each frequency value is proportional to the fraction of the pixels in =
the=20
image for which that palette entry is the closest match in RGBA space, =
before=20
the image has been composited against any background. The exact scale =
factor is=20
chosen by the PNG encoder; it is recommended that the resulting range of =

individual values reasonably fills the range 0 to 65535. A PNG encoder =
may=20
artificially inflate the frequencies for colours considered to be =
"important",=20
for example the colours used in a logo or the facial features of a =
portrait.=20
Zero is a valid frequency meaning that the colour is "least important" =
or that=20
it is rarely, if ever, used. When all the frequencies are zero, they are =

meaningless, that is to say, nothing may be inferred about the actual=20
frequencies with which the colours appear in the PNG image.</P>
<P>Multiple <SPAN class=3Dchunk>sPLT</SPAN> chunks are permitted, but =
each shall=20
have a different palette name.</P>
<H3><A name=3D11timestampinfo>11.3.6 Time stamp information</A></H3>
<H4><A name=3D11tIME>11.3.6.1 <SPAN class=3Dchunk>tIME</SPAN> Image=20
last-modification time</A></H4>
<P>The four-byte chunk type field contains the decimal =
values</P><PRE>116 73 77 69
</PRE>
<P>The <SPAN class=3Dchunk>tIME</SPAN> chunk gives the time of the last =
image=20
modification (<STRONG>not</STRONG> the time of initial image creation). =
It=20
contains:</P>
<TABLE class=3DRegular summary=3D"This table defines the tIME chunk">
  <TBODY>
  <TR>
    <TD class=3DRegular>Year</TD>
    <TD class=3DRegular>2 bytes (complete; for example, 1995,=20
      <STRONG>not</STRONG> 95)</TD></TR>
  <TR>
    <TD class=3DRegular>Month</TD>
    <TD class=3DRegular>1 byte (1-12)</TD></TR>
  <TR>
    <TD class=3DRegular>Day</TD>
    <TD class=3DRegular>1 byte (1-31)</TD></TR>
  <TR>
    <TD class=3DRegular>Hour</TD>
    <TD class=3DRegular>1 byte (0-23)</TD></TR>
  <TR>
    <TD class=3DRegular>Minute</TD>
    <TD class=3DRegular>1 byte (0-59)</TD></TR>
  <TR>
    <TD class=3DRegular>Second</TD>
    <TD class=3DRegular>1 byte (0-60) (to allow for leap=20
seconds)</TD></TR></TBODY></TABLE>
<P>Universal Time (UTC) should be specified rather than local time.</P>
<P>The <SPAN class=3Dchunk>tIME</SPAN> chunk is intended for use as an=20
automatically-applied time stamp that is updated whenever the image data =
are=20
changed.</P><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<H1><A name=3D12Encoders>12 PNG Encoders</A></H1>
<H2><A name=3D12Introduction>12.1 Introduction</A></H2>
<P>This clause gives requirements and recommendations for encoder =
behaviour. A=20
PNG encoder shall produce a PNG datastream from a PNG image that =
conforms to the=20
format specified in the preceding clauses. Best results will usually be =
achieved=20
by following the additional recommendations given here.</P>
<H2><A name=3D12Encoder-gamma-handling>12.2 Encoder gamma =
handling</A></H2>
<P>See Annex C: <A =
href=3D"http://www.w3.org/TR/PNG/#C-GammaAppendix"><SPAN=20
class=3Dxref>Gamma and chromaticity</SPAN></A> for a brief introduction =
to gamma=20
issues.</P>
<P>PNG encoders capable of full colour management <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ICC"><SPAN =
class=3Dbibref>[ICC]</SPAN></A> will=20
perform more sophisticated calculations than those described here and =
may choose=20
to use the <A href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN=20
class=3Dchunk>iCCP</SPAN></A> chunk. If it is known that the image =
samples conform=20
to the sRGB specification <A=20
href=3D"http://www.w3.org/TR/PNG/#2-IEC-61966-2-1"><SPAN =
class=3DNormRef>[IEC=20
61966-2-1]</SPAN></A>, encoders are strongly encouraged to write the <A=20
href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN =
class=3Dchunk>sRGB</SPAN></A> chunk=20
without performing additional gamma handling. In both cases it is =
recommended=20
that an appropriate <A href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
class=3Dchunk>gAMA</SPAN></A> chunk be generated for use by PNG decoders =
that do=20
not recognize the <A href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN=20
class=3Dchunk>iCCP</SPAN></A> chunk or <A=20
href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN =
class=3Dchunk>sRGB</SPAN></A>=20
chunk.</P>
<P>A PNG encoder has to determine:</P><!-- <ol start=3D"1"> -->
<OL>
  <LI>what value to write in the <A=20
  href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A>=20
  chunk;=20
  <LI>how to transform the provided image samples into the values to be =
written=20
  in the PNG datastream. </LI></OL>
<P>The value to write in the <A =
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
class=3Dchunk>gAMA</SPAN></A> chunk is that value which causes a PNG =
decoder to=20
behave in the desired way. See 13.13: <A class=3DHref=20
href=3D"http://www.w3.org/TR/PNG/#13Decoder-gamma-handling">Decoder =
gamma=20
handling</A>.</P>
<P>The transform to be applied depends on the nature of the image =
samples and=20
their precision. If the samples represent light intensity in =
floating-point or=20
high precision integer form (perhaps from a computer graphics renderer), =
the=20
encoder may perform "gamma encoding" (applying a power function with =
exponent=20
less than 1) before quantizing the data to integer values for inclusion =
in the=20
PNG datastream. This results in fewer banding artifacts at a given =
sample depth,=20
or allows smaller samples while retaining the same visual quality. An =
intensity=20
level expressed as a floating-point value in the range 0 to 1 can be =
converted=20
to a datastream image sample by:</P>
<P><TT>integer_sample =3D floor((2<SUP>sampledepth</SUP>-1) *=20
intensity<SUP>encoding_exponent</SUP> + 0.5)</TT></P>
<P>If the intensity in the equation is the desired output intensity, the =

encoding exponent is the gamma value to be used in the <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A>=20
chunk.</P>
<P>If the intensity available to the PNG encoder is the original scene=20
intensity, another transformation may be needed. There is sometimes a=20
requirement for the displayed image to have higher contrast than the =
original=20
source image. This corresponds to an end-to-end transfer function from =
original=20
scene to display output with an exponent greater than 1. In this =
case:</P><PRE>gamma =3D encoding_exponent/end_to_end_exponent
</PRE>
<P>If it is not known whether the conditions under which the original =
image was=20
captured or calculated warrant such a contrast change, it may be assumed =
that=20
the display intensities are proportional to original scene intensities, =
i.e. the=20
end-to-end exponent is 1 and hence:</P><PRE>gamma =3D encoding_exponent
</PRE><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<P>If the image is being written to a datastream only, the encoder is =
free to=20
choose the encoding exponent. Choosing a value that causes the gamma =
value in=20
the <A href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A>=20
chunk to be 1/2.2 is often a reasonable choice because it minimizes the =
work for=20
a PNG decoder displaying on a typical video monitor.</P>
<P>Some image renderers may simultaneously write the image to a PNG =
datastream=20
and display it on-screen. The displayed pixels should be gamma corrected =
for the=20
display system and viewing conditions in use, so that the user sees a =
proper=20
representation of the intended scene.</P>
<P>If the renderer wants to write the displayed sample values to the PNG =

datastream, avoiding a separate gamma encoding step for the datastream, =
the=20
renderer should approximate the transfer function of the display system =
by a=20
power function, and write the reciprocal of the exponent into the <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> chunk.=20
This will allow a PNG decoder to reproduce what was displayed on screen =
for the=20
originator during rendering.</P>
<P>However, it is equally reasonable for a renderer to compute displayed =
pixels=20
appropriate for the display device, and to perform separate gamma =
encoding for=20
data storage and transmission, arranging to have a value in the <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> chunk=20
more appropriate to the future use of the image.</P>
<P>Computer graphics renderers often do not perform gamma encoding, =
instead=20
making sample values directly proportional to scene light intensity. If =
the PNG=20
encoder receives sample values that have already been quantized into =
integer=20
values, there is no point in doing gamma encoding on them; that would =
just=20
result in further loss of information. The encoder should just write the =
sample=20
values to the PNG datastream. This does not imply that the <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> chunk=20
should contain a gamma value of 1.0 because the desired end-to-end =
transfer=20
function from scene intensity to display output intensity is not =
necessarily=20
linear. However, the desired gamma value is probably not far from 1.0. =
It may=20
depend on whether the scene being rendered is a daylight scene or an =
indoor=20
scene, etc.</P>
<P>When the sample values come directly from a piece of hardware, the =
correct <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> value=20
can, in principle, be inferred from the transfer function of the =
hardware and=20
lighting conditions of the scene. In the case of video digitizers =
("frame=20
grabbers"), the samples are probably in the sRGB colour space, because =
the sRGB=20
specification was designed to be compatible with modern video standards. =
Image=20
scanners are less predictable. Their output samples may be proportional =
to the=20
input light intensity since CCD sensors themselves are linear, or the =
scanner=20
hardware may have already applied a power function designed to =
compensate for=20
dot gain in subsequent printing (an exponent of about 0.57), or the =
scanner may=20
have corrected the samples for display on a monitor. It may be necessary =
to=20
refer to the scanner's manual or to scan a calibrated target in order to =

determine the characteristics of a particular scanner. It should be =
remembered=20
that gamma relates samples to desired display output, not to scanner =
input.</P>
<P>Datastream format converters generally should not attempt to convert =
supplied=20
images to a different gamma. The data should be stored in the PNG =
datastream=20
without conversion, and the gamma value should be deduced from =
information in=20
the source datastream if possible. Gamma alteration at datastream =
conversion=20
time causes re-quantization of the set of intensity levels that are =
represented,=20
introducing further roundoff error with little benefit. It is almost =
always=20
better to just copy the sample values intact from the input to the =
output=20
file.</P>
<P>If the source datastream describes the gamma characteristics of the =
image, a=20
datastream converter is strongly encouraged to write a <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> chunk.=20
Some datastream formats specify the display exponent (the exponent of =
the=20
function which maps image samples to display output rather than the =
other=20
direction). If the source file's gamma value is greater than 1.0, it is =
probably=20
a display exponent, and the reciprocal of this value should be used for =
the PNG=20
gamma value. If the source file format records the relationship between =
image=20
samples and a quantity other than display output, it will be more =
complex than=20
this to deduce the PNG gamma value.</P>
<P>If a PNG encoder or datastream converter knows that the image has =
been=20
displayed satisfactorily using a display system whose transfer function =
can be=20
approximated by a power function with exponent =
<TT>display_exponent</TT>, the=20
image can be marked as having the gamma value:</P><PRE>gamma =3D =
1/display_exponent
</PRE><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<P>It is better to write a <A =
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
class=3Dchunk>gAMA</SPAN></A> chunk with a value that is approximately =
correct=20
than to omit the chunk and force PNG decoders to guess an approximate =
gamma. If=20
a PNG encoder is unable to infer the gamma value, it is preferable to =
omit the=20
<A href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A>=20
chunk. If a guess has to be made this should be left to the PNG =
decoder.</P>
<P>Gamma does not apply to alpha samples; alpha is always represented=20
linearly.</P>
<P>See also 13.13: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Decoder-gamma-handling"><SPAN=20
class=3Dxref>Decoder gamma handling</SPAN></A>.</P>
<H2><A name=3D12Encoder-colour-handling>12.3 Encoder colour =
handling</A></H2>
<P>See Annex C: <A =
href=3D"http://www.w3.org/TR/PNG/#C-GammaAppendix"><SPAN=20
class=3Dxref>Gamma and chromaticity</SPAN></A> for references to colour=20
issues.</P>
<P>PNG encoders capable of full colour management <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ICC"><SPAN =
class=3Dbibref>[ICC]</SPAN></A> will=20
perform more sophisticated calculations than those described here and =
may choose=20
to use the <A href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN=20
class=3Dchunk>iCCP</SPAN></A> chunk. If it is known that the image =
samples conform=20
to the sRGB specification <A=20
href=3D"http://www.w3.org/TR/PNG/#2-IEC-61966-2-1"><SPAN =
class=3DNormRef>[IEC=20
61966-2-1]</SPAN></A>, PNG encoders are strongly encouraged to use the =
<A=20
href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN =
class=3Dchunk>sRGB</SPAN></A>=20
chunk.</P>
<P>If it is possible for the encoder to determine the chromaticities of =
the=20
source display primaries, or to make a strong guess based on the origin =
of the=20
image, or the hardware running it, the encoder is strongly encouraged to =
output=20
the <A href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A>=20
chunk. If this is done, the <A =
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
class=3Dchunk>gAMA</SPAN></A> chunk should also be written; decoders can =
do little=20
with a <A href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
class=3Dchunk>cHRM</SPAN></A> chunk if the <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> chunk=20
is missing.</P>
<P>There are a number of recommendations and standards for primaries and =
white=20
points, some of which are linked to particular technologies, for example =
the=20
CCIR 709 standard <A =
href=3D"http://www.w3.org/TR/PNG/#G-ITU-R-BT709"><SPAN=20
class=3Dbibref>[ITU-R-BT709]</SPAN></A> and the SMPTE-C standard <A=20
href=3D"http://www.w3.org/TR/PNG/#G-SMPTE-170M"><SPAN=20
class=3Dbibref>[SMPTE-170M]</SPAN></A>.</P>
<P>There are three cases that need to be considered:</P>
<OL>
  <LI>the encoder is part of the generation system;=20
  <LI>the source image is captured by a camera or scanner;=20
  <LI>the PNG datastream was generated by translation from some other =
format.=20
  </LI></OL><!--  deleted - comment PDG 31<p>Scanners that produce PNG =
datastreams as output should insert
the filter chromaticities into a <a href=3D"#11cHRM"><span class=3D
"chunk">cHRM</span></a> chunk.</p>-->
<P>In the case of hand-drawn or digitally edited images, it is necessary =
to=20
determine what monitor they were viewed on when being produced. Many =
image=20
editing programs allow the type of monitor being used to be specified. =
This is=20
often because they are working in some device-independent space =
internally. Such=20
programs have enough information to write valid <A=20
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A>=20
chunks, and are strongly encouraged to do so automatically.</P>
<P>If the encoder is compiled as a portion of a computer image renderer =
that=20
performs full-spectral rendering, the monitor values that were used to =
convert=20
from the internal device-independent colour space to RGB should be =
written into=20
the <A href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A>=20
chunk. Any colours that are outside the gamut of the chosen RGB device =
should be=20
mapped to be within the gamut; PNG does not store out-of-gamut =
colours.</P>
<P>If the computer image renderer performs calculations directly in=20
device-dependent RGB space, a <A =
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
class=3Dchunk>cHRM</SPAN></A> chunk should not be written unless the =
scene=20
description and rendering parameters have been adjusted for a particular =

monitor. In that case, the data for that monitor should be used to =
construct a=20
<A href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A>=20
chunk.</P>
<P>A few image formats store calibration information, which can be used =
to fill=20
in the <A href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
class=3Dchunk>cHRM</SPAN></A> chunk. For example, TIFF 6.0 files <A=20
href=3D"http://www.w3.org/TR/PNG/#G-TIFF-6.0"><SPAN=20
class=3Dbibref>[TIFF-6.0]</SPAN></A> can optionally store calibration =
information,=20
which if present should be used to construct the <A=20
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A>=20
chunk.</P>
<P>Video created with recent video equipment probably uses the CCIR 709=20
primaries and D65 white point <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ITU-R-BT709"><SPAN=20
class=3Dbibref>[ITU-R-BT709]</SPAN></A>, which are given in <A=20
href=3D"http://www.w3.org/TR/PNG/#12-table121"><SPAN =
class=3Dtabref>Table=20
12.1</SPAN></A>.</P><!-- ************Page Break******************* =
--><!-- ************Page Break******************* -->
<TABLE class=3DRegular summary=3D"CCIR 709 primaries and D65 =
whitepoint">
  <CAPTION><A name=3D12-table121><B>Table 12.1 =E2=80=94 CCIR 709 =
primaries and D65=20
  whitepoint</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>&nbsp;</TH>
    <TH>R</TH>
    <TH>G</TH>
    <TH>B</TH>
    <TH>White</TH></TR>
  <TR>
    <TD class=3DRegular>x</TD>
    <TD class=3DRegular>0.640</TD>
    <TD class=3DRegular>0.300</TD>
    <TD class=3DRegular>0.150</TD>
    <TD class=3DRegular>0.3127</TD></TR>
  <TR>
    <TD class=3DRegular>y</TD>
    <TD class=3DRegular>0.330</TD>
    <TD class=3DRegular>0.600</TD>
    <TD class=3DRegular>0.060</TD>
    <TD class=3DRegular>0.3290</TD></TR></TBODY></TABLE>
<P>An older but still very popular video standard is SMPTE-C <A=20
href=3D"http://www.w3.org/TR/PNG/#G-SMPTE-170M"><SPAN=20
class=3Dbibref>[SMPTE-170M]</SPAN></A> given in <A=20
href=3D"http://www.w3.org/TR/PNG/#12-table122"><SPAN =
class=3Dtabref>Table=20
12.2</SPAN></A>.</P>
<TABLE class=3DRegular summary=3D"CSMPTE-C video standard">
  <CAPTION><A name=3D12-table122><B>Table 12.2 =E2=80=94 SMPTE-C video=20
  standard</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>&nbsp;</TH>
    <TH>R</TH>
    <TH>G</TH>
    <TH>B</TH>
    <TH>White</TH></TR>
  <TR>
    <TD class=3DRegular>x</TD>
    <TD class=3DRegular>0.630</TD>
    <TD class=3DRegular>0.310</TD>
    <TD class=3DRegular>0.155</TD>
    <TD class=3DRegular>0.3127</TD></TR>
  <TR>
    <TD class=3DRegular>y</TD>
    <TD class=3DRegular>0.340</TD>
    <TD class=3DRegular>0.595</TD>
    <TD class=3DRegular>0.070</TD>
    <TD class=3DRegular>0.3290</TD></TR></TBODY></TABLE>
<P>It is <STRONG>not</STRONG> recommended that datastream format =
converters=20
attempt to convert supplied images to a different RGB colour space. The =
data=20
should be stored in the PNG datastream without conversion, and the =
source=20
primary chromaticities should be recorded if they are known. Colour =
space=20
transformation at datastream conversion time is a bad idea because of =
gamut=20
mismatches and rounding errors. As with gamma conversions, it is better =
to store=20
the data losslessly and incur at most one conversion when the image is =
finally=20
displayed.</P>
<P>See also 13.14: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Decoder-colour-handling"><SPAN=20
class=3Dxref>Decoder colour handling</SPAN></A>.</P>
<H2><A name=3D12Alpha-channel-creation>12.4 Alpha channel =
creation</A></H2>
<P>The alpha channel can be regarded either as a mask that temporarily =
hides=20
transparent parts of the image, or as a means for constructing a =
non-rectangular=20
image. In the first case, the colour values of fully transparent pixels =
should=20
be preserved for future use. In the second case, the transparent pixels =
carry no=20
useful data and are simply there to fill out the rectangular image area =
required=20
by PNG. In this case, fully transparent pixels should all be assigned =
the same=20
colour value for best compression.</P>
<P>Image authors should keep in mind the possibility that a decoder will =
not=20
support transparency control in full (see 13.16: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Alpha-channel-processing"><SPAN=20
class=3Dxref>Alpha channel processing</SPAN></A>). Hence, the colours =
assigned to=20
transparent pixels should be reasonable background colours whenever=20
feasible.</P>
<P>For applications that do not require a full alpha channel, or cannot =
afford=20
the price in compression efficiency, the <A=20
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A>=20
transparency chunk is also available.</P>
<P>If the image has a known background colour, this colour should be =
written in=20
the <A href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A>=20
chunk. Even decoders that ignore transparency may use the <A=20
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A> colour=20
to fill unused screen area.</P>
<P>If the original image has premultiplied (also called "associated") =
alpha=20
data, it can be converted to PNG's non-premultiplied format by dividing =
each=20
sample value by the corresponding alpha value, then multiplying by the =
maximum=20
value for the image bit depth, and rounding to the nearest integer. In =
valid=20
premultiplied data, the sample values never exceed their corresponding =
alpha=20
values, so the result of the division should always be in the range 0 to =
1. If=20
the alpha value is zero, output black (zeroes).</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H2><A name=3D12Sample-depth-scaling>12.5 Sample depth scaling</A></H2>
<P>When encoding input samples that have a sample depth that cannot be =
directly=20
represented in PNG, the encoder shall scale the samples up to a sample =
depth=20
that is allowed by PNG. The most accurate scaling method is the linear=20
equation:</P><PRE>output =3D floor((input * MAXOUTSAMPLE / MAXINSAMPLE) =
+ 0.5)
</PRE>
<P>where the input samples range from 0 to <TT>MAXINSAMPLE</TT> and the =
outputs=20
range from 0 to <TT>MAXOUTSAMPLE</TT> (which is =
2<SUP>sampledepth</SUP>-1).</P>
<P>A close approximation to the linear scaling method is achieved by =
"left bit=20
replication", which is shifting the valid bits to begin in the most =
significant=20
bit and repeating the most significant bits into the open bits. This =
method is=20
often faster to compute than linear scaling.</P>
<P>EXAMPLE Assume that 5-bit samples are being scaled up to 8 bits. If =
the=20
source sample value is 27 (in the range from 0-31), then the original =
bits=20
are:</P><PRE>   4 3 2 1 0
   ---------
   1 1 0 1 1
</PRE>
<P>Left bit replication gives a value of 222:</P><PRE>   7 6 5 4 3  2 1 =
0
   ----------------
   1 1 0 1 1  1 1 0
   |=3D=3D=3D=3D=3D=3D=3D|  |=3D=3D=3D|
       |      Leftmost Bits Repeated to Fill Open Bits
       |
   Original Bits
</PRE>
<P>which matches the value computed by the linear equation. Left bit =
replication=20
usually gives the same value as linear scaling, and is never off by more =
than=20
one.</P>
<P>A distinctly less accurate approximation is obtained by simply =
left-shifting=20
the input value and filling the low order bits with zeroes. This scheme =
cannot=20
reproduce white exactly, since it does not generate an all-ones maximum =
value;=20
the net effect is to darken the image slightly. This method is not =
recommended=20
in general, but it does have the effect of improving compression, =
particularly=20
when dealing with greater-than-8-bit sample depths. Since the relative =
error=20
introduced by zero-fill scaling is small at high sample depths, some =
encoders=20
may choose to use it. Zero-fill shall <STRONG>not</STRONG> be used for =
alpha=20
channel data, however, since many decoders will treat alpha values of =
all zeroes=20
and all ones as special cases. It is important to represent both those =
values=20
exactly in the scaled data.</P>
<P>When the encoder writes an <A =
href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN=20
class=3Dchunk>sBIT</SPAN></A> chunk, it is required to do the scaling in =
such a=20
way that the high-order bits of the stored samples match the original =
data. That=20
is, if the <A href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN=20
class=3Dchunk>sBIT</SPAN></A> chunk specifies a sample depth of S, the =
high-order=20
S bits of the stored data shall agree with the original S-bit data =
values. This=20
allows decoders to recover the original data by shifting right. The =
added=20
low-order bits are not constrained. All the above scaling methods meet =
this=20
restriction.</P>
<P>When scaling up source image data, it is recommended that the =
low-order bits=20
be filled consistently for all samples; that is, the same source value =
should=20
generate the same sample value at any pixel position. This improves =
compression=20
by reducing the number of distinct sample values. This is not a =
mandatory=20
requirement, and some encoders may choose not to follow it. For example, =
an=20
encoder might instead dither the low-order bits, improving displayed =
image=20
quality at the price of increasing file size.</P>
<P>In some applications the original source data may have a range that =
is not a=20
power of 2. The linear scaling equation still works for this case, =
although the=20
shifting methods do not. It is recommended that an <A=20
href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN =
class=3Dchunk>sBIT</SPAN></A> chunk=20
not be written for such images, since <A=20
href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN =
class=3Dchunk>sBIT</SPAN></A>=20
suggests that the original data range was exactly =
0..2<SUP>S</SUP>-1.</P><!-- ************Page Break******************* =
--><!-- ************Page Break******************* -->
<H2><A name=3D12Suggested-palettes>12.6 Suggested palettes</A></H2>
<P>Suggested palettes may appear as <A=20
href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A> chunks=20
in any PNG datastream, or as a <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
class=3Dchunk>PLTE</SPAN></A> chunk in truecolour PNG datastreams. In =
either case,=20
the suggested palette is not an essential part of the image data, but it =
may be=20
used to present the image on indexed-colour display hardware. Suggested =
palettes=20
are of no interest to viewers running on truecolour hardware.</P>
<P>When an <A href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN=20
class=3Dchunk>sPLT</SPAN></A> chunk is used to provide a suggested =
palette, it is=20
recommended that the encoder use the frequency fields to indicate the =
relative=20
importance of the palette entries, rather than leave them all zero =
(meaning=20
undefined). The frequency values are most easily computed as "nearest =
neighbour"=20
counts, that is, the approximate usage of each RGBA palette entry if no=20
dithering is applied. (These counts will often be available "for free" =
as a=20
consequence of developing the suggested palette.) Because the suggested =
palette=20
includes transparency information, it should be computed for the =
uncomposited=20
image.</P>
<P>Even for indexed-colour images, <A=20
href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A> can be=20
used to define alternative reduced palettes for viewers that are unable =
to=20
display all the colours present in the <A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> chunk.=20
If the <A href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
class=3Dchunk>PLTE</SPAN></A> chunk appears without the <A=20
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A> chunk=20
in an image of colour type 6, the circumstances under which the palette =
was=20
computed are unspecified.</P>
<P>An older method for including a suggested palette in a truecolour PNG =

datastream uses the <A href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
class=3Dchunk>PLTE</SPAN></A> chunk. If this method is used, the =
histogram=20
(frequencies) should appear in a separate <A=20
href=3D"http://www.w3.org/TR/PNG/#11hIST"><SPAN =
class=3Dchunk>hIST</SPAN></A> chunk.=20
The <A href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A>=20
chunk does not include transparency information. Hence for images of =
colour type=20
6 (truecolour with alpha), it is recommended that a <A=20
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A> chunk=20
appear and that the palette and histogram be computed with reference to =
the=20
image as it would appear after compositing against the specified =
background=20
colour. This definition is necessary to ensure that useful palette =
entries are=20
generated for pixels having fractional alpha values. The resulting =
palette will=20
probably be useful only to viewers that present the image against the =
same=20
background colour. It is recommended that PNG editors delete or =
recompute the=20
palette if they alter or remove the <A=20
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A> chunk=20
in an image of colour type 6.</P>
<P>For images of colour type 2 (truecolour), it is recommended that the =
<A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11hIST"><SPAN =
class=3Dchunk>hIST</SPAN></A> chunks=20
be computed with reference to the RGB data only, ignoring any =
transparent-colour=20
specification. If the datastream uses transparency (has a <A=20
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A>=20
chunk), viewers can easily adapt the resulting palette for use with =
their=20
intended background colour (see 13.17: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Histogram-and-suggested-palette-usage=
"><SPAN=20
class=3Dxref>Histogram and suggested palette usage</SPAN></A>). </P>
<P>For providing suggested palettes, the <A=20
href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A> chunk=20
is more flexible than the <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
class=3Dchunk>PLTE</SPAN></A> chunk in the following ways:</P><!-- <ol =
start=3D"1"> -->
<OL>
  <LI>With <A href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN=20
  class=3Dchunk>sPLT</SPAN></A> multiple suggested palettes may be =
provided. A PNG=20
  decoder may choose an appropriate palette based on name or number of =
entries.=20
  <LI>In a PNG datastream of colour type 6 (truecolour with alpha =
channel), the=20
  <A href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A>=20
  chunk represents a palette already composited against the <A=20
  href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A>=20
  colour, so it is useful only for display against that background =
colour. The=20
  <A href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A>=20
  chunk provides an uncomposited palette, which is useful for display =
against=20
  backgrounds chosen by the PNG decoder.=20
  <LI>Since the <A href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN=20
  class=3Dchunk>sPLT</SPAN></A> chunk is an ancillary chunk, a PNG =
editor may add=20
  or modify suggested palettes without being forced to discard unknown=20
  unsafe-to-copy chunks.=20
  <LI>Whereas the <A href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN=20
  class=3Dchunk>sPLT</SPAN></A> chunk is allowed in PNG datastreams for =
colour=20
  types 0, 3, and 4 (greyscale and indexed), the <A=20
  href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A>=20
  chunk cannot be used to provide reduced palettes in these cases.=20
  <LI>More than 256 entries may appear in the <A=20
  href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A>=20
  chunk. </LI></OL>
<P>A PNG encoder that uses the <A =
href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN=20
class=3Dchunk>sPLT</SPAN></A> chunk may choose to write a suggested =
palette=20
represented by <A href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
class=3Dchunk>PLTE</SPAN></A> and <A =
href=3D"http://www.w3.org/TR/PNG/#11hIST"><SPAN=20
class=3Dchunk>hIST</SPAN></A> chunks as well, for compatibility with =
decoders that=20
do not recognize the <A href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN=20
class=3Dchunk>sPLT</SPAN></A> chunk.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H2><A name=3D12Interlacing>12.7 Interlacing</A></H2>
<P>This International Standard defines two interlace methods, one of =
which is no=20
interlacing. Interlacing provides a convenient basis from which decoders =
can=20
progressively display an image, as described in 13.8: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Progressive-display"><SPAN=20
class=3Dxref>Interlacing and progressive display</SPAN></A>.</P>
<H2><A name=3D12Filter-selection>12.8 Filter selection</A></H2>
<P>For images of colour type 3 (indexed-colour), filter type 0 (None) is =
usually=20
the most effective. Colour images with 256 or fewer colours should =
almost always=20
be stored in indexed-colour format; truecolour format is likely to be =
much=20
larger.</P>
<P>Filter type 0 is also recommended for images of bit depths less than =
8. For=20
low-bit-depth greyscale images, in rare cases, better compression may be =

obtained by first expanding the image to 8-bit representation and then =
applying=20
filtering.</P>
<P>For truecolour and greyscale images, any of the five filters may =
prove the=20
most effective. If an encoder uses a fixed filter, the Paeth filter is =
most=20
likely to be the best.</P>
<P>For best compression of truecolour and greyscale images, the =
recommended=20
approach is adaptive filtering in which a filter is chosen for each =
scanline.=20
The following simple heuristic has performed well in early tests: =
compute the=20
output scanline using all five filters, and select the filter that gives =
the=20
smallest sum of absolute values of outputs. (Consider the output bytes =
as signed=20
differences for this test.) This method usually outperforms any single =
fixed=20
filter choice. However, it is likely that better heuristics will be =
found as=20
more experience is gained with PNG.</P>
<P>Filtering according to these recommendations is effective in =
conjunction with=20
either of the two interlace methods defined in this International =
Standard.</P>
<H2><A name=3D12Compression>12.9 Compression</A></H2>
<P>The encoder may divide the compressed datastream into <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A> chunks=20
however it wishes. (Multiple <A =
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
class=3Dchunk>IDAT</SPAN></A> chunks are allowed so that encoders may =
work in a=20
fixed amount of memory; typically the chunk size will correspond to the=20
encoder's buffer size.) A PNG datastream in which each <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A> chunk=20
contains only one data byte is valid, though remarkably wasteful of =
space.=20
(Zero-length <A href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
class=3Dchunk>IDAT</SPAN></A> chunks are also valid, though even more=20
wasteful.)</P>
<H2><A name=3D12Text-chunk-processing>12.10 Text chunk =
processing</A></H2>
<P>A nonempty keyword shall be provided for each text chunk. The generic =
keyword=20
"Comment" can be used if no better description of the text is available. =
If a=20
user-supplied keyword is used, encoders should check that it meets the=20
restrictions on keywords.</P>
<P>For the <A href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN=20
class=3Dchunk>tEXt</SPAN></A> and <A =
href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN=20
class=3Dchunk>zTXt</SPAN></A> chunks, PNG text strings are expected to =
use the=20
Latin-1 character set. Encoders should avoid storing characters that are =
not=20
defined in Latin-1, and should provide character code remapping if the =
local=20
system's character set is not Latin-1. The <A=20
href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN =
class=3Dchunk>iTXt</SPAN></A> chunk=20
provides support for international text, represented using the UTF-8 =
encoding of=20
UCS. Encoders should discourage the creation of single lines of text =
longer than=20
79 characters, in order to facilitate easy reading. It is recommended =
that text=20
items less than 1024 bytes in size should be output using uncompressed =
text=20
chunks. It is recommended that the basic title and author keywords be =
output=20
using uncompressed text chunks. Placing large text chunks after the =
image data=20
(after the <A href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
class=3Dchunk>IDAT</SPAN></A> chunks) can speed up image display in some =

situations, as the decoder will decode the image data first. It is =
recommended=20
that small text chunks, such as the image title, appear before the <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
chunks.</P><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<H2><A name=3D12Chunk-processing>12.11 Chunking</A></H2>
<H3><A name=3D12Use-of-private-chunks>12.11.1 Use of private =
chunks</A></H3>
<P>Chunk types are classified as public or private depending on bit 5 of =
the=20
second byte (the private bit), and classified as critical or ancillary =
depending=20
on bit 5 of the first byte (the ancillary bit). See 5.4: <A=20
href=3D"http://www.w3.org/TR/PNG/#5Chunk-naming-conventions"><SPAN=20
class=3Dxref>Chunk naming conventions</SPAN></A>. </P>
<P>Applications can use PNG private chunks to carry information that =
need not be=20
understood by other applications. Such chunks shall be given private =
chunk=20
types, to ensure that they can never conflict with any future public =
chunk=20
definition. However, there is no guarantee that some other application =
will not=20
use the same private chunk type. If a private chunk type is used, it is =
prudent=20
to store additional identifying information at the beginning of the =
chunk=20
data.</P>
<P>An ancillary chunk type, not a critical chunk type, should be used =
for all=20
private chunks that store information that is not absolutely essential =
to view=20
the image. Creation of private critical chunks is discouraged because =
PNG=20
datastreams containing such chunks are not portable. Such chunks should =
not be=20
used in publicly available software or datastreams. If private critical =
chunks=20
are essential for an application, it is recommended that one appear near =
the=20
start of the datastream, so that a standard decoder need not read very =
far=20
before discovering that it cannot handle the datastream.</P>
<P>If other organizations need to understand a new chunk type, it should =
be=20
submitted to the Registration Authority (see 4.9: <A=20
href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration"><SPAN=20
class=3Dxref>Extension and registration</SPAN></A>). A proposed public =
chunk type=20
shall not be used in publicly available software or datastreams until=20
registration has been approved.</P>
<P>If an ancillary chunk contains textual information that might be of =
interest=20
to a human user, a special chunk type should not be defined for it. =
Instead a <A=20
href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN =
class=3Dchunk>tEXt</SPAN></A> chunk=20
should be used and a suitable keyword defined. The information will then =
be=20
available to other users.</P>
<P>Keywords in <A href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN=20
class=3Dchunk>tEXt</SPAN></A> chunks should be reasonably =
self-explanatory, since=20
the aim is to let other users understand what the chunk contains. If =
generally=20
useful, new keywords should be registered with the Registration =
Authority (see=20
4.9: <A href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration"><SPAN=20
class=3Dxref>Extension and registration</SPAN></A>). However, it is =
permissible to=20
use keywords without registering them first.</P>
<H3><A name=3D12Private-type-and-method-codes>12.11.2 Private type and =
method=20
codes</A></H3>
<P>This specification defines the meaning of only some of the possible =
values of=20
some fields. For example, only compression method 0 and filter types 0 =
through 4=20
are defined in this International Standard. Numbers greater than 127 =
shall be=20
used when inventing experimental or private definitions of values for =
any of=20
these fields. Numbers below 128 are reserved for possible public =
extensions of=20
this specification through future standardization (see 4.9 <A=20
href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration"><SPAN=20
class=3Dxref>Extension and registration</SPAN></A>). The use of private =
type codes=20
may render a datastream unreadable by standard decoders. Such codes are =
strongly=20
discouraged except for experimental purposes, and should not appear in =
publicly=20
available software or datastreams.</P>
<H3><A name=3D12Ancillary>12.11.3 Ancillary chunks</A></H3>
<P>All ancillary chunks are optional, encoders need not write them. =
However,=20
encoders are encouraged to write the standard ancillary chunks when the=20
information is available.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H1><A name=3D13Decoders>13 PNG decoders and viewers</A></H1>
<H2><A name=3D13Introduction>13.1 Introduction</A></H2>
<P>This clause gives some requirements and recommendations for PNG =
decoder=20
behaviour and viewer behaviour. A viewer presents the decoded PNG image =
to the=20
user. Since viewer and decoder behaviour are closely connected, decoders =
and=20
viewers are treated together here. The only absolute requirement on a =
PNG=20
decoder is that it successfully reads any datastream conforming to the =
format=20
specified in the preceding chapters. However, best results will usually =
be=20
achieved by following these additional recommendations.</P>
<P>PNG decoders shall support all valid combinations of bit depth, =
colour type,=20
compression method, filter method, and interlace method that are =
explicitly=20
defined in this International Standard.</P>
<P>All ancillary chunks are optional; decoders may ignore them. However, =

decoders are encouraged to interpret these chunks when appropriate and=20
feasible.</P>
<H2><A name=3D13Decoders.Errors>13.2 Error handling</A></H2>
<P>Errors in a PNG datastream will fall into two general classes, =
transmission=20
errors and syntax errors (see <A=20
href=3D"http://www.w3.org/TR/PNG/#4Concepts.Errors"><SPAN =
class=3Dxref>4.8 Error=20
handling</SPAN></A>).</P>
<P>Examples of transmission errors are transmission in "text" or "ascii" =
mode,=20
in which byte codes 13 and/or 10 may be added, removed, or converted =
throughout=20
the datastream; unexpected termination, in which the datastream is =
truncated; or=20
a physical error on a storage device, in which one or more blocks =
(typically 512=20
bytes each) will have garbled or random values. Some examples of syntax =
errors=20
are an invalid value for a row filter, an invalid compression method, an =
invalid=20
chunk length, the absence of a <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
class=3Dchunk>PLTE</SPAN></A> chunk before the first <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A> chunk=20
in an indexed image, or the presence of multiple <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A>=20
chunks. A PNG decoder should handle errors as follows:</P><!-- <ol =
start=3D"1"> -->
<OL>
  <LI>Detect errors as early as possible using the PNG signature bytes =
and CRCs=20
  on each chunk. Decoders should verify that all eight bytes of the PNG=20
  signature are correct. A decoder can have additional confidence in the =

  datastream's integrity if the next eight bytes begin an <A=20
  href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A>=20
  chunk with the correct chunk length. A CRC should be checked before =
processing=20
  the chunk data. Sometimes this is impractical, for example when a =
streaming=20
  PNG decoder is processing a large <A=20
  href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
  chunk. In this case the CRC should be checked when the end of the =
chunk is=20
  reached.=20
  <LI>Recover from an error, if possible; otherwise fail gracefully. =
Errors that=20
  have little or no effect on the processing of the image may be =
ignored, while=20
  those that affect critical data shall be dealt with in a manner =
appropriate to=20
  the application.=20
  <LI>Provide helpful messages describing errors, including recoverable =
errors.=20
  </LI></OL>
<P>Three classes of PNG chunks are relevant to this philosophy. For the =
purposes=20
of this classification, an "unknown chunk" is either one whose type was=20
genuinely unknown to the decoder's author, or one that the author chose =
to treat=20
as unknown, because default handling of that chunk type would be =
sufficient for=20
the program's purposes. Other chunks are called "known chunks". Given =
this=20
definition, the three classes are as follows:</P><!-- <ol start=3D"4"> =
-->
<OL>
  <LI>known chunks, which necessarily includes all of the critical =
chunks=20
  defined in this International Standard (<A=20
  href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A>, <A=20
  href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A>, <A=20
  href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>, <A=20
  href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN =
class=3Dchunk>IEND</SPAN></A>)=20
  <LI>unknown critical chunks (bit 5 of the first byte of the chunk type =
is 0)=20
  <LI>unknown ancillary chunks (bit 5 of the first byte of the chunk =
type is 1)=20
  </LI></OL>
<P>See 5.4: <A =
href=3D"http://www.w3.org/TR/PNG/#5Chunk-naming-conventions"><SPAN=20
class=3Dxref>Chunk naming conventions</SPAN></A> for a full description =
of chunk=20
naming conventions.</P><!-- ************Page Break******************* =
--><!-- ************Page Break******************* -->
<P>PNG chunk types are marked "critical" or "ancillary" according to =
whether the=20
chunks are critical for the purpose of extracting a viewable image (as =
with <A=20
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A>, and=20
<A href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>) or=20
critical to understanding the datastream structure (as with <A=20
href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN =
class=3Dchunk>IEND</SPAN></A>). This=20
is a specific kind of criticality and one that is not necessarily =
relevant to=20
every conceivable decoder. For example, a program whose sole purpose is =
to=20
extract text annotations (for example, copyright information) does not =
require a=20
viewable image. Another decoder might consider the <A=20
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> chunks=20
essential to its proper execution.</P>
<P>Syntax errors always involve known chunks because syntax errors in =
unknown=20
chunks cannot be detected. The PNG decoder has to determine whether a =
syntax=20
error is fatal (unrecoverable) or not, depending on its requirements and =
the=20
situation. For example, most decoders can ignore an invalid <A=20
href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN =
class=3Dchunk>IEND</SPAN></A> chunk;=20
a text-extraction program can ignore the absence of <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>; an=20
image viewer cannot recover from an empty <A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> chunk=20
in an indexed image but it can ignore an invalid <A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> chunk=20
in a truecolour image; and a program that extracts the alpha channel can =
ignore=20
an invalid <A href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
class=3Dchunk>gAMA</SPAN></A> chunk, but may consider the presence of =
two <A=20
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A> chunks=20
to be a fatal error. Anomalous situations other than syntax errors shall =
be=20
treated as follows:</P><!-- <ol start=3D"7"> -->
<OL>
  <LI>Encountering an unknown ancillary chunk is never an error. The =
chunk can=20
  simply be ignored.=20
  <LI>Encountering an unknown critical chunk is a fatal condition for =
any=20
  decoder trying to extract the image from the datastream. A decoder =
that=20
  ignored a critical chunk could not know whether the image it extracted =
was the=20
  one intended by the encoder.=20
  <LI>A PNG signature mismatch, a CRC mismatch, or an unexpected =
end-of-stream=20
  indicates a corrupted datastream, and may be regarded as a fatal =
error. A=20
  decoder could try to salvage something from the datastream, but the =
extent of=20
  the damage will not be known. </LI></OL>
<P>When a fatal condition occurs, the decoder should fail immediately, =
signal an=20
error to the user if appropriate, and optionally continue displaying any =
image=20
data already visible to the user (i.e. "fail gracefully"). The =
application as a=20
whole need not terminate.</P>
<P>When a non-fatal error occurs, the decoder should signal a warning to =
the=20
user if appropriate, recover from the error, and continue processing=20
normally.</P>
<P>Decoders that do not compute CRCs should interpret apparent syntax =
errors as=20
indications of corruption (see also 13.3: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Error-checking"><SPAN =
class=3Dxref>Error=20
checking</SPAN></A>).</P>
<P>Errors in compressed chunks (<A =
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
class=3Dchunk>IDAT</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN=20
class=3Dchunk>zTXt</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN=20
class=3Dchunk>iTXt</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN=20
class=3Dchunk>iCCP</SPAN></A>) could lead to buffer overruns. =
Implementors of=20
deflate decompressors should guard against this possibility.</P>
<H2><A name=3D13Error-checking>13.3 Error checking</A></H2>
<P>The PNG error handling philosophy is described in 13.2: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Decoders.Errors"><SPAN =
class=3Dxref>Error=20
handling</SPAN></A>.</P>
<P>Unknown chunk types shall be handled as described in 5.4: <A=20
href=3D"http://www.w3.org/TR/PNG/#5Chunk-naming-conventions"><SPAN=20
class=3Dxref>Chunk naming conventions</SPAN></A>. An unknown chunk type =
is=20
<STRONG>not</STRONG> to be treated as an error unless it is a critical=20
chunk.</P>
<P>The chunk type can be checked for plausibility by seeing whether all =
four=20
bytes are in the range codes 65-90 and 97-122 (decimal); note that this =
need be=20
done only for unrecognized chunk types. If the total datastream size is =
known=20
(from file system information, HTTP protocol, etc), the chunk length can =
be=20
checked for plausibility as well. If CRCs are not checked, dropped/added =
data=20
bytes or an erroneous chunk length can cause the decoder to get out of =
step and=20
misinterpret subsequent data as a chunk header.</P>
<P>For known-length chunks, such as <A=20
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A>,=20
decoders should treat an unexpected chunk length as an error. Future =
extensions=20
to this specification will not add new fields to existing chunks; =
instead, new=20
chunk types will be added to carry new information.</P>
<P>Unexpected values in fields of known chunks (for example, an =
unexpected=20
compression method in the <A =
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN=20
class=3Dchunk>IHDR</SPAN></A> chunk) shall be checked for and treated as =
errors.=20
However, it is recommended that unexpected field values be treated as =
fatal=20
errors only in <STRONG>critical</STRONG> chunks. An unexpected value in =
an=20
ancillary chunk can be handled by ignoring the whole chunk as though it =
were an=20
unknown chunk type. (This recommendation assumes that the chunk's CRC =
has been=20
verified. In decoders that do not check CRCs, it is safer to treat any=20
unexpected value as indicating a corrupted datastream.)</P>
<P>Standard PNG images shall be compressed with compression method 0. =
The=20
compression method field of the <A =
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN=20
class=3Dchunk>IHDR</SPAN></A> chunk is provided for possible future=20
standardization or proprietary variants. Decoders shall check this byte =
and=20
report an error if it holds an unrecognized code. See clause&nbsp;10: <A =

href=3D"http://www.w3.org/TR/PNG/#10Compression"><SPAN=20
class=3Dxref>Compression</SPAN></A> for details.</P>
<H2><A name=3D13Security-considerations>13.4 Security =
considerations</A></H2>
<P>A PNG datastream is composed of a collection of explicitly typed =
chunks.=20
Chunks whose contents are defined by the specification could actually =
contain=20
anything, including malicious code. But there is no known risk that such =

malicious code could be executed on the recipient's computer as a result =
of=20
decoding the PNG image.</P>
<P>The possible security risks associated with future chunk types cannot =
be=20
specified at this time. Security issues will be considered by the =
Registration=20
Authority when evaluating chunks proposed for registration as public =
chunks.=20
There is no additional security risk associated with unknown or =
unimplemented=20
chunk types, because such chunks will be ignored, or at most be copied =
into=20
another PNG datastream.</P>
<P>The <A href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN=20
class=3Dchunk>iTXt</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN=20
class=3Dchunk>tEXt</SPAN></A>, and <A=20
href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN =
class=3Dchunk>zTXt</SPAN></A> chunks=20
contain keywords and data that are meant to be displayed as plain text. =
The <A=20
href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN =
class=3Dchunk>iCCP</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A> chunks=20
contain keywords that are meant to be displayed as plain text. It is =
possible=20
that if the decoder displays such text without filtering out control =
characters,=20
especially the ESC (escape) character, certain systems or terminals =
could behave=20
in undesirable and insecure ways. It is recommended that decoders filter =
out=20
control characters to avoid this risk; see 13.5.3: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Text-chunk-processing"><SPAN =
class=3Dxref>Text=20
chunk processing</SPAN></A>.</P>
<P>Every chunk begins with a length field, which makes it easier to =
write=20
decoders that are invulnerable to fraudulent chunks that attempt to =
overflow=20
buffers. The CRC at the end of every chunk provides a robust defence =
against=20
accidentally corrupted data. The PNG signature bytes provide early =
detection of=20
common file transmission errors.</P>
<P>A decoder that fails to check CRCs could be subject to data =
corruption. The=20
only likely consequence of such corruption is incorrectly displayed =
pixels=20
within the image. Worse things might happen if the CRC of the <A=20
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A> chunk=20
is not checked and the width or height fields are corrupted. See 13.3: =
<A=20
href=3D"http://www.w3.org/TR/PNG/#13Error-checking"><SPAN =
class=3Dxref>Error=20
checking</SPAN></A>.</P>
<P>A poorly written decoder might be subject to buffer overflow, because =
chunks=20
can be extremely large, up to 2<SUP>31</SUP>-1 bytes long. But properly =
written=20
decoders will handle large chunks without difficulty.</P>
<H2><A name=3D13Chunking>13.5 Chunking</A></H2>
<P>Decoders shall recognize chunk types by a simple four-byte literal=20
comparison; it is incorrect to perform case conversion on chunk types. A =
decoder=20
encountering an unknown chunk in which the ancillary bit is 1 may safely =
ignore=20
the chunk and proceed to display the image. A decoder trying to extract =
the=20
image, upon encountering an unknown chunk in which the ancillary bit is =
0,=20
indicating a critical chunk, shall indicate to the user that the image =
contains=20
information it cannot safely interpret.</P>
<P>(Decoders should not flag an error if the reserved bit is set to 1, =
however,=20
as some future version of the PNG specification could define a meaning =
for this=20
bit. It is sufficient to treat a chunk with this bit set in the same way =
as any=20
other unknown chunk type.)</P>
<H2><A name=3D13Pixel-dimensions>13.6 Pixel dimensions</A></H2>
<P>Non-square pixels can be represented (see 11.3.5.3: <A=20
href=3D"http://www.w3.org/TR/PNG/#11pHYs"><SPAN class=3Dxref><SPAN=20
class=3Dchunk>pHYs</SPAN> Physical pixel dimensions</SPAN></A>), but =
viewers are=20
not required to account for them; a viewer can present any PNG =
datastream as=20
though its pixels are square.</P>
<P>Where the pixel aspect ratio of the display differs from the aspect =
ratio of=20
the physical pixel dimensions defined in the PNG datastream, viewers are =

strongly encouraged to rescale images for proper display.</P>
<P>When the <A href=3D"http://www.w3.org/TR/PNG/#11pHYs"><SPAN =
class=3Dxref><SPAN=20
class=3Dchunk>pHYs</SPAN></SPAN></A> chunk has a unit specifier of 0 =
(unit is=20
unknown), the behaviour of a decoder may depend on the ratio of the two=20
pixels-per-unit values, but should not depend on their magnitudes. For =
example,=20
a <A href=3D"http://www.w3.org/TR/PNG/#11pHYs"><SPAN class=3Dxref><SPAN=20
class=3Dchunk>pHYs</SPAN></SPAN></A> chunk containing <TT>(ppuX, ppuY, =
unit) =3D (2,=20
1, 0)</TT> is equivalent to one containing <TT>(1000, 500, 0)</TT>; both =
are=20
equally valid indications that the image pixels are twice as tall as =
they are=20
wide.</P>
<P>One reasonable way for viewers to handle a difference between the =
pixel=20
aspect ratios of the image and the display is to expand the image either =

horizontally or vertically, but not both. The scale factors could be =
obtained=20
using the following floating-point calculations:</P><PRE><TT>image_ratio =
=3D pHYs_ppuY / pHYs_ppuX
display_ratio =3D display_ppuY / display_ppuX
scale_factor_X =3D max(1.0, image_ratio/display_ratio)
scale_factor_Y =3D max(1.0, display_ratio/image_ratio)</TT>
</PRE>
<P>Because other methods such as maintaining the image area are also =
reasonable,=20
and because ignoring the <A =
href=3D"http://www.w3.org/TR/PNG/#11pHYs"><SPAN=20
class=3Dxref><SPAN class=3Dchunk>pHYs</SPAN></SPAN></A> chunk is =
permissible,=20
authors should not assume that all viewing applications will use this =
scaling=20
method.</P>
<P>As well as making corrections for pixel aspect ratio, a viewer may =
have=20
reasons to perform additional scaling both horizontally and vertically. =
For=20
example, a viewer might want to shrink an image that is too large to fit =
on the=20
display, or to expand images sent to a high-resolution printer so that =
they=20
appear the same size as they did on the display.</P>
<H2><A name=3D13Text-chunk-processing>13.7 Text chunk =
processing</A></H2>
<P>If practical, PNG decoders should have a way to display to the user =
all the=20
<A href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN =
class=3Dchunk>iTXt</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN =
class=3Dchunk>tEXt</SPAN></A>, and=20
<A href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN =
class=3Dchunk>zTXt</SPAN></A>=20
chunks found in the datastream. Even if the decoder does not recognize a =

particular text keyword, the user might be able to understand it.</P>
<P>When processing <A href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN=20
class=3Dchunk>tEXt</SPAN></A> and <A =
href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN=20
class=3Dchunk>zTXt</SPAN></A> chunks, decoders could encounter =
characters other=20
than those permitted. Some can be safely displayed (e.g., TAB, FF, and =
CR,=20
decimal 9, 12, and 13, respectively), but others, especially the ESC =
character=20
(decimal 27), could pose a security hazard (because unexpected actions =
may be=20
taken by display hardware or software). Decoders should not attempt to =
directly=20
display any non-Latin-1 characters (except for newline and perhaps TAB, =
FF, CR)=20
encountered in a <A href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN=20
class=3Dchunk>tEXt</SPAN></A> or <A =
href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN=20
class=3Dchunk>zTXt</SPAN></A> chunk. Instead, they should be ignored or =
displayed=20
in a visible notation such as "<TT>\</TT>nnn". See 13.4: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Security-considerations"><SPAN=20
class=3Dxref>Security considerations</SPAN></A>.</P>
<P>Even though encoders are recommended to represent newlines as =
linefeed=20
(decimal 10), it is recommended that decoders not rely on this; it is =
best to=20
recognize all the common newline combinations (CR, LF, and CR-LF) and =
display=20
each as a single newline. TAB can be expanded to the proper number of =
spaces=20
needed to arrive at a column multiple of 8.</P>
<P>Decoders running on systems with non-Latin-1 character set encoding =
should=20
provide character code remapping so that Latin-1 characters are =
displayed=20
correctly. Some systems may not provide all the characters defined in =
Latin-1.=20
Mapping unavailable characters to a visible notation such as =
"<TT>\</TT>nnn" is=20
a good fallback. Character codes 127-255 should be displayed only if =
they are=20
printable characters on the decoding system. Some systems may interpret =
such=20
codes as control characters; for security, decoders running on such =
systems=20
should not display such characters literally.</P>
<P>Decoders should be prepared to display text chunks that contain any =
number of=20
printing characters between newline characters, even though it is =
recommended=20
that encoders avoid creating lines in excess of 79 characters.</P>
<H2><A name=3D13Decompression>13.8 Decompression</A></H2>
<P>The compression technique used in this International Standard does =
not=20
require the entire compressed datastream to be available before =
decompression=20
can start. Display can therefore commence before the entire decompressed =

datastream is available. It is extremely unlikely that any general =
purpose=20
compression methods in future versions of this International Standard =
will not=20
have this property.</P>
<P>It is important to emphasize that <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A> chunk=20
boundaries have no semantic significance and can occur at any point in =
the=20
compressed datastream. There is no required correlation between the =
structure of=20
the image data (for example, scanline boundaries) and deflate block =
boundaries=20
or <A href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
chunk boundaries. The complete image data is represented by a single =
zlib=20
datastream that is stored in some number of <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
chunks; a decoder that assumes any more than this is incorrect. Some =
encoder=20
implementations may emit datastreams in which some of these structures =
are=20
indeed related, but decoders cannot rely on this.</P>
<H2><A name=3D13Filtering>13.9 Filtering</A></H2>
<P>To reverse the effect of a filter, the decoder may need to use the =
decoded=20
values of the prior pixel on the same line, the pixel immediately above =
the=20
current pixel on the prior line, and the pixel just to the left of the =
pixel=20
above. This implies that at least one scanline's worth of image data =
needs to be=20
stored by the decoder at all times. Even though some filter types do not =
refer=20
to the prior scanline, the decoder will always need to store each =
scanline as it=20
is decoded, since the next scanline might use a filter type that refers =
to=20
it.</P>
<H2><A name=3D13Progressive-display>13.10 Interlacing and progressive=20
display</A></H2>
<P>Decoders are required to be able to read interlaced images. If the =
reference=20
image contains fewer than five columns or fewer than five rows, some =
passes will=20
be empty. Encoders and decoders shall handle this case correctly. In =
particular,=20
filter type bytes are associated only with nonempty scanlines; no filter =
type=20
bytes are present in an empty reduced image.</P>
<P>When receiving images over slow transmission links, viewers can =
improve=20
perceived performance by displaying interlaced images progressively. =
This means=20
that as each reduced image is received, an approximation to the complete =
image=20
is displayed based on the data received so far. One simple yet pleasing =
effect=20
can be obtained by expanding each received pixel to fill a rectangle =
covering=20
the yet-to-be-transmitted pixel positions below and to the right of the =
received=20
pixel. This process can be described by the following ISO C code <A=20
href=3D"http://www.w3.org/TR/PNG/#2-ISO-9899"><SPAN=20
class=3DNormRef>[ISO-9899]</SPAN></A>:</P><PRE>/*
    variables declared and initialized elsewhere in the code:
        height, width
    functions or macros defined elsewhere in the code:
        visit(), min()
 */

int starting_row[7]  =3D { 0, 0, 4, 0, 2, 0, 1 };
int starting_col[7]  =3D { 0, 4, 0, 2, 0, 1, 0 };
int row_increment[7] =3D { 8, 8, 8, 4, 4, 2, 2 };
int col_increment[7] =3D { 8, 8, 4, 4, 2, 2, 1 };
int block_height[7]  =3D { 8, 8, 4, 4, 2, 2, 1 };
int block_width[7]   =3D { 8, 4, 4, 2, 2, 1, 1 };

int pass;
long row, col;
  =20
pass =3D 0;
while (pass &lt; 7)
{
    row =3D starting_row[pass];
    while (row &lt; height)
    {
        col =3D starting_col[pass];
        while (col &lt; width)
        {
            visit(row, col,
                  min(block_height[pass], height - row),
                  min(block_width[pass], width - col));
            col =3D col + col_increment[pass];
        }
        row =3D row + row_increment[pass];
    }
    pass =3D pass + 1;
}
</PRE>
<P>The function <TT>visit(row,column,height,width)</TT> obtains the next =

transmitted pixel and paints a rectangle of the specified height and =
width,=20
whose upper-left corner is at the specified row and column, using the =
colour=20
indicated by the pixel. Note that row and column are measured from 0,0 =
at the=20
upper left corner.</P>
<P>If the viewer is merging the received image with a background image, =
it may=20
be more convenient just to paint the received pixel positions (the=20
<TT>visit()</TT> function sets only the pixel at the specified row and =
column,=20
not the whole rectangle). This produces a "fade-in" effect as the new =
image=20
gradually replaces the old. An advantage of this approach is that proper =
alpha=20
or transparency processing can be done as each pixel is replaced. =
Painting a=20
rectangle as described above will overwrite background-image pixels that =
may be=20
needed later, if the pixels eventually received for those positions turn =
out to=20
be wholly or partially transparent. This is a problem only if the =
background=20
image is not stored anywhere offscreen.</P>
<H2><A name=3D13Truecolour-image-handling>13.11 Truecolour image =
handling</A></H2>
<P>To achieve PNG's goal of universal interchangeability, decoders shall =
accept=20
all types of PNG image: indexed-colour, truecolour, and greyscale. =
Viewers=20
running on indexed-colour display hardware need to be able to reduce =
truecolour=20
images to indexed-colour for viewing. This process is called "colour=20
quantization".</P>
<P>A simple, fast method for colour quantization is to reduce the image =
to a=20
fixed palette. Palettes with uniform colour spacing ("colour cubes") are =
usually=20
used to minimize the per-pixel computation. For photograph-like images,=20
dithering is recommended to avoid ugly contours in what should be smooth =

gradients; however, dithering introduces graininess that can be=20
objectionable.</P>
<P>The quality of rendering can be improved substantially by using a =
palette=20
chosen specifically for the image, since a colour cube usually has =
numerous=20
entries that are unused in any particular image. This approach requires =
more=20
work, first in choosing the palette, and second in mapping individual =
pixels to=20
the closest available colour. PNG allows the encoder to supply suggested =

palettes, but not all encoders will do so, and the suggested palettes =
may be=20
unsuitable in any case (they may have too many or too few colours). =
Therefore,=20
high-quality viewers will need to have a palette selection routine at =
hand. A=20
large lookup table is usually the most feasible way of mapping =
individual pixels=20
to palette entries with adequate speed.</P>
<P>Numerous implementations of colour quantization are available. The =
PNG sample=20
implementation, libpng (<A=20
href=3D"http://www.libpng.org/pub/png/libpng.html"><CODE>http://www.libpn=
g.org/pub/png/libpng.html</CODE></A>),=20
includes code for the purpose.</P>
<H2><A name=3D13Sample-depth-rescaling>13.12 Sample depth =
rescaling</A></H2>
<P>Decoders may wish to scale PNG data to a lesser sample depth (data =
precision)=20
for display. For example, 16-bit data will need to be reduced to 8-bit =
depth for=20
use on most present-day display hardware. Reduction of 8-bit data to =
5-bit depth=20
is also common.</P>
<P>The most accurate scaling is achieved by the linear equation</P>
<P><TT>output =3D floor((input * MAXOUTSAMPLE / MAXINSAMPLE) + =
0.5)</TT></P>
<P>where</P>
<P><TT>MAXINSAMPLE =3D (2<SUP>sampledepth</SUP>)-1</TT><BR=20
class=3Dxhtml><TT>MAXOUTSAMPLE =3D =
(2<SUP>desired_sampledepth</SUP>)-1</TT></P>
<P>A slightly less accurate conversion is achieved by simply shifting =
right by=20
<TT>(sampledepth - desired_sampledepth)</TT> places. For example, to =
reduce=20
16-bit samples to 8-bit, the low-order byte can be discarded. In many =
situations=20
the shift method is sufficiently accurate for display purposes, and it =
is=20
certainly much faster. (But if gamma correction is being done, sample =
rescaling=20
can be merged into the gamma correction lookup table, as is illustrated =
in=20
13.13: <A =
href=3D"http://www.w3.org/TR/PNG/#13Decoder-gamma-handling"><SPAN=20
class=3Dxref>Decoder gamma handling</SPAN></A>.)</P>
<P>If the decoder needs to scale samples up (for example, if the frame =
buffer=20
has a greater sample depth than the PNG image), it should use linear =
scaling or=20
left-bit-replication as described in 12.5: <A=20
href=3D"http://www.w3.org/TR/PNG/#12Sample-depth-scaling"><SPAN =
class=3Dxref>Sample=20
depth scaling</SPAN></A>.</P>
<P>When an <A href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN=20
class=3Dchunk>sBIT</SPAN></A> chunk is present, the reference image data =
can be=20
recovered by shifting right to the sample depth specified by <A=20
href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN =
class=3Dchunk>sBIT</SPAN></A>. Note=20
that linear scaling will not necessarily reproduce the original data, =
because=20
the encoder is not required to have used linear scaling to scale the =
data up.=20
However, the encoder is required to have used a method that preserves =
the=20
high-order bits, so shifting always works. This is the only case in =
which=20
shifting might be said to be more accurate than linear scaling. A =
decoder need=20
not pay attention to the <A =
href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN=20
class=3Dchunk>sBIT</SPAN></A> chunk; the stored image is a valid PNG =
datastream of=20
the sample depth indicated by the <A=20
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A> chunk;=20
however, using <A href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN=20
class=3Dchunk>sBIT</SPAN></A> to recover the original samples before =
scaling them=20
to suit the display often yields a more accurate display than ignoring =
<A=20
href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN =
class=3Dchunk>sBIT</SPAN></A>.</P>
<P>When comparing pixel values to <A=20
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A> chunk=20
values to detect transparent pixels, the comparison shall be done =
exactly.=20
Therefore, transparent pixel detection shall be done before reducing =
sample=20
precision.</P>
<H2><A name=3D13Decoder-gamma-handling>13.13 Decoder gamma =
handling</A></H2>
<P>See Annex C: <A =
href=3D"http://www.w3.org/TR/PNG/#C-GammaAppendix"><SPAN=20
class=3Dxref>Gamma and chromaticity</SPAN></A> for a brief introduction =
to gamma=20
issues.</P>
<P>Viewers capable of full colour management <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ICC"><SPAN =
class=3Dbibref>[ICC]</SPAN></A> will=20
perform more sophisticated calculations than those described here.</P>
<P>For an image display program to produce correct tone reproduction, it =
is=20
necessary to take into account the relationship between samples and =
display=20
output, and the transfer function of the display system. This can be =
done by=20
calculating:</P>
<P><TT>sample =3D integer_sample / (2<SUP>sampledepth</SUP> - 1.0)<BR=20
class=3Dxhtml>display_output =3D sample<SUP>1.0/gamma</SUP><BR=20
class=3Dxhtml>display_input =3D =
inverse_display_transfer(display_output)<BR=20
class=3Dxhtml>framebuf_sample =3D floor((display_input *=20
MAX_FRAMEBUF_SAMPLE)+0.5)</TT></P>
<P>where <TT>integer_sample</TT> is the sample value from the =
datastream,=20
<TT>framebuf_sample</TT> is the value to write into the frame buffer, =
and=20
<TT>MAX_FRAMEBUF_SAMPLE</TT> is the maximum value of a frame buffer =
sample (255=20
for 8-bit, 31 for 5-bit, etc). The first line converts an integer sample =
into a=20
normalized floating point value (in the range 0.0 to 1.0), the second =
converts=20
to a value proportional to the desired display output intensity, the =
third=20
accounts for the display system's transfer function, and the fourth =
converts to=20
an integer frame buffer sample. Zero raised to any positive power is =
zero.</P>
<P>A step could be inserted between the second and third to adjust=20
<TT>display_output</TT> to account for the difference between the actual =
viewing=20
conditions and the reference viewing conditions. However, this =
adjustment=20
requires accounting for veiling glare, black mapping, and colour =
appearance=20
models, none of which can be well approximated by power functions. Such=20
calculations are not described here. If viewing conditions are ignored, =
the=20
error will usually be small.</P>
<P>The display transfer function can typically be approximated by a =
power=20
function with exponent <TT>display_exponent</TT>, in which case the =
second and=20
third lines can be merged into:</P>
<P><TT>display_input =3D sample<SUP>1.0/(gamma * display_exponent)</SUP> =
=3D=20
sample<SUP>decoding_exponent</SUP></TT></P>
<P>so as to perform only one power calculation. For colour images, the =
entire=20
calculation is performed separately for R, G, and B values.</P>
<P>The value of gamma can be taken directly from the <A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A> chunk.=20
Alternatively, an application may wish to allow the user to adjust the=20
appearance of the displayed image by influencing the value of gamma. For =

example, the user could manually set a parameter <TT>user_exponent</TT> =
which=20
defaults to 1.0, and the application could set:</P><PRE><TT>gamma =3D =
gamma_from_file / user_exponent
decoding_exponent =3D 1.0 / (gamma * display_exponent)
   =3D user_exponent / (gamma_from_file * display_exponent)</TT>
</PRE>
<P>The user would set <TT>user_exponent</TT> greater than 1 to darken =
the=20
mid-level tones, or less than 1 to lighten them.</P>
<P>A <A href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
class=3Dchunk>gAMA</SPAN></A> chunk containing zero is meaningless but =
could=20
appear by mistake. Decoders should ignore it, and editors may discard it =
and=20
issue a warning to the user.</P>
<P>It is <STRONG>not</STRONG> necessary to perform a transcendental =
mathematical=20
computation for every pixel. Instead, a lookup table can be computed =
that gives=20
the correct output value for every possible sample value. This requires =
only 256=20
calculations per image (for 8-bit accuracy), not one or three =
calculations per=20
pixel. For an indexed-colour image, a one-time correction of the palette =
is=20
sufficient, unless the image uses transparency and is being displayed =
against a=20
nonuniform background.</P>
<P>If floating-point calculations are not possible, gamma correction =
tables can=20
be computed using integer arithmetic and a precomputed table of =
logarithms.=20
Example code appears in <A=20
href=3D"http://www.w3.org/TR/PNG/#G-PNG-EXTENSIONS"><SPAN=20
class=3Dbibref>[PNG-EXTENSIONS]</SPAN></A>.</P>
<P>When the incoming image has unknown gamma (<A=20
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN =
class=3Dchunk>gAMA</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN =
class=3Dchunk>sRGB</SPAN></A>, and=20
<A href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN =
class=3Dchunk>iCCP</SPAN></A> all=20
absent), choose a likely default gamma value, but allow the user to =
select a new=20
one if the result proves too dark or too light. The default gamma may =
depend on=20
other knowledge about the image, for example whether it came from the =
Internet=20
or from the local system.</P>
<P>In practice, it is often difficult to determine what value of display =

exponent should be used. In systems with no built-in gamma correction, =
the=20
display exponent is determined entirely by the CRT. A display exponent =
of 2.2=20
should be used unless detailed calibration measurements are available =
for the=20
particular CRT used.</P>
<P>Many modern frame buffers have lookup tables that are used to perform =
gamma=20
correction, and on these systems the display exponent value should be =
the=20
exponent of the lookup table and CRT combined. It may not be possible to =
find=20
out what the lookup table contains from within the viewer application, =
in which=20
case it may be necessary to ask the user to supply the display system's =
exponent=20
value. Unfortunately, different manufacturers use different ways of =
specifying=20
what should go into the lookup table, so interpretation of the system =
"gamma"=20
value is system-dependent.</P>
<P>The response of real displays is actually more complex than can be =
described=20
by a single number (the display exponent). If actual measurements of the =

monitor's light output as a function of voltage input are available, the =
third=20
and fourth lines of the computation above can be replaced by a lookup in =
these=20
measurements, to find the actual frame buffer value that most nearly =
gives the=20
desired brightness.</P>
<H2><A name=3D13Decoder-colour-handling>13.14 Decoder colour =
handling</A></H2>
<P>See Annex C: <A =
href=3D"http://www.w3.org/TR/PNG/#C-GammaAppendix"><SPAN=20
class=3Dxref>Gamma and chromaticity</SPAN></A> for references to colour=20
issues.</P>
<P>In many cases, the image data in PNG datastreams will be treated as=20
device-dependent RGB values and displayed without modification (except =
for=20
appropriate gamma correction). This provides the fastest display of PNG =
images.=20
But unless the viewer uses exactly the same display hardware as that =
used by the=20
author of the original image, the colours will not be exactly the same =
as those=20
seen by the original author, particularly for darker or near-neutral =
colours.=20
The <A href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A>=20
chunk provides information that allows closer colour matching than that =
provided=20
by gamma correction alone.</P>
<P>The <A href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
class=3Dchunk>cHRM</SPAN></A> data can be used to transform the image =
data from=20
RGB to XYZ and thence into a perceptually linear colour space such as =
CIE LAB.=20
The colours can be partitioned to generate an optimal palette, because =
the=20
geometric distance between two colours in CIE LAB is strongly related to =
how=20
different those colours appear (unlike, for example, RGB or XYZ spaces). =
The=20
resulting palette of colours, once transformed back into RGB colour =
space, could=20
be used for display or written into a <A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A>=20
chunk.</P>
<P>Decoders that are part of image processing applications might also =
transform=20
image data into CIE LAB space for analysis.</P>
<P>In applications where colour fidelity is critical, such as product =
design,=20
scientific visualization, medicine, architecture, or advertising, PNG =
decoders=20
can transform the image data from source RGB to the display RGB space of =
the=20
monitor used to view the image. This involves calculating the matrix to =
go from=20
source RGB to XYZ and the matrix to go from XYZ to display RGB, then =
combining=20
them to produce the overall transformation. The PNG decoder is =
responsible for=20
implementing gamut mapping.</P>
<P>Decoders running on platforms that have a Colour Management System =
(CMS) can=20
pass the image data, <A href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
class=3Dchunk>gAMA</SPAN></A>, and <A=20
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A> values=20
to the CMS for display or further processing.</P>
<P>PNG decoders that provide colour printing facilities can use the =
facilities=20
in Level 2 PostScript to specify image data in calibrated RGB space or =
in a=20
device-independent colour space such as XYZ. This will provide better =
colour=20
fidelity than a simple RGB to CMYK conversion. The PostScript Language =
Reference=20
manual <A href=3D"http://www.w3.org/TR/PNG/#G-POSTSCRIPT"><SPAN=20
class=3Dbibref>[POSTSCRIPT]</SPAN></A> gives examples. Such decoders are =

responsible for implementing gamut mapping between source RGB (specified =
in the=20
<A href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A>=20
chunk) and the target printer. The PostScript interpreter is then =
responsible=20
for producing the required colours.</P>
<P>PNG decoders can use the <A =
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN=20
class=3Dchunk>cHRM</SPAN></A> data to calculate an accurate greyscale=20
representation of a colour image. Conversion from RGB to grey is simply =
a case=20
of calculating the Y (luminance) component of XYZ, which is a weighted =
sum of R,=20
G, and B values. The weights depend upon the monitor type, i.e. the =
values in=20
the <A href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A>=20
chunk. PNG decoders may wish to do this for PNG datastreams with no <A=20
href=3D"http://www.w3.org/TR/PNG/#11cHRM"><SPAN =
class=3Dchunk>cHRM</SPAN></A> chunk.=20
In this case, a reasonable default would be the CCIR 709 primaries <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ITU-R-BT709"><SPAN=20
class=3Dbibref>[ITU-R-BT709]</SPAN></A>. The original NTSC primaries =
should=20
<STRONG>not</STRONG> be used unless the PNG image really was =
colour-balanced for=20
such a monitor.</P>
<H2><A name=3D13Background-colour>13.15 Background colour</A></H2>
<P>The background colour given by the <A=20
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A> chunk=20
will typically be used to fill unused screen space around the image, as =
well as=20
any transparent pixels within the image. (Thus, <A=20
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A> is=20
valid and useful even when the image does not use transparency.) If no =
<A=20
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A> chunk=20
is present, the viewer will need to decide upon a suitable background =
colour.=20
When no other information is available, a medium grey such as 153 in the =
8-bit=20
sRGB colour space would be a reasonable choice. Transparent black or =
white text=20
and dark drop shadows, which are common, would all be legible against =
this=20
background.</P>
<P>Viewers that have a specific background against which to present the =
image=20
(such as web browsers) should ignore the <A=20
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A> chunk,=20
in effect overriding <A href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN=20
class=3Dchunk>bKGD</SPAN></A> with their preferred background colour or =
background=20
image.</P>
<P>The background colour given by the <A=20
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A> chunk=20
is not to be considered transparent, even if it happens to match the =
colour=20
given by the <A href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN=20
class=3Dchunk>tRNS</SPAN></A> chunk (or, in the case of an =
indexed-colour image,=20
refers to a palette index that is marked as transparent by the <A=20
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A>=20
chunk). Otherwise one would have to imagine something "behind the =
background" to=20
composite against. The background colour is either used as background or =

ignored; it is not an intermediate layer between the PNG image and some =
other=20
background.</P>
<P>Indeed, it will be common that the <A=20
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A> chunks=20
specify the same colour, since then a decoder that does not implement=20
transparency processing will give the intended display, at least when no =

partially-transparent pixels are present.</P>
<H2><A name=3D13Alpha-channel-processing>13.16 Alpha channel =
processing</A></H2>
<P>The alpha channel can be used to composite a foreground image against =
a=20
background image. The PNG datastream defines the foreground image and =
the=20
transparency mask, but not the background image. PNG decoders are=20
<STRONG>not</STRONG> required to support this most general case. It is =
expected=20
that most will be able to support compositing against a single =
background=20
colour.</P>
<P>The equation for computing a composited sample value =
is:</P><PRE>output =3D alpha * foreground + (1-alpha) * background
</PRE>
<P>where alpha and the input and output sample values are expressed as =
fractions=20
in the range 0 to 1. This computation should be performed with intensity =
samples=20
(not gamma-encoded samples). For colour images, the computation is done=20
separately for R, G, and B samples.</P>
<P>The following code illustrates the general case of compositing a =
foreground=20
image against a background image. It assumes that the original pixel =
data are=20
available for the background image, and that output is to a frame buffer =
for=20
display. Other variants are possible; see the comments below the code. =
The code=20
allows the sample depths and gamma values of foreground image and =
background=20
image all to be different and not necessarily suited to the display =
system. In=20
practice no assumptions about equality should be made without first=20
checking.</P><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<P>This code is ISO C <A =
href=3D"http://www.w3.org/TR/PNG/#2-ISO-9899"><SPAN=20
class=3DNormRef>[ISO-9899]</SPAN></A>, with line numbers added for =
reference in=20
the comments below.</P><PRE>   01  int foreground[4];  /* image pixel: =
R, G, B, A */
   02  int background[3];  /* background pixel: R, G, B */
   03  int fbpix[3];       /* frame buffer pixel */
   04  int fg_maxsample;   /* foreground max sample */
   05  int bg_maxsample;   /* background max sample */
   06  int fb_maxsample;   /* frame buffer max sample */
   07  int ialpha;
   08  float alpha, compalpha;
   09  float gamfg, linfg, gambg, linbg, comppix, gcvideo;
  =20
       /* Get max sample values in data and frame buffer */
   10  fg_maxsample =3D (1 &lt;&lt; fg_sample_depth) - 1;
   11  bg_maxsample =3D (1 &lt;&lt; bg_sample_depth) - 1;
   12  fb_maxsample =3D (1 &lt;&lt; frame_buffer_sample_depth) - 1;
       /*
        * Get integer version of alpha.
        * Check for opaque and transparent special cases;
        * no compositing needed if so.
        *
        * We show the whole gamma decode/correct process in
        * floating point, but it would more likely be done
        * with lookup tables.
        */
   13  ialpha =3D foreground[3];
  =20
   14  if (ialpha =3D=3D 0) {
           /*
            * Foreground image is transparent here.
            * If the background image is already in the frame
            * buffer, there is nothing to do.
            */
   15      ;
   16  } else if (ialpha =3D=3D fg_maxsample) {
           /*
            * Copy foreground pixel to frame buffer.
            */
   17      for (i =3D 0; i &lt; 3; i++) {
   18          gamfg =3D (float) foreground[i] / fg_maxsample;
   19          linfg =3D pow(gamfg, 1.0 / fg_gamma);
   20          comppix =3D linfg;
   21          gcvideo =3D pow(comppix, 1.0 / display_exponent);
   22          fbpix[i] =3D (int) (gcvideo * fb_maxsample + 0.5);
   23      }
   24  } else {
           /*
            * Compositing is necessary.
            * Get floating-point alpha and its complement.
            * Note: alpha is always linear; gamma does not
            * affect it.
            */
   25      alpha =3D (float) ialpha / fg_maxsample;
   26      compalpha =3D 1.0 - alpha;
  =20
   27      for (i =3D 0; i &lt; 3; i++) {
               /*
                * Convert foreground and background to floating
                * point, then undo gamma encoding.
                */
   28          gamfg =3D (float) foreground[i] / fg_maxsample;
   29          linfg =3D pow(gamfg, 1.0 / fg_gamma);
   30          gambg =3D (float) background[i] / bg_maxsample;
</PRE><!-- ************Page Break******************* --><!-- =
************Page Break******************* --><PRE>   31          linbg =
=3D pow(gambg, 1.0 / bg_gamma);
               /*=20
                * Composite.
                */
   32          comppix =3D linfg * alpha + linbg * compalpha;
               /*
                * Gamma correct for display.
                * Convert to integer frame buffer pixel.
                */
   33          gcvideo =3D pow(comppix, 1.0 / display_exponent);
   34          fbpix[i] =3D (int) (gcvideo * fb_maxsample + 0.5);
   35      }
   36  }
</PRE>
<P>Variations:</P><!-- <ol start=3D"1"> -->
<OL>
  <LI>If output is to another PNG datastream instead of a frame buffer, =
lines=20
  21, 22, 33, and 34 should be changed along the following lines <PRE>   =
/*
    * Gamma encode for storage in output datastream.
    * Convert to integer sample value.
    */
   gamout =3D pow(comppix, outfile_gamma);
   outpix[i] =3D (int) (gamout * out_maxsample + 0.5);
</PRE>Also, it becomes necessary to process background pixels when alpha =
is=20
  zero, rather than just skipping pixels. Thus, line 15 will need to be =
replaced=20
  by copies of lines 17-23, but processing background instead of =
foreground=20
  pixel values.=20
  <LI>If the sample depths of the output file, foreground file, and =
background=20
  file are all the same, and the three gamma values also match, then the =

  no-compositing code in lines 14-23 reduces to copying pixel values =
from the=20
  input file to the output file if alpha is one, or copying pixel values =
from=20
  background to output file if alpha is zero. Since alpha is typically =
either=20
  zero or one for the vast majority of pixels in an image, this is a =
significant=20
  saving. No gamma computations are needed for most pixels.=20
  <LI>When the sample depths and gamma values all match, it may appear=20
  attractive to skip the gamma decoding and encoding (lines 28-31, =
33-34) and=20
  just perform line 32 using gamma-encoded sample values. Although this =
does not=20
  have too bad an effect on image quality, the time savings are small if =
alpha=20
  values of zero and one are treated as special cases as recommended =
here.=20
  <LI>If the original pixel values of the background image are no longer =

  available, only processed frame buffer pixels left by display of the=20
  background image, then lines 30 and 31 need to extract intensity from =
the=20
  frame buffer pixel values using code such as <PRE>   /*
    * Convert frame buffer value into intensity sample.
    */
   gcvideo =3D (float) fbpix[i] / fb_maxsample;
   linbg =3D pow(gcvideo, display_exponent);
</PRE>However, some roundoff error can result, so it is better to have =
the=20
  original background pixels available if at all possible.=20
  <LI>Note that lines 18-22 are performing exactly the same gamma =
computation=20
  that is done when no alpha channel is present. If the no-alpha case is =
handled=20
  with a lookup table, the same lookup table can be used here. Lines =
28-31 and=20
  33-34 can also be done with (different) lookup tables.=20
  <LI>Integer arithmetic can be used instead of floating point, =
providing care=20
  is taken to maintain sufficient precision throughout. </LI></OL>
<P class=3DNote>NOTE In floating point, no overflow or underflow checks =
are=20
needed, because the input sample values are guaranteed to be between 0 =
and 1,=20
and compositing always yields a result that is in between the input =
values=20
(inclusive). With integer arithmetic, some roundoff-error analysis might =
be=20
needed to guarantee no overflow or underflow.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<P>When displaying a PNG image with full alpha channel, it is important =
to be=20
able to composite the image against some background, even if it is only =
black.=20
Ignoring the alpha channel will cause PNG images that have been =
converted from=20
an associated-alpha representation to look wrong. (Of course, if the =
alpha=20
channel is a separate transparency mask, then ignoring alpha is a useful =
option:=20
it allows the hidden parts of the image to be recovered.)</P>
<P>Even if the decoder does not implement true compositing logic, it is =
simple=20
to deal with images that contain only zero and one alpha values. (This =
is=20
implicitly true for greyscale and truecolour PNG datastreams that use a =
<A=20
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A> chunk;=20
for indexed-colour PNG datastreams it is easy to check whether the <A=20
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A> chunk=20
contains any values other than 0 and 255.) In this simple case, =
transparent=20
pixels are replaced by the background colour, while others are =
unchanged.</P>
<P>If a decoder contains only this much transparency capability, it =
should deal=20
with a full alpha channel by treating all nonzero alpha values as fully =
opaque=20
or by dithering. Neither approach will yield very good results for =
images=20
converted from associated-alpha formats, but this is preferable to doing =

nothing. Dithering full alpha to binary alpha is very much like =
dithering=20
greyscale to black-and-white, except that all fully transparent and =
fully opaque=20
pixels should be left unchanged by the dither.</P>
<H2><A name=3D13Histogram-and-suggested-palette-usage>13.17 Histogram =
and=20
suggested palette usage</A></H2>
<P>For viewers running on indexed-colour hardware attempting to display =
a=20
truecolour image, or an indexed-colour image whose palette is too large =
for the=20
frame buffer, the encoder may have provided one or more suggested =
palettes in <A=20
href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A>=20
chunks. If one of these is found to be suitable, based on size and =
perhaps name,=20
the PNG decoder can use that palette. Suggested palettes with a sample =
depth=20
different from what the decoder needs can be converted using sample =
depth=20
rescaling (see 13.12: <A=20
href=3D"http://www.w3.org/TR/PNG/#13Sample-depth-rescaling"><SPAN=20
class=3Dxref>Sample depth rescaling</SPAN></A>).</P>
<P>When the background is a solid colour, the viewer should composite =
the image=20
and the suggested palette against that colour, then quantize the =
resulting image=20
to the resulting RGB palette. When the image uses transparency and the=20
background is not a solid colour, no suggested palette is likely to be=20
useful.</P>
<P>For truecolour images, a suggested palette might also be provided in =
a <A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> chunk.=20
If the image has a <A href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN=20
class=3Dchunk>tRNS</SPAN></A> chunk and the background is a solid =
colour, the=20
viewer will need to adapt the suggested palette for use with its desired =

background colour. To do this, the palette entry closest to the <A=20
href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A> colour=20
should be replaced with the desired background colour; or alternatively =
a=20
palette entry for the background colour can be added, if the viewer can =
handle=20
more colours than there are <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
class=3Dchunk>PLTE</SPAN></A> entries.</P>
<P>For images of colour type 6 (truecolour with alpha), any <A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> chunk=20
should have been designed for display of the image against a uniform =
background=20
of the colour specified by the <A =
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN=20
class=3Dchunk>bKGD</SPAN></A> chunk. Viewers should probably ignore the =
palette if=20
they intend to use a different background, or if the <A=20
href=3D"http://www.w3.org/TR/PNG/#11bKGD"><SPAN =
class=3Dchunk>bKGD</SPAN></A> chunk=20
is missing. Viewers can use a suggested palette for display against a =
different=20
background than it was intended for, but the results may not be very =
good.</P>
<P>If the viewer presents a transparent truecolour image against a =
background=20
that is more complex than a uniform colour, it is unlikely that the =
suggested=20
palette will be optimal for the composite image. In this case it is best =
to=20
perform a truecolour compositing step on the truecolour PNG image and =
background=20
image, then colour-quantize the resulting image.</P>
<P>In truecolour PNG datastreams, if both <A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> and <A=20
href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A> chunks=20
appear, the PNG decoder may choose from among the palettes suggested by =
both,=20
bearing in mind the different transparency semantics described =
above.</P>
<P>The frequencies in the <A =
href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN=20
class=3Dchunk>sPLT</SPAN></A> and <A =
href=3D"http://www.w3.org/TR/PNG/#11hIST"><SPAN=20
class=3Dchunk>hIST</SPAN></A> chunks are useful when the viewer cannot =
provide as=20
many colours as are used in the palette in the PNG datastream. If the =
viewer has=20
a shortfall of only a few colours, it is usually adequate to drop the =
least-used=20
colours from the palette. To reduce the number of colours substantially, =
it is=20
best to choose entirely new representative colours, rather than trying =
to use a=20
subset of the existing palette. This amounts to performing a new colour=20
quantization step; however, the existing palette and histogram can be =
used as=20
the input data, thus avoiding a scan of the image data in the <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
chunks.</P>
<P>If no suggested palette is provided, a decoder can develop its own, =
at the=20
cost of an extra pass over the image data in the <A=20
href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
chunks. Alternatively, a default palette (probably a colour cube) can be =

used.</P>
<P>See also 12.6: <A =
href=3D"http://www.w3.org/TR/PNG/#12Suggested-palettes"><SPAN=20
class=3Dxref>Suggested palettes</SPAN></A>.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H1><A name=3D14EditorsExt>14 Editors and extensions</A></H1>
<H2><A name=3D14Additional-chunk-types>14.1 Additional chunk =
types</A></H2>
<P>The provisions of this International Standard may be extended by =
adding new=20
chunk types, which may be either private or public. Applications can use =
private=20
chunk types to carry data that is not of interest to other people's=20
applications.</P>
<P>Decoders shall be prepared to encounter unrecognized public or =
private chunk=20
types. The chunk naming conventions (see 5.4: <A=20
href=3D"http://www.w3.org/TR/PNG/#5Chunk-naming-conventions"><SPAN=20
class=3Dxref>Chunk naming conventions</SPAN></A>) enable =
critical/ancillary,=20
public/private, and safe/unsafe to copy chunks to be distinguished.</P>
<P>Additional public PNG chunk types are defined in the document =
Register of PNG=20
Public Chunks and Keywords <A=20
href=3D"http://www.w3.org/TR/PNG/#G-PNG-EXTENSIONS"><SPAN=20
class=3Dbibref>[PNG-REGISTER]</SPAN></A>. Chunks described there are =
expected to=20
be less widely supported than those defined in this International =
Standard.=20
However, application authors are encouraged to use those chunk types =
whenever=20
appropriate for their applications. Additional chunk types can be =
proposed for=20
inclusion in that list by contacting the PNG Registration Authority (see =
4.9: <A=20
href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration"><SPAN=20
class=3Dxref>Extension and registration</SPAN></A>).</P>
<P>New public chunks will be registered only if they are of use to =
others and do=20
not violate the design philosophy of PNG. Chunk registration is not =
automatic,=20
although it is the intent of the Registration Authority that it be=20
straightforward when a new chunk of potentially wide application is =
needed. The=20
creation of new critical chunk types is discouraged unless absolutely=20
necessary.</P>
<H2><A name=3D14Ordering>14.2 Behaviour of PNG editors</A></H2>
<P>A "PNG editor" is defined as a program that reads a PNG datastream, =
makes=20
modifications, and writes a new PNG datastream while preserving as much=20
ancillary information as possible. Two examples of PNG editors are a =
program=20
that adds or modifies text chunks, and a program that adds a suggested =
palette=20
to a truecolour PNG datastream. Ordinary image editors are not PNG =
editors=20
because they usually discard all unrecognized information while reading =
in an=20
image.</P>
<P>To allow new chunk types to be added to PNG, it is necessary to =
establish=20
rules about the ordering requirements for all chunk types. Otherwise a =
PNG=20
editor does not know what to do when it encounters an unknown chunk.</P>
<P>EXAMPLE Consider a hypothetical new ancillary chunk type that is =
safe-to-copy=20
and is required to appear after <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
class=3Dchunk>PLTE</SPAN></A> if <A =
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
class=3Dchunk>PLTE</SPAN></A> is present. If a program attempts to add a =
<A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> chunk=20
and does not recognize the new chunk, it may insert the <A=20
href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN =
class=3Dchunk>PLTE</SPAN></A> chunk=20
in the wrong place, namely after the new chunk. Such problems could be =
prevented=20
by requiring PNG editors to discard all unknown chunks, but that is a =
very=20
unattractive solution. Instead, PNG requires ancillary chunks not to =
have=20
ordering restrictions like this.</P>
<P>To prevent this type of problem while allowing for future extension,=20
constraints are placed on both the behaviour of PNG editors and the =
allowed=20
ordering requirements for chunks. The safe-to-copy bit defines the =
proper=20
handling of unrecognized chunks in a datastream that is being =
modified.</P><!-- <ol start=3D"1"> -->
<OL>
  <LI>If a chunk's safe-to-copy bit is 1, the chunk may be copied to a =
modified=20
  PNG datastream whether or not the PNG editor recognizes the chunk =
type, and=20
  regardless of the extent of the datastream modifications.=20
  <LI>If a chunk's safe-to-copy bit is 0, it indicates that the chunk =
depends on=20
  the image data. If the program has made <STRONG>any</STRONG> changes =
to=20
  <STRONG>critical</STRONG> chunks, including addition, modification, =
deletion,=20
  or reordering of critical chunks, then unrecognized unsafe chunks =
shall=20
  <STRONG>not</STRONG> be copied to the output PNG datastream. (Of =
course, if=20
  the program <STRONG>does</STRONG> recognize the chunk, it can choose =
to output=20
  an appropriately modified version.)=20
  <LI>A PNG editor is always allowed to copy all unrecognized ancillary =
chunks=20
  if it has only added, deleted, modified, or reordered=20
  <STRONG>ancillary</STRONG> chunks. This implies that it is not =
permissible for=20
  ancillary chunks to depend on other ancillary chunks.=20
  <LI>PNG editors shall terminate on encountering an unrecognized =
critical chunk=20
  type, because there is no way to be certain that a valid datastream =
will=20
  result from modifying a datastream containing such a chunk. (Simply =
discarding=20
  the chunk is not good enough, because it might have unknown =
implications for=20
  the interpretation of other chunks.) The safe/unsafe mechanism is =
intended for=20
  use with ancillary chunks. The safe-to-copy bit will always be 0 for =
critical=20
  chunks. </LI></OL>
<P>The rules governing ordering of chunks are as follows.</P><!-- <ol =
start=3D"5"> -->
<OL>
  <LI>When copying an unknown <STRONG>unsafe-to-copy</STRONG> ancillary =
chunk, a=20
  PNG editor shall not move the chunk relative to any critical chunk. It =
may=20
  relocate the chunk freely relative to other ancillary chunks that =
occur=20
  between the same pair of critical chunks. (This is well defined since =
the=20
  editor shall not add, delete, modify, or reorder critical chunks if it =
is=20
  preserving unknown unsafe-to-copy chunks.)=20
  <LI>When copying an unknown <STRONG>safe-to-copy</STRONG> ancillary =
chunk, a=20
  PNG editor shall not move the chunk from before <A=20
  href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A> to=20
  after <A href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
  class=3Dchunk>IDAT</SPAN></A> or vice versa. (This is well defined =
because <A=20
  href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A> is=20
  always present.) Any other reordering is permitted.=20
  <LI>When copying a <STRONG>known</STRONG> ancillary chunk type, an =
editor need=20
  only honour the specific chunk ordering rules that exist for that =
chunk type.=20
  However, it may always choose to apply the above general rules =
instead.=20
</LI></OL>
<P>These rules are expressed in terms of copying chunks from an input =
datastream=20
to an output datastream, but they apply in the obvious way if a PNG =
datastream=20
is modified in place.</P>
<P>See also 5.4: <A=20
href=3D"http://www.w3.org/TR/PNG/#5Chunk-naming-conventions"><SPAN=20
class=3Dxref>Chunk naming conventions</SPAN></A>.</P>
<P>PNG editors that do not change the image data should not change the =
<A=20
href=3D"http://www.w3.org/TR/PNG/#11tIME"><SPAN =
class=3Dchunk>tIME</SPAN></A> chunk.=20
The Creation Time keyword in the <A=20
href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN =
class=3Dchunk>tEXt</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN =
class=3Dchunk>zTXt</SPAN></A>, and=20
<A href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN =
class=3Dchunk>iTXt</SPAN></A>=20
chunks may be used for a user-supplied time.</P>
<H2><A name=3D14Ordering-of-chunks>14.3 Ordering of chunks</A></H2>
<H3><A name=3D14Ordering-of-critical-chunks>14.3.1 Ordering of critical=20
chunks</A></H3>
<P>Critical chunks may have arbitrary ordering requirements, because PNG =
editors=20
are required to terminate if they encounter unknown critical chunks. For =
example=20
<A href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A> has=20
the specific ordering rule that it shall always appear first. A PNG =
editor, or=20
indeed any PNG-writing program, shall know and follow the ordering rules =
for any=20
critical chunk type that it can generate.</P>
<H3><A name=3D14Ordering-of-ancillary-chunks>14.3.2 Ordering of =
ancillary=20
chunks</A></H3>
<P>The strictest ordering rules for an ancillary chunk type are:</P><!-- =
<ol start=3D"1"> -->
<OL>
  <LI>Unsafe-to-copy chunks may have ordering requirements relative to =
critical=20
  chunks.=20
  <LI>Safe-to-copy chunks may have ordering requirements relative to <A=20
  href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>.=20
  </LI></OL>
<P>The actual ordering rules for any particular ancillary chunk type may =
be=20
weaker. See for example the ordering rules for the standard ancillary =
chunk=20
types in 5.6: <A href=3D"http://www.w3.org/TR/PNG/#5ChunkOrdering"><SPAN =

class=3Dxref>Chunk ordering</SPAN></A>.</P>
<P>Decoders shall not assume more about the positioning of any ancillary =
chunk=20
than is specified by the chunk ordering rules. In particular, it is =
never valid=20
to assume that a specific ancillary chunk type occurs with any =
particular=20
positioning relative to other ancillary chunks.</P>
<P>EXAMPLE It is unsafe to assume that a particular private ancillary =
chunk=20
occurs immediately before <A =
href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN=20
class=3Dchunk>IEND</SPAN></A>. Even if it is always written in that =
position by a=20
particular application, a PNG editor might have inserted some other =
ancillary=20
chunk after it. But it is safe to assume that the chunk will remain =
somewhere=20
between <A href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN=20
class=3Dchunk>IDAT</SPAN></A> and <A =
href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN=20
class=3Dchunk>IEND</SPAN></A>.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H1><A name=3D15Conformance>15 Conformance</A></H1>
<H2><A name=3D15ConfIntro>15.1 Introduction</A></H2>
<H3><A name=3D15ConfObjectives>15.1.1 Objectives</A></H3>
<P>This clause addresses conformance of PNG datastreams, PNG encoders, =
PNG=20
decoders, and PNG editors.</P>
<P>The primary objectives of the specifications in this clause =
are:</P><!-- <ol start=3D"1"> -->
<OL>
  <LI>to promote interoperability by eliminating arbitrary subsets of, =
or=20
  extensions to, this International Standard;=20
  <LI>to promote uniformity in the development of conformance tests;=20
  <LI>to promote consistent results across PNG encoders, decoders, and =
editors;=20
  <LI>to facilitate automated test generation. </LI></OL>
<H3><A name=3D15ConfScope>15.1.2 Scope</A></H3>
<P>Conformance is defined for PNG datastreams and for PNG encoders, =
decoders,=20
and editors.</P>
<P>This clause addresses the PNG datastream and implementation =
requirements=20
including the range of allowable differences for PNG encoders, PNG =
decoders, and=20
PNG editors. This clause does not directly address the environmental,=20
performance, or resource requirements of the encoder, decoder, or =
editor.</P>
<P>The scope of this clause is limited to rules for the open interchange =
of PNG=20
datastreams.</P>
<H2><A name=3D15ConformanceConf>15.2 Conformance conditions</A></H2>
<H3><A name=3D15FileConformance>15.2.1 Conformance of PNG =
datastreams</A></H3>
<P>A PNG datastream conforms to this International Standard if the =
following=20
conditions are met.</P>
<OL>
  <LI>The PNG datastream contains a PNG signature as the first content =
(see 5.2:=20
  <A href=3D"http://www.w3.org/TR/PNG/#5PNG-file-signature"><SPAN =
class=3Dxref>PNG=20
  file signature</SPAN></A>).=20
  <LI>With respect to the chunk types defined in this International =
Standard:=20
  <UL>
    <LI>the PNG datastream contains as its first chunk, an <A=20
    href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN =
class=3Dchunk>IHDR</SPAN></A>=20
    chunk, immediately following the PNG signature;=20
    <LI>the PNG datastream contains as its last chunk, an <A=20
    href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN =
class=3Dchunk>IEND</SPAN></A>=20
    chunk. </LI></UL>
  <LI>No chunks or other content follow the <A=20
  href=3D"http://www.w3.org/TR/PNG/#11IEND"><SPAN =
class=3Dchunk>IEND</SPAN></A>=20
  chunk.=20
  <LI>All chunks contained therein match the specification of the =
corresponding=20
  chunk types of this International Standard. The PNG datastream shall =
obey the=20
  relationships among chunk types defined in this International =
Standard.=20
  <LI>The sequence of chunks in the PNG datastream obeys the ordering=20
  relationship specified in this International Standard.=20
  <LI>All field values in the PNG datastream obey the relationships =
specified in=20
  this International Standard producing the structure specified in this=20
  International Standard.=20
  <LI>No chunks appear in the PNG datastream other than those specified =
in this=20
  International Standard or those defined according to the rules for =
creating=20
  new chunk types as defined in this International Standard.=20
  <LI>The PNG datastream is encoded according to the rules of this =
International=20
  Standard. </LI></OL><!-- ************Page Break******************* =
--><!-- ************Page Break******************* -->
<H3><A name=3D15ConformanceEncoder>15.2.2 Conformance of PNG =
encoders</A></H3>
<P>A PNG encoder conforms to this International Standard if it satisfies =
the=20
following conditions.</P><!-- <ol start=3D"1"> -->
<OL>
  <LI>All PNG datastreams that are generated by the PNG encoder are =
conforming=20
  PNG datastreams.=20
  <LI>When encoding input samples that have a sample depth that cannot =
be=20
  directly represented in PNG, the encoder scales the samples up to the =
next=20
  higher sample depth that is allowed by PNG. The data are scaled in =
such a way=20
  that the high-order bits match the original data.=20
  <LI>Numbers greater than 127 are used when encoding experimental or =
private=20
  definitions of values for any of the method or type fields. </LI></OL>
<H3><A name=3D15ConformanceDecoder>15.2.3 Conformance of PNG =
decoders</A></H3>
<P>A PNG decoder conforms to this International Standard if it satisfies =
the=20
following conditions.</P><!-- <ol start=3D"1"> -->
<OL>
  <LI>It is able to read any PNG datastream that conforms to this =
International=20
  Standard, including both public and private chunks whose types may not =
be=20
  recognized.=20
  <LI>It supports all the standardized critical chunks, and all the =
standardized=20
  compression, filter, and interlace methods and types in any PNG =
datastream=20
  that conforms to this International Standard.=20
  <LI>Unknown chunk types are handled as described in <A=20
  href=3D"http://www.w3.org/TR/PNG/#5Chunk-naming-conventions"><SPAN=20
  class=3Dxref>5.4 Chunk naming conventions</SPAN></A>. An unknown chunk =
type is=20
  <STRONG>not</STRONG> treated as an error unless it is a critical =
chunk.=20
  <LI>Unexpected values in fields of known chunks (for example, an =
unexpected=20
  compression method in the <A =
href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN=20
  class=3Dchunk>IHDR</SPAN></A> chunk) are treated as errors.=20
  <LI>All types of PNG images (indexed-colour, truecolour, greyscale, =
truecolour=20
  with alpha, and greyscale with alpha) are processed. For example, =
decoders=20
  which are part of viewers running on indexed-colour display hardware =
shall=20
  reduce truecolour images to indexed format for viewing.=20
  <LI>Encountering an unknown chunk in which the ancillary bit is 0 =
generates an=20
  error if the decoder is attempting to extract the image.=20
  <LI>A chunk type in which the reserved bit is set is treated as an =
unknown=20
  chunk type.=20
  <LI>All valid combinations of bit depth and colour type as defined in =
11.2.2:=20
  <A href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN class=3Dxref><SPAN=20
  class=3Dchunk>IHDR</SPAN> Image header</SPAN></A> are supported.=20
  <LI>An error is reported if an unrecognized value is encountered in =
the bit=20
  depth, colour type, compression method, filter method, or interlace =
method=20
  bytes of the <A href=3D"http://www.w3.org/TR/PNG/#11IHDR"><SPAN=20
  class=3Dchunk>IHDR</SPAN></A> chunk.=20
  <LI>When processing 16-bit greyscale or truecolour data in the <A=20
  href=3D"http://www.w3.org/TR/PNG/#11tRNS"><SPAN =
class=3Dchunk>tRNS</SPAN></A>=20
  chunk, both bytes of the sample values are evaluated to determine =
whether a=20
  pixel is transparent.=20
  <LI>When processing an image compressed by compression method 0, the =
decoder=20
  assumes no more than that the complete image data is represented by a =
single=20
  compressed datastream that is stored in some number of <A=20
  href=3D"http://www.w3.org/TR/PNG/#11IDAT"><SPAN =
class=3Dchunk>IDAT</SPAN></A>=20
  chunks.=20
  <LI>No assumptions are made concerning the positioning of any =
ancillary chunk=20
  other than those that are specified by the chunk ordering rules. =
</LI></OL>
<H3><A name=3D15ConformanceEditor>15.2.4 Conformance of PNG =
editors</A></H3>
<P>A PNG editor conforms to this International Standard if it satisfies =
the=20
following conditions.</P>
<OL>
  <LI>It conforms to the requirements for PNG encoders.=20
  <LI>It conforms to the requirements for PNG decoders.=20
  <LI>It is able to encode all chunks that it decodes.=20
  <LI>It preserves the ordering of the chunks presented within the rules =
in 5.6:=20
  <A href=3D"http://www.w3.org/TR/PNG/#5ChunkOrdering"><SPAN =
class=3Dxref>Chunk=20
  ordering</SPAN></A>.=20
  <LI>It properly processes the safe-to-copy bit information and =
preserves=20
  unknown chunks when the safe-to-copy rules permit it.=20
  <LI>Unless the user specifically permits lossy operations or the =
editor issues=20
  a warning, it preserves all information required to reconstruct the =
reference=20
  image exactly, except that the sample depth of the alpha channel need =
not be=20
  preserved if it contains only zero and maximum values. Operations such =
as=20
  changing the colour type or rearranging the palette in an =
indexed-colour=20
  datastream are permitted provided that the new datastream losslessly=20
  represents the same reference image. </LI></OL><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H1 class=3DAnnex><A name=3DA-Conventions>Annex A</A></H1>
<P class=3DAnnex>(informative)</P>
<H1 id=3Dfilemedia class=3DAnnex>File conventions and Internet media =
type</H1>
<H2><A name=3DA-File-name-extension>A.1 File name extension</A></H2>
<P>On systems where file names customarily include an extension =
signifying file=20
type, the extension "<TT>.png</TT>" is recommended for PNG files. Lower =
case=20
"<TT>.png</TT>" is preferred if file names are case-sensitive.</P>
<H2><A name=3DA-Media-type>A.2 Internet media type</A></H2>
<P>The internet media type "<TT>image/png</TT>" is the Internet Media =
Type for=20
PNG <A href=3D"http://www.w3.org/TR/PNG/#2-RFC-2045"><SPAN=20
class=3DNormRef>[RFC-2045]</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#2-RFC-2048"><SPAN=20
class=3DNormRef>[RFC-2048]</SPAN></A>. It is recommended that =
implementations also=20
recognize the media type "<TT>image/x-png</TT>".</P>
<H2><A name=3DA-Macintosh-file-layout>A.3 Macintosh file layout</A></H2>
<P>In the Apple Computer Inc. Macintosh system, the following =
conventions are=20
recommended.</P>
<OL>
  <LI>The four-byte file type code for PNG files is "<TT>PNGf</TT>". =
(This code=20
  has been registered with Apple Computer Inc. for PNG files.) The =
creator code=20
  will vary depending on the creating application.=20
  <LI>The contents of the data fork is a PNG file exactly as described =
in this=20
  International Standard.=20
  <LI>The contents of the resource fork are unspecified. It may be empty =
or may=20
  contain application-dependent resources.=20
  <LI>When transferring a Macintosh PNG file to a non-Macintosh system, =
only the=20
  data fork should be transferred. </LI></OL><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H1 class=3DAnnex><A name=3DB-NewChunksAppendix>Annex B</A></H1>
<P class=3DAnnex>(informative)</P>
<H1 id=3Dnewchunks class=3DAnnex>Guidelines for new chunk types</H1>
<P>This International Standard allows extension through the addition of =
new=20
chunk types and new interlace, filter, and compression methods. Such =
extensions=20
might be made to the standard either for experimental purposes or by=20
organizations for internal use.</P>
<P>Chunk types that are intended for general public use, or are required =
for=20
specific application domains, should be standardized through =
registration (see=20
4.9 <A href=3D"http://www.w3.org/TR/PNG/#4Concepts.Registration"><SPAN=20
class=3Dxref>Extension and registration</SPAN></A>). The process for =
registration=20
is defined by the Registration Authority. The conventions for naming =
chunks are=20
given in 5.4: <A=20
href=3D"http://www.w3.org/TR/PNG/#5Chunk-naming-conventions"><SPAN=20
class=3Dxref>Chunk naming conventions</SPAN></A>.</P>
<P>Some guidelines for defining private chunks are given below.</P><!-- =
<ol start=3D"1"> -->
<OL>
  <LI>Do not define new chunks that redefine the meaning of existing =
chunks or=20
  change the interpretation of an existing standardized chunk, e.g., do =
not add=20
  a new chunk to say that RGB and alpha values actually mean CMYK.=20
  <LI>Minimize the use of private chunks to aid portability.=20
  <LI>Avoid defining chunks that depend on total datastream contents. If =
such=20
  chunks have to be defined, make them critical chunks.=20
  <LI>For textual information that is representable in Latin-1 avoid =
defining a=20
  new chunk type. Use a <A =
href=3D"http://www.w3.org/TR/PNG/#11tEXt"><SPAN=20
  class=3Dchunk>tEXt</SPAN></A> or <A=20
  href=3D"http://www.w3.org/TR/PNG/#11zTXt"><SPAN =
class=3Dchunk>zTXt</SPAN></A>=20
  chunk with a suitable keyword to identify the type of information. For =
textual=20
  information that is not representable in Latin-1 but which can be =
represented=20
  in UTF-8, use an <A href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN=20
  class=3Dchunk>iTXt</SPAN></A> chunk with a suitable keyword.=20
  <LI>Group mutually dependent ancillary information into a single =
chunk. This=20
  avoids the need to introduce chunk ordering relationships.=20
  <LI>Avoid defining private critical chunks. </LI></OL><!-- =
************Page Break******************* --><!-- ************Page =
Break******************* -->
<H1 class=3DAnnex><A name=3DC-GammaAppendix>Annex C</A></H1>
<P class=3DAnnex>(informative)</P>
<H1 id=3Dgammachromaticity class=3DAnnex>Gamma and chromaticity</H1>
<P>Gamma is a numerical parameter used to describe approximations to =
certain=20
non-linear transfer functions encountered in image capture and =
reproduction.=20
Gamma is the exponent in a power law function. For example the =
function:</P>
<P><TT>intensity =3D (voltage + constant)<SUP>exponent</SUP></TT></P>
<P>which is used to model the non-linearity of cathode ray tube (CRT) =
displays.=20
It is often assumed, as in this International Standard, that the =
constant is=20
zero.</P>
<P>For the purposes of this International Standard, it is convenient to =
consider=20
five places in a general image pipeline at which non-linear transfer =
functions=20
may occur and which may be modelled by power laws. The characteristic =
exponent=20
associated with each is given a specific name.</P>
<TABLE class=3DRegular summary=3D"This table describes characteristic =
exponents">
  <TBODY>
  <TR>
    <TD class=3DRegular><TT>input_exponent</TT> </TD>
    <TD class=3DRegular>the exponent of the image sensor.</TD></TR>
  <TR>
    <TD class=3DRegular><TT>encoding_exponent</TT> </TD>
    <TD class=3DRegular>the exponent of any transfer function performed =
by the=20
      process or device writing the datastream.</TD></TR>
  <TR>
    <TD class=3DRegular><TT>decoding_exponent</TT> </TD>
    <TD class=3DRegular>the exponent of any transfer function performed =
by the=20
      software reading the image datastream.</TD></TR>
  <TR>
    <TD class=3DRegular><TT>LUT_exponent</TT> </TD>
    <TD class=3DRegular>the exponent of the transfer function applied =
between=20
      the frame buffer and the display device (typically this is applied =
by a=20
      Look Up Table).</TD></TR>
  <TR>
    <TD class=3DRegular><TT>output_exponent</TT> </TD>
    <TD class=3DRegular>the exponent of the display device. For a CRT, =
this is=20
      typically a value close to 2.2.</TD></TR></TBODY></TABLE>
<P>It is convenient to define some additional entities that describe =
some=20
composite transfer functions, or combinations of stages.</P>
<TABLE class=3DRegular=20
summary=3D"This table characterises additional entities that are used to =
describe transfer functions">
  <TBODY>
  <TR>
    <TD class=3DRegular><TT>display_exponent</TT> </TD>
    <TD class=3DRegular>exponent of the transfer function applied =
between the=20
      frame buffer and the display surface of the display device.<BR=20
      class=3Dxhtml><TT>display_exponent =3D LUT_exponent * =
output_exponent</TT>=20
  </TD></TR>
  <TR>
    <TD class=3DRegular><TT>gamma</TT> </TD>
    <TD class=3DRegular>exponent of the function mapping display output=20
      intensity to samples in the PNG datastream.<BR =
class=3Dxhtml><TT>gamma =3D 1.0=20
      / (decoding_exponent * display_exponent)</TT> </TD></TR>
  <TR>
    <TD class=3DRegular><TT>end_to_end_exponent</TT> </TD>
    <TD class=3DRegular>the exponent of the function mapping image =
sensor input=20
      intensity to display output intensity. This is generally a value =
in the=20
      range 1.0 to 1.5.</TD></TR></TBODY></TABLE>
<P>The PNG <A href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
class=3Dchunk>gAMA</SPAN></A> chunk is used to record the gamma value. =
This=20
information may be used by decoders together with additional information =
about=20
the display environment in order to achieve, or approximate, the desired =
display=20
output.</P>
<P>Additional information about this subject may be found in the =
references <A=20
href=3D"http://www.w3.org/TR/PNG/#G-GAMMA-TUTORIAL"><SPAN=20
class=3Dbibref>[GAMMA-TUTORIAL]</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#G-GAMMA-FAQ"><SPAN=20
class=3Dbibref>[GAMMA-FAQ]</SPAN></A>, and <A=20
href=3D"http://www.w3.org/TR/PNG/#G-POYNTON"><SPAN=20
class=3Dbibref>[POYNTON]</SPAN></A> (especially chapter 6).</P>
<P>Background information about chromaticity and colour spaces may be =
found in=20
references <A href=3D"http://www.w3.org/TR/PNG/#G-COLOUR-TUTORIAL"><SPAN =

class=3Dbibref>[COLOUR-TUTORIAL]</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#G-COLOUR-FAQ"><SPAN=20
class=3Dbibref>[COLOUR-FAQ]</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#G-HALL"><SPAN =
class=3Dbibref>[HALL]</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#G-KASSON"><SPAN=20
class=3Dbibref>[KASSON]</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#G-LILLEY"><SPAN=20
class=3Dbibref>[LILLEY]</SPAN></A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#G-STONE"><SPAN =
class=3Dbibref>[STONE]</SPAN></A>,=20
and <A href=3D"http://www.w3.org/TR/PNG/#G-TRAVIS"><SPAN=20
class=3Dbibref>[TRAVIS]</SPAN></A>.</P><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H1 class=3DAnnex><A name=3DD-CRCAppendix>Annex D</A></H1>
<P class=3DAnnex>(informative)</P>
<H1 id=3Dsamplecrc class=3DAnnex>Sample Cyclic Redundancy Code =
implementation</H1>
<P>The following sample code represents a practical implementation of =
the CRC=20
(Cyclic Redundancy Check) employed in PNG chunks. (See also ISO 3309 <A=20
href=3D"http://www.w3.org/TR/PNG/#2-ISO-3309"><SPAN=20
class=3DNormRef>[ISO-3309]</SPAN></A> or ITU-T V.42 <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ITU-T-V42"><SPAN=20
class=3Dbibref>[ITU-T-V42]</SPAN></A> for a formal specification.)</P>
<P>The sample code is in the ISO C <A=20
href=3D"http://www.w3.org/TR/PNG/#2-ISO-9899"><SPAN=20
class=3DNormRef>[ISO-9899]</SPAN></A> programming language. The hints in =
<A=20
href=3D"http://www.w3.org/TR/PNG/#D-tabled1"><SPAN class=3Dtabref>Table=20
D.1</SPAN></A> may help non-C users to read the code more easily.</P>
<TABLE class=3DRegular=20
  summary=3D"This table gives hints for reading the CRC =
code"><CAPTION><A=20
  name=3DD-tabled1><B>Table D.1 =E2=80=94 Hints for reading ISO C =
code</B></A></CAPTION>
  <TBODY>
  <TR>
    <TD class=3DRegular><TT>&amp;</TT> </TD>
    <TD class=3DRegular>Bitwise AND operator.</TD></TR>
  <TR>
    <TD class=3DRegular><TT>^</TT> </TD>
    <TD class=3DRegular>Bitwise exclusive-OR operator.</TD></TR>
  <TR>
    <TD class=3DRegular><TT>&gt;&gt;</TT> </TD>
    <TD class=3DRegular>Bitwise right shift operator. When applied to an =

      unsigned quantity, as here, right shift inserts zeroes at the =
left.</TD></TR>
  <TR>
    <TD class=3DRegular><TT>!</TT> </TD>
    <TD class=3DRegular>Logical NOT operator.</TD></TR>
  <TR>
    <TD class=3DRegular><TT>++</TT> </TD>
    <TD class=3DRegular>"<TT>n++</TT>" increments the variable =
<TT>n</TT>. In=20
      "for" loops, it is applied after the variable is tested.</TD></TR>
  <TR>
    <TD class=3DRegular><TT>0xNNN</TT> </TD>
    <TD class=3DRegular><TT>0x</TT> introduces a hexadecimal (base 16) =
constant.=20
      Suffix <TT>L</TT> indicates a long value (at least 32=20
bits).</TD></TR></TBODY></TABLE>
<HR class=3Dxhtml>
<PRE>   /* Table of CRCs of all 8-bit messages. */
   unsigned long crc_table[256];
  =20
   /* Flag: has the table been computed? Initially false. */
   int crc_table_computed =3D 0;
  =20
   /* Make the table for a fast CRC. */
   void make_crc_table(void)
   {
     unsigned long c;
     int n, k;
  =20
     for (n =3D 0; n &lt; 256; n++) {
       c =3D (unsigned long) n;
       for (k =3D 0; k &lt; 8; k++) {
         if (c &amp; 1)
           c =3D 0xedb88320L ^ (c &gt;&gt; 1);
         else
           c =3D c &gt;&gt; 1;
       }
       crc_table[n] =3D c;
     }
     crc_table_computed =3D 1;
   }
 =20
</PRE><!-- ************Page Break******************* --><!-- =
************Page Break******************* --><PRE>   /* Update a running =
CRC with the bytes buf[0..len-1]--the CRC
      should be initialized to all 1's, and the transmitted value
      is the 1's complement of the final running CRC (see the
      crc() routine below). */
  =20
   unsigned long update_crc(unsigned long crc, unsigned char *buf,
                            int len)
   {
     unsigned long c =3D crc;
     int n;
  =20
     if (!crc_table_computed)
       make_crc_table();
     for (n =3D 0; n &lt; len; n++) {
       c =3D crc_table[(c ^ buf[n]) &amp; 0xff] ^ (c &gt;&gt; 8);
     }
     return c;
   }
  =20
   /* Return the CRC of the bytes buf[0..len-1]. */
   unsigned long crc(unsigned char *buf, int len)
   {
     return update_crc(0xffffffffL, buf, len) ^ 0xffffffffL;
   }
</PRE><!-- ************Page Break******************* --><!-- =
************Page Break******************* -->
<H1 class=3DAnnex><A name=3DE-Resources>Annex E</A></H1>
<P class=3DAnnex>(informative)</P>
<H1 id=3Donlineresources class=3DAnnex>Online resources</H1>
<H2><A name=3DE-Intro>Introduction</A></H2>
<P>This annex gives the locations of some Internet resources for PNG =
software=20
developers. By the nature of the Internet, the list is incomplete and =
subject to=20
change.</P>
<H2><A name=3DE-Archive-sites>Archive sites</A></H2>
<P>This International Standard can be found at <A=20
href=3D"http://www.w3.org/TR/2003/REC-PNG-20031110/index.html"><CODE>http=
://www.w3.org/TR/2003/REC-PNG-20031110/index.html</CODE></A>.</P>
<H2><A name=3DE-icc-profile-specs>ICC profile specifications</A></H2>
<P>ICC profile specifications are available at: <A=20
href=3D"http://www.color.org/"><CODE>http://www.color.org/</CODE></A></P>=

<H2><A name=3DE-PNG-home-page>PNG web site</A></H2>
<P>There is a World Wide Web site for PNG at <A=20
href=3D"http://www.libpng.org/pub/png/"><CODE>http://www.libpng.org/pub/p=
ng/</CODE></A>.=20
This page is a central location for current information about PNG and=20
PNG-related tools.</P>
<P>Additional documentation and portable C code for deflate, inflate, =
and an=20
optimized implementation of the CRC algorithm are available from the =
zlib web=20
site, <A =
href=3D"http://www.zlib.org/"><CODE>http://www.zlib.org/</CODE></A>.</P>
<H2><A name=3DE-Sample-implementation>Sample implementation and test=20
images</A></H2>
<P>A sample implementation in portable C, <STRONG>libpng</STRONG>, is =
available=20
at <A=20
href=3D"http://www.libpng.org/pub/png/libpng.html"><CODE>http://www.libpn=
g.org/pub/png/libpng.html</CODE></A>.=20
Sample viewer and encoder applications of libpng are available at <A=20
href=3D"http://www.libpng.org/pub/png/book/sources.html"><CODE>http://www=
.libpng.org/pub/png/book/sources.html</CODE></A>=20
and are described in detail in <I>PNG: The Definitive Guide</I> <A=20
href=3D"http://www.w3.org/TR/PNG/#G-ROELOFS">[ROELOFS]</A>. Test images =
can also=20
be accessed from the PNG web site.</P>
<H2><A name=3DE-Email>Electronic mail</A></H2>
<P>Queries concerning PNG developments may be addressed to <A=20
href=3D"mailto:png-group@w3.org"><TT>png-group@w3.org</TT></A>. <!-- =
************Page Break******************* --></P><!-- ************Page =
Break******************* -->
<H1 class=3DAnnex><A name=3DF-Relationship>Annex F</A></H1>
<P class=3DAnnex>(informative)</P>
<H1 id=3Drelationshiptofirstedition class=3DAnnex>Relationship to W3C =
PNG</H1>
<P>This International Standard is strongly based on W3C Recommendation =
PNG=20
Specification Version 1.0 <A=20
href=3D"http://www.w3.org/TR/PNG/#G-PNG-1.0">[PNG-1.0]</A> which was =
reviewed by=20
W3C members, approved as a W3C Recommendation, and published in October =
1996=20
according to the established W3C process. Subsequent amendments to the =
PNG=20
Specification have also been incorporated into this International =
Standard <A=20
href=3D"http://www.w3.org/TR/PNG/#G-PNG-1.0">[PNG-1.1]</A>, <A=20
href=3D"http://www.w3.org/TR/PNG/#G-PNG-1.0">[PNG-1.2]</A>.</P>
<P>A complete review of the document has been done by ISO/IEC/JTC 1/SC =
24 in=20
collaboration with W3C in order to transform this recommendation into an =
ISO/IEC=20
international standard. A major design goal during this review was to =
avoid=20
changes that will invalidate existing files, editors, or viewers that =
conform to=20
W3C Recommendation PNG Specification Version 1.0.</P>
<P>The W3C PNG Recommendation was developed with major contribution from =
the=20
following people.</P>
<H2><A name=3DF-Editor10>Editor (Version 1.0)</A></H2>
<P>Thomas Boutell, <SPAN class=3Demail>boutell @ boutell.com</SPAN></P>
<H2><A name=3DF-Editor12>Editor (Versions 1.1 and 1.2)</A></H2>
<P>Glenn Randers-Pehrson, <SPAN class=3Demail>randeg @ =
alum.rpi.edu</SPAN></P>
<H2><A name=3DF-ContribEditor10>Contributing Editor (Version =
1.0)</A></H2>
<P>Tom Lane, <SPAN class=3Demail>tgl @ sss.pgh.pa.us</SPAN></P>
<H2><A name=3DF-ContribEditor12>Contributing Editor (Versions 1.1 and=20
1.2)</A></H2>
<P>Adam M. Costello, <SPAN class=3Demail>png-spec.amc @ =
nicemice.net</SPAN></P>
<H2><A name=3DF-Authors>Authors (Versions 1.0, 1.1, and 1.2 =
combined)</A></H2>
<P><STRONG>Authors' names are presented in alphabetical =
order.</STRONG></P>
<UL>
  <LI><A href=3D"http://www.alumni.caltech.edu/~madler/">Mark Adler</A>, =
<SPAN=20
  class=3Demail>madler @ alumni.caltech.edu</SPAN>=20
  <LI><A href=3D"http://www.boutell.com/boutell/">Thomas Boutell</A>, =
<SPAN=20
  class=3Demail>boutell @ boutell.com</SPAN>=20
  <LI>John Bowler, <SPAN class=3Dmail>jbowler @ acm.org</SPAN>=20
  <LI><A href=3D"http://www.df.lth.se/~cb/">Christian Brunschen</A>, =
<SPAN=20
  class=3Demail>cb @ brunschen.com</SPAN>=20
  <LI><A href=3D"http://www.nicemice.net/amc/">Adam M. Costello</A>, =
<SPAN=20
  class=3Demail>png-spec.amc @ nicemice.net</SPAN>=20
  <LI><A href=3D"http://www.piclab.com/">Lee Daniel Crocker</A>, <SPAN=20
  class=3Demail>lee @ piclab.com</SPAN>=20
  <LI><A =
href=3D"http://www-mddsp.enel.ucalgary.ca/People/adilger/">Andreas=20
  Dilger</A>, <SPAN class=3Demail>adilger @ turbolabs.com</SPAN>=20
  <LI><A href=3D"http://www.fromme.com/">Oliver Fromme</A>, <SPAN=20
  class=3Demail>oliver @ fromme.com</SPAN>=20
  <LI><A href=3D"http://www.teaser.fr/~jlgailly/">Jean-loup Gailly</A>, =
<SPAN=20
  class=3Demail>jloup @ gzip.org</SPAN>=20
  <LI>Chris Herborth, <SPAN class=3Demail>chrish @ pobox.com</SPAN>=20
  <LI>Alex Jakulin, <SPAN class=3Demail>jakulin @ acm.org</SPAN>=20
  <LI>Neal Kettler, <SPAN class=3Demail>neal @ westwood.com</SPAN>=20
  <LI>Tom Lane, <SPAN class=3Demail>tgl @ sss.pgh.pa.us</SPAN>=20
  <LI>Alexander Lehmann, <SPAN class=3Demail>lehmann @ usa.net</SPAN> =
<!-- ************Page Break******************* --><!-- ************Page =
Break******************* -->
  <LI><A href=3D"http://www.w3.org/People/chris/">Chris Lilley</A>, =
<SPAN=20
  class=3Demail>chris @ w3.org</SPAN>=20
  <LI>Dave Martindale, <SPAN class=3Demail>davem @ cs.ubc.ca</SPAN>=20
  <LI>Owen Mortensen, <SPAN class=3Demail>ojm @ acm.org</SPAN>=20
  <LI>Keith S. Pickens, <SPAN class=3Demail>ksp @ rice.edu</SPAN>=20
  <LI><A href=3D"http://www.users.qwest.net/~lionlad/">Robert P. =
Poole</A>, <SPAN=20
  class=3Demail>lionlad @ qwest.net</SPAN>=20
  <LI>Glenn Randers-Pehrson, <SPAN class=3Demail>randeg @ =
alum.rpi.edu</SPAN>=20
  <LI><A href=3D"http://pobox.com/~newt/">Greg Roelofs</A>, <SPAN =
class=3Demail>newt=20
  @ pobox.com</SPAN>=20
  <LI><A href=3D"http://www.schaik.com/">Willem van Schaik</A>, <SPAN=20
  class=3Demail>willem @ schaik.com</SPAN>=20
  <LI>Guy Schalnat, <SPAN class=3Demail>gschal @ infinet.com</SPAN>=20
  <LI>Paul Schmidt, <SPAN class=3Demail>pschmidt @ photodex.com</SPAN>=20
  <LI>Michael Stokes, <SPAN class=3Demail>mistokes @ =
microsoft.com</SPAN>=20
  <LI>Tim Wegner, <SPAN class=3Demail>twegner @ phoenix.net</SPAN>=20
  <LI>Jeremy Wohl, <SPAN class=3Demail>jeremyw @ evantide.com</SPAN> =
</LI></UL>
<H2><A name=3DF-ChangeList>List of changes between W3C Recommendation =
PNG=20
Specification Version 1.0 and this International Standard</A></H2>
<H3><A name=3DF-EditorialChanges>Editorial changes</A></H3>
<P>The document has been reformatted according to the requirements of =
ISO.</P><!-- <ol start=3D"1"> -->
<OL>
  <LI>A concepts clause has been introduced.=20
  <LI>Conformance for datastreams, encoders, decoders, and editors has =
been=20
  defined in a conformance clause. </LI></OL>
<H3><A name=3DF-TechnicalChanges>Technical changes</A></H3><!-- <ol =
start=3D"1"> -->
<OL>
  <LI>New chunk types introduced in PNG version 1.1 and 1.2 have been=20
  incorporated (<A href=3D"http://www.w3.org/TR/PNG/#11iCCP"><SPAN=20
  class=3Dchunk>iCCP</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN=20
  class=3Dchunk>iTXt</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11sRGB"><SPAN=20
  class=3Dchunk>sRGB</SPAN></A>, <A =
href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN=20
  class=3Dchunk>sPLT</SPAN></A>). In the <A=20
  href=3D"http://www.w3.org/TR/PNG/#11iTXt"><SPAN =
class=3Dchunk>iTXt</SPAN></A>=20
  chunk, the language tag has been updated from RFC 1766 to RFC 3066.=20
  <LI>In accord with version 1.1, the scope of the 31-bit limit on chunk =
lengths=20
  and image dimensions has been extended to apply to all four-byte =
unsigned=20
  integers. The value -2<SUP>31</SUP> is not allowed in signed integers. =

  <LI>The redefinition of <A =
href=3D"http://www.w3.org/TR/PNG/#11gAMA"><SPAN=20
  class=3Dchunk>gAMA</SPAN></A> to be in terms of the desired display =
output=20
  rather than the original scene, introduced in PNG version 1.1, has =
been=20
  incorporated.=20
  <LI>The use of the <A href=3D"http://www.w3.org/TR/PNG/#11PLTE"><SPAN=20
  class=3Dchunk>PLTE</SPAN></A> and <A=20
  href=3D"http://www.w3.org/TR/PNG/#11hIST"><SPAN =
class=3Dchunk>hIST</SPAN></A>=20
  chunks in non-indexed-colour images has been discouraged in favour of =
the <A=20
  href=3D"http://www.w3.org/TR/PNG/#11sPLT"><SPAN =
class=3Dchunk>sPLT</SPAN></A>=20
  chunk.=20
  <LI>Some recommendations for PNG encoders, decoders, and editors have =
been=20
  strengthened to requirements. These changes do not affect the =
conformance of=20
  PNG datastreams, and do not compromise interoperability.=20
  <LI>The sample depth of channels not mentioned in the <A=20
  href=3D"http://www.w3.org/TR/PNG/#11sBIT"><SPAN =
class=3Dchunk>sBIT</SPAN></A>=20
  chunk has been clarified. </LI></OL><!-- ************Page =
Break******************* --><!-- ************Page =
Break******************* -->
<H1 class=3DAnnex><A name=3DG-References>Bibliography</A></H1>
<DL>
  <DT><A name=3DG-COLOUR-FAQ>[COLOUR-FAQ]</A>=20
  <DD>Poynton, C., "Colour FAQ".<BR class=3Dxhtml><A=20
  =
href=3D"http://www.poynton.com/ColorFAQ.html"><CODE>http://www.poynton.co=
m/ColorFAQ.html</CODE></A>=20

  <DT><A name=3DG-COLOUR-TUTORIAL>[COLOUR-TUTORIAL]</A>=20
  <DD>PNG Group, "Colour tutorial".<BR class=3Dxhtml><A=20
  =
href=3D"http://www.libpng.org/pub/png/spec/1.2/PNG-ColorAppendix.html"><C=
ODE>http://www.libpng.org/pub/png/spec/1.2/PNG-ColorAppendix.html</CODE><=
/A>=20

  <DT><A name=3DG-GAMMA-TUTORIAL>[GAMMA-TUTORIAL]</A>=20
  <DD>PNG Group, "Gamma tutorial".<BR class=3Dxhtml><A=20
  =
href=3D"http://www.libpng.org/pub/png/spec/1.2/PNG-GammaAppendix.html"><C=
ODE>http://www.libpng.org/pub/png/spec/1.2/PNG-GammaAppendix.html</CODE><=
/A>=20

  <DT><A name=3DG-GAMMA-FAQ>[GAMMA-FAQ]</A>=20
  <DD>Poynton, C., "Gamma FAQ".<BR class=3Dxhtml><A=20
  =
href=3D"http://www.poynton.com/Poynton-color.html"><CODE>http://www.poynt=
on.com/Poynton-color.html</CODE></A>=20

  <DT><A name=3DG-HALL>[HALL]</A>=20
  <DD>Hall, Roy, <I>Illumination and Color in Computer Generated =
Imagery</I>.=20
  Springer-Verlag, New York, 1989. ISBN 0-387-96774-5.=20
  <DT><A name=3DG-ICC>[ICC]</A>=20
  <DD>The International Color Consortium.<BR class=3Dxhtml><A=20
  href=3D"http://www.color.org/"><CODE>http://www.color.org/</CODE></A>=20
  <DT><A name=3DG-ISO-3664>[ISO-3664]</A>=20
  <DD>ISO 3664:2000, <I>Viewing conditions =E2=80=94 Graphic technology =
and=20
  photography</I>.=20
  <DT><A name=3DG-ITU-R-BT709>[ITU-R-BT709]</A>=20
  <DD>International Telecommunications Union, <I>Basic Parameter Values =
for the=20
  HDTV Standard for the Studio and for International Programme =
Exchange</I>,=20
  ITU-R Recommendation BT.709 (formerly CCIR Rec. 709), 1990.=20
  <DT><A name=3DG-ITU-T-V42>[ITU-T-V42]</A>=20
  <DD>International Telecommunications Union, <I>Error-correcting =
Procedures for=20
  DCEs Using Asynchronous-to-Synchronous Conversion</I>, ITU-T =
Recommendation=20
  V.42, 1994, Rev. 1.=20
  <DT><A name=3DG-KASSON>[KASSON]</A>=20
  <DD>Kasson, J., and W. Plouffe, "An Analysis of Selected Computer =
Interchange=20
  Color Spaces", <I>ACM Transactions on Graphics</I>, vol. 11, no. 4 , =
pp.=20
  373-405, 1992.=20
  <DT><A name=3DG-LILLEY>[LILLEY]</A>=20
  <DD>Lilley, C., F. Lin, W.T. Hewitt, and T.L.J. Howard, <I>Colour in =
Computer=20
  Graphics</I>. CVCP, Sheffield, 1993. ISBN 1-85889-022-5.<BR =
class=3Dxhtml><!-- Also available from<br class=3D"xhtml" />
 <a href=3D
"http://www.man.ac.uk/MVC/training/gravigs/colour/"><code>http://www.man.=
ac.uk/MVC/training/gravigs/colour/</code></a>
-->
  <DT><A name=3DG-ROELOFS>[ROELOFS]</A>=20
  <DD>Roelofs, G., <I>PNG: The Definitive Guide</I>, O'Reilly &amp; =
Associates=20
  Inc, Sebastopol, CA, 1999. ISBN 1-56592-542-4. See also <A=20
  =
href=3D"http://www.libpng.org/pub/png/pngbook.html"><CODE>http://www.libp=
ng.org/pub/png/pngbook.html</CODE>=20
  </A>
  <DT><A name=3DG-PAETH>[PAETH]</A>=20
  <DD>Paeth, A.W., "Image File Compression Made Easy", in <I>Graphics =
Gems=20
  II</I>, James Arvo, editor. Academic Press, San Diego, 1991. ISBN=20
  0-12-064480-0.=20
  <DT><A name=3DG-PNG-1.0>[PNG-1.0]</A>=20
  <DD>W3C Recommendation, "PNG (Portable Network Graphics) =
Specification,=20
  Version 1.0", 1996. Available in several formats from<BR =
class=3Dxhtml><A=20
  =
href=3D"http://www.w3.org/TR/REC-png-961001"><CODE>http://www.w3.org/TR/R=
EC-png-961001</CODE></A>=20
  and from<BR class=3Dxhtml><A=20
  =
href=3D"http://www.libpng.org/pub/png/spec/1.0/"><CODE>http://www.libpng.=
org/pub/png/spec/1.0/</CODE></A>=20

  <DT><A name=3DG-PNG-1.1>[PNG-1.1]</A>=20
  <DD>PNG Development Group, "PNG (Portable Network Graphics) =
Specification,=20
  Version 1.1", 1999. Available from<BR class=3Dxhtml><A=20
  =
href=3D"http://www.libpng.org/pub/png/spec/1.1/"><CODE>http://www.libpng.=
org/pub/png/spec/1.1/</CODE></A>=20

  <DT><A name=3DG-PNG-1.2>[PNG-1.2]</A>=20
  <DD>PNG Development Group, "PNG (Portable Network Graphics) =
Specification,=20
  Version 1.2", 1999. Available from<BR class=3Dxhtml><A=20
  =
href=3D"http://www.libpng.org/pub/png/spec/1.2/"><CODE>http://www.libpng.=
org/pub/png/spec/1.2/</CODE></A>=20

  <DT><A name=3DG-PNG-EXTENSIONS>[PNG-REGISTER]</A>=20
  <DD>PNG Development Group, "Register of PNG Public Chunks and =
Keywords".=20
  Available in several formats from:<BR class=3Dxhtml><A=20
  =
href=3D"http://www.libpng.org/pub/png/spec/register/"><CODE>http://www.li=
bpng.org/pub/png/spec/register/</CODE></A>=20

  <DT><A name=3DG-POSTSCRIPT>[POSTSCRIPT]</A>=20
  <DD>Adobe Systems Incorporated, <I>PostScript Language Reference =
Manual</I>,=20
  2nd edition. Addison-Wesley, Reading, 1990. ISBN 0-201-18127-4.=20
  <DT><A name=3DG-POYNTON>[POYNTON]</A>=20
  <DD>Poynton, Charles A., <I>A Technical Introduction to Digital =
Video</I>.=20
  John Wiley and Sons, Inc., New York, 1996. ISBN 0-471-12253-X.=20
  <DT><A name=3DG-SMPTE-170M>[SMPTE-170M]</A>=20
  <DD>Society of Motion Picture and Television Engineers, <I>Television =
=E2=80=94=20
  Composite Analog Video Signal =E2=80=94 NTSC for Studio =
Applications</I>, SMPTE-170M,=20
  1994.=20
  <DT><A name=3DG-STONE>[STONE]</A>=20
  <DD>Stone, M.C., W.B. Cowan, and J.C. Beatty, "Color gamut mapping and =
the=20
  printing of digital images", <I>ACM Transactions on Graphics</I>, vol. =
7, no.=20
  3, pp. 249-292, 1988.=20
  <DT><A name=3DG-TIFF-6.0>[TIFF-6.0]</A>=20
  <DD>TIFF<SUP>TM</SUP> Revision 6.0, Aldus Corporation, June 1992.=20
  <DT><A name=3DG-TRAVIS>[TRAVIS]</A>=20
  <DD>Travis, David, <I>Effective Color Displays =E2=80=94 Theory and =
Practice</I>.=20
  Academic Press, London, 1991. ISBN 0-12-697690-2.=20
  <DT><A name=3DG-ZL>[ZL]</A>=20
  <DD>J. Ziv and A. Lempel, "A Universal Algorithm for Sequential Data=20
  Compression", <I>IEEE Transactions on Information Theory</I>, vol. =
IT-23, no.=20
  3, pp. 337 - 343, 1977. </DD></DL>
<P>Additional documentation and portable C code for deflate, inflate, =
and an=20
optimized implementation of the CRC algorithm are available from the =
zlib web=20
site, <A=20
href=3D"http://www.zlib.org/"><CODE>http://www.zlib.org/</CODE></A>.</P><=
/BODY></HTML>

------=_NextPart_000_0000_01CD376E.46020480
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: http://www.w3.org/Icons/w3c_home

iVBORw0KGgoAAAANSUhEUgAAAEgAAAAwCAMAAACFQszZAAADAFBMVEUAAAABAQECAgIFBQUGBgYI
CAgMDAwODg4SEhIUFBQVFRUYGBgaGhodHR0fHx8gICAmJiYoKCgsLCwxMTE1NTU2NjY3Nzc4ODg7
Ozs/Pz9ERERFRUVGRkZJSUlOTk5PT09WVlZdXV1eXl5gYGBhYWFkZGRnZ2dsbGxtbW1vb29wcHBx
cXF0dHR8fHwAWpwBW5wCW50DXJ0EXZ4FXZ4GXp4IX58JYJ8LYaAMYqEOY6EPZKISZqMTZqMUZ6QW
aKUYaqUaa6Yba6Yebagfbqggb6ghb6kjcaokcaoodKwtd60yeq80fLA1fLE3frE4frI5f7I6gLM8
gbNBhLVChbZEhrZHiLhJibhKirlLi7lOjLpRjrtVkb1ZlL9alL9blb9dlsBfl8FimcJnncRpnsVq
n8Vrn8ZsoMZtocZuocdvosdxo8hzpMl1psl3p8p4qMt6qct8qsx9q81+rM2BgYGEhISJiYmKioqM
jIyNjY2Pj4+RkZGSkpKWlpaXl5eYmJiampqdnZ2fn5+goKChoaGioqKlpaWmpqaoqKiqqqqrq6us
rKytra2vr6+xsbGysrKzs7O0tLS3t7e5ubm8vLy/v7+Crs6Dr8+FsNCGsdCHsdCIstGLtNKMtdKW
u9aXvNeYvNeZvdebvtigwtqkxNylxdyox92qyN6vy+CwzOCxzeGyzeG0zuK30OO70+W81OW+1ebB
wcHCwsLDw8PFxcXGxsbHx8fNzc3Ozs7Pz8/T09PY2NjZ2dnb29vc3Nzd3d3f39/A1ufB1+fD2OjF
2ejH2+nI2+rK3erL3evM3uvN3uvO3+vN3+zR4e3S4u7T4+7U4+7V5O/X5e/Y5e/Z5vDa5vDb6PHc
6PHg4ODh4eHk5OTn5+fp6enr6+vt7e3u7u7h7PPi7PTk7vXn7/bp8fbq8ffr8vft8/ju9Pjw8PDy
8vL09PT19fX39/fw9fnz9/r0+Pv2+fz3+vz5+fn7+/v4+vz5+/36/P37/P38/Pz9/f38/f79/v7+
/v7+/v/////MzMyRmidfAAAAAWJLR0QAiAUdSAAAAAlwSFlzAAAASAAAAEgARslrPgAABClJREFU
SMftlwlUlFUUxx9UQ2JpViRkiJW08zEwhAZBhQZMKAa2TBFFIbRQZBISGNECibZHVChTZkQREUbR
BrTQoqMg0b4QhBiyCBEUEgzveO973+P7ZhgGzsFz6py858D3f/e773e++9679wE5hhwScyFmldFp
GJnO5MOgfxP07U6TqV121JlMpl7lfTsMTTsU67Wa3wk/5pomGRQnSVKy/CYatFEJTJYsrZZ5B9Ld
XM75EdUZlFal5T2a1s1AxRChl2cWgjYoIL0V6HN0dpyIh1nzCKXvOjTTtA3nLqxYx0A9Oghp4TMb
Qfr3CU6LFSdiBJxDrrwsjnyLepCKnx/POdOzOp2MyycUdKkAGWEQcAWzpSC92QdliAKbtc2BPNSV
nfOEx4AMUudzG+h4ATLAYBNTf4WBvB5VvzMhDvOysk9zJBri9CvNeKbm7dyNZFw+5aBDZE6fPwy+
Z7IA1OJWVNmEHLUexTtATIGVfyAz82lxjlT5fIVrUc91KchwpvZcAPI5Jj0IyeWvP9DM6LQ6kLcq
+WCaUgHX8SCTqDghl/7Jtl5DThezs+6hViBVPrjwUhTXISDLUWz3BvUq81UTx2oxe2i/NWgwQOTD
joLkww56Pe7ZIIjRSFAreehTxH3CEgGLEfkU8wNTJBY4BsXLIHx388gccq890FaRTxwHxaKOArEV
nr2XgLhRjryPVNkDtWl5PsMXwj6FS1LgMBSsjyRp2+DlakRrr+Zbud7pH3sgupznU4v7lMSrswge
kfjufP6Vui04yDuO2gXl83yw2j8p590gVqybqDRvzPPDk+yDdkksHz3+xj3U0+FAsZNlZSX54Uha
BJVtnm8fNHox5tPCv+s67Aa1qlqh9MDtSLoJVIp9EDvFyUa+Urg6xmR19YJdg9UGBfn+JCCsKz1U
u66d75dBr+4nYF/iJ70Bx3kSEKt0P0mKlk+Qn0WHQwsCz/N0AlPdIga+NYWoN3NtsIhdAZ6EKYCM
fHIj6kaujRaxV4HnhimAeH8O44NQdm5+s4i9HFyJv1jONw+MB/Ebg7cfegvqyywnXQSuNU92Wfge
fM8GiN1h5Vy/ifou/M479X9wVwO6XmvyUnN+Ovp+G6Ba0X6o3KC+oPQVOAjPclcC9pLfqedjyoxu
N3KWDdBIsNx+0KBBBcMl1uoLXeF1dHyGHe9aSj92zhMxXacQ8rANEPaiIqGhQcXhcxX2y5s//e4l
/EQt3mupR9zdz0IqjydkvtkWqFhusWh7faRifO5borpoE9EzdDI59ryc3LVzHQiZ3UxtgXp0Ucog
StfDnnVBY5wr/2aeDldx1c75iNoE0egCRRdEy+KbZRyjTRAF0322I+O4N9MJQC98reiGF8c2oSQu
InzlHQ2qwB9ST13gVame+h/90+//AjLbsimAZh6af7NOOAhIdkqdYiybxQAAAABJRU5ErkJggg==

------=_NextPart_000_0000_01CD376E.46020480
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.w3.org/TR/PNG/isostyle.css

BODY {
	BACKGROUND-COLOR: white; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt; FONT-WEIGHT: normal
}
.Href {
	FONT-FAMILY: Arial, sans-serif; COLOR: green; FONT-SIZE: 10pt; =
FONT-WEIGHT: normal; TEXT-DECORATION: underline
}
P {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt
}
DL {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt; FONT-WEIGHT: normal
}
DT {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: green; =
FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
DT.NormRef {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: red; =
FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
DD {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
MARGIN-LEFT: 12pt; FONT-SIZE: 10pt; FONT-WEIGHT: normal
}
P.Annex {
	TEXT-ALIGN: center; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt
}
P.Parameters {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: green; =
FONT-SIZE: 10pt
}
P.Parameterlist {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
MARGIN-LEFT: 10pt; FONT-SIZE: 10pt
}
P.Description {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: green; =
FONT-SIZE: 10pt
}
P.Descriptionpara {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt
}
P.NormRefDef {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt; FONT-WEIGHT: normal
}
P.References {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: green; =
FONT-SIZE: 10pt
}
P.Referencelist {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
MARGIN-LEFT: 10pt; FONT-SIZE: 10pt
}
P.Reference {
	TEXT-ALIGN: justify; FONT-STYLE: italic; FONT-FAMILY: Arial, =
sans-serif; COLOR: black; FONT-SIZE: 10pt
}
P.CoverRight {
	TEXT-ALIGN: right; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 12pt; FONT-WEIGHT: bold
}
P.CoverLeft {
	TEXT-ALIGN: left; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
P.CoverTitle {
	TEXT-ALIGN: left; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 14pt; FONT-WEIGHT: bold
}
UL {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt
}
OL {
	TEXT-ALIGN: justify; LIST-STYLE-TYPE: lower-alpha; FONT-FAMILY: Arial, =
sans-serif; COLOR: black; FONT-SIZE: 10pt
}
LI.Contents {
	TEXT-ALIGN: left; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
LI {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt
}
DIV.pagethrow {
	PAGE-BREAK-BEFORE: always
}
H1 {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: blue; =
FONT-SIZE: 14pt; FONT-WEIGHT: bold
}
H1.Annex {
	TEXT-ALIGN: center; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 14pt; FONT-WEIGHT: bold
}
H2 {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: red; =
FONT-SIZE: 12pt; FONT-WEIGHT: bold
}
H3 {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
H4 {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
H5 {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: black; =
FONT-SIZE: 10pt; FONT-WEIGHT: normal
}
P.Figuretitle {
	TEXT-ALIGN: center; LINE-HEIGHT: 11pt; FONT-FAMILY: Arial, sans-serif; =
COLOR: black; FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
P.Equationtitle {
	TEXT-ALIGN: center; LINE-HEIGHT: 11pt; FONT-FAMILY: Arial, sans-serif; =
COLOR: black; FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
P.Equationcentre {
	TEXT-ALIGN: center; LINE-HEIGHT: 11pt; FONT-FAMILY: Arial, sans-serif; =
COLOR: black; FONT-SIZE: 10pt
}
P.Tabletitle {
	TEXT-ALIGN: center; FONT-FAMILY: Arial, sans-serif; COLOR: red; =
FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
P.Note {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, sans-serif; COLOR: maroon; =
FONT-SIZE: 8pt
}
SPAN.chunk {
	FONT-FAMILY: Courier; COLOR: purple; FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
SPAN.Definition {
	FONT-STYLE: italic; COLOR: green
}
SPAN.xref {
	COLOR: blue
}
SPAN.NormRef {
	COLOR: red
}
SPAN.bibref {
	COLOR: green
}
TABLE.Regular {
	BORDER-BOTTOM: black 1px solid; BORDER-LEFT: black 1px solid; =
MARGIN-TOP: 4pt; BORDER-COLLAPSE: collapse; FONT-FAMILY: Arial, =
sans-serif; COLOR: black; FONT-SIZE: 10pt; BORDER-TOP: black 1px solid; =
BORDER-RIGHT: black 1px solid
}
TABLE.ISTitle {
	FONT-FAMILY: Arial, sans-serif; COLOR: black; FONT-SIZE: 14pt; =
FONT-WEIGHT: bold
}
TD.ISTitle {
	FONT-FAMILY: Arial, sans-serif; COLOR: black; FONT-SIZE: 10pt
}
TD.Regular {
	BORDER-BOTTOM: black 1px solid; BORDER-LEFT: black 1px solid; =
PADDING-BOTTOM: 2pt; PADDING-LEFT: 2pt; PADDING-RIGHT: 2pt; FONT-FAMILY: =
Arial, sans-serif; COLOR: black; FONT-SIZE: 10pt; VERTICAL-ALIGN: top; =
BORDER-TOP: black 1px solid; BORDER-RIGHT: black 1px solid; PADDING-TOP: =
2pt
}
TH {
	BORDER-BOTTOM: black 1px solid; BORDER-LEFT: black 1px solid; =
PADDING-BOTTOM: 2pt; PADDING-LEFT: 2pt; PADDING-RIGHT: 2pt; FONT-FAMILY: =
Arial, sans-serif; COLOR: green; FONT-SIZE: 10pt; VERTICAL-ALIGN: top; =
BORDER-TOP: black 1px solid; BORDER-RIGHT: black 1px solid; PADDING-TOP: =
2pt
}
PRE {
	COLOR: black; FONT-SIZE: 10pt
}

------=_NextPart_000_0000_01CD376E.46020480
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.w3.org/StyleSheets/TR/W3C-REC

BODY {
	PADDING-BOTTOM: 2em; MARGIN: 0px; PADDING-LEFT: 70px; PADDING-RIGHT: =
1em; FONT-FAMILY: sans-serif; BACKGROUND: white fixed no-repeat left =
top; COLOR: black; PADDING-TOP: 2em
}
:link {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #00c
}
:visited {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #609
}
A:active {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #c00
}
A:link IMG {
	BORDER-BOTTOM-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-TOP-STYLE: =
none; BORDER-RIGHT-STYLE: none
}
A:visited IMG {
	BORDER-BOTTOM-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-TOP-STYLE: =
none; BORDER-RIGHT-STYLE: none
}
A IMG {
	COLOR: white
}

@media All   =20
{
A IMG {
	COLOR:=20
}
    }
TH {
	FONT-FAMILY: sans-serif
}
TD {
	FONT-FAMILY: sans-serif
}
H1 {
	TEXT-ALIGN: left
}
H2 {
	TEXT-ALIGN: left
}
H3 {
	TEXT-ALIGN: left
}
H4 {
	TEXT-ALIGN: left
}
H5 {
	TEXT-ALIGN: left
}
H6 {
	TEXT-ALIGN: left
}
H1 {
	BACKGROUND: white; COLOR: #005a9c
}
H2 {
	BACKGROUND: white; COLOR: #005a9c
}
H3 {
	BACKGROUND: white; COLOR: #005a9c
}
H1 {
	FONT: 170% sans-serif
}
H2 {
	FONT: 140% sans-serif
}
H3 {
	FONT: 120% sans-serif
}
H4 {
	FONT: bold 100% sans-serif
}
H5 {
	FONT: italic 100% sans-serif
}
H6 {
	FONT: small-caps 100% sans-serif
}
.hide {
	DISPLAY: none
}
DIV.head {
	MARGIN-BOTTOM: 1em
}
DIV.head H1 {
	MARGIN-TOP: 2em; CLEAR: both
}
DIV.head TABLE {
	MARGIN-TOP: 2em; MARGIN-LEFT: 2em
}
P.copyright {
	FONT-SIZE: small
}
P.copyright SMALL {
	FONT-SIZE: small
}

@media Screen   =20
{
A[href]:hover {
	BACKGROUND: #ffa
}
    }
PRE {
	MARGIN-LEFT: 2em
}
DT {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
DD {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
DT {
	FONT-WEIGHT: bold
}
PRE {
	FONT-FAMILY: monospace
}
CODE {
	FONT-FAMILY: monospace
}
UL.toc {
	LIST-STYLE-TYPE: none
}
OL.toc {
	LIST-STYLE-TYPE: none
}

@media Aural   =20
{
H1 {
	stress: 20; richness: 90
}
H2 {
	stress: 20; richness: 90
}
H3 {
	stress: 20; richness: 90
}
.hide {
	speak: none
}
P.copyright {
	volume: x-soft; speech-rate: x-fast
}
DT {
	pause-before: 20%
}
PRE {
	speak-punctuation: code
}
    }
BODY {
	BACKGROUND-IMAGE: url(http://www.w3.org/StyleSheets/TR/logo-REC)
}

------=_NextPart_000_0000_01CD376E.46020480--
