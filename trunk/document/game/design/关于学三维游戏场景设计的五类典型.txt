关于学三维游戏场景设计中包含有五类典型的包围体类型（二维示例）OBB（Oriented Bounding Box，有向包围盒）本质上还是一个最贴近物体的长方体，只不过该长方体可以根据物体的一阶矩任意旋转。OBB树结构的构建方式如图5-4所示。OBB比包围球和AABB更加逼近物体，能显著减少包围体的个数。因此，人们通常进行两个回合的碰撞/相交检测，用包围球做第一回合的快速测试，用OBB进行第二回合的测试。第一回合的测试可以剔除大多数不可见或不必裁剪的物体，这样不必进行第二回合测试的几率就会大得多。同时，OBB包围盒测试所得的结果更精确，最终要绘制的物体会更少。这种混合式的包围盒也适用于其他方面，如碰撞检测、物理/力学等。
 

　　OBB树的构造示意图物体的凸包围体是最广泛的一种有用的包围体类型。凸包由一组平面定义，这些平面的法线由内指向外。计算凸包所需信息可以是一组三维空间点，计算时将处于凸包内但不在凸包的包围面上的冗余点剔除。构成凸包的面的平面方程被用来进行遮挡计算，如果空间中的一个点位于凸包的所有边界面的内侧，那么它就位于凸包之内，这样就可以快速检查一个三维点是否在一个凸包之内。现在已经有一些由一组点来计算凸包的算法，常用的几种包括增量式（incremental）、礼包式（gift-wrapping）、分治式（divide-and-conquer）和快速凸包算法（quick-hull）。
 

　　优化场景绘制的几何剖分技术游戏引擎中最常用的场景几何剖分技术包括BSP树、四叉树、八叉树、均匀八叉树等，下面将分别予以介绍。
 

　　1．BSP树BSP（Binary Space Partition，空间二叉剖分）树是游戏引擎中最常用的空间剖分技术，它由Schumacker于1969年首先提出，90年代初期由John Carmack和John Romero最早在第一人称视角游戏Doom中引入。自那以后，几乎所有的第一人称射击类游戏都采用BSP技术。BSP树能应用在深度排序、碰撞检测、绘制、节点裁剪和潜在可见集的计算，极大地加速了三维场景的漫游。它基于这样一个事实：空间中的任何平面都将整个空间分割成两个半空间，位于该平面某一侧的所有点构成了一个半空间，位于另一侧的点则定义了另一个半空间，该平面则是将两个半空间剖分开来的分割面。根据这种空间剖分的方法，可以建立起对整个几何场景和场景中各种物体几何的描述。BSP树的根节点就是整个场景，每个节点所代表的区域被平面分成两部分，一部分是平面前面（左侧）区域的子节点，另一部分是平面后面（右侧）区域的子节点。对子节点剖分，一直向下递归直到空间内部没有多边形或者剖分的深度达到指定的数值时才停止。此时，叶节点代表了场景几何分布的凸区域。图5-6（左），显示了二维平面上的BSP树结构剖分。平面P1将空间分割成两个半空间{A, E, F}和{B, C, D}。平面P2将空间{A, E, F}分割成两个半空间{A}和{E, F}，继而{E, F}被平面P3剖分成两个半空间，平面P4和P5又分别将{B, C, D}分成独立的子空间。最后形成的二叉树结构
 

　　场景的BSP树剖分（左）、BSP树结构示意图（右）一棵BSP树代表了空间的一个区域，它的子节点对应于空间的剖分方式，叶节点代表某个子区域或单个物体。图5-7显示了两个空的房间。显然，对左边的场景进行深度排序非常简单，而右边的场景则复杂得多。构建BSP树主要有两种方法：一种方法称为基于场景几何的BSP树，它的非叶节点中既包含分割平面，也包含构成场景几何的多边形列表，而叶节点则为空；另一种方法称为基于分割平面的BSP树，它的非叶节点仅包含分割平面，而叶节点包含所有的形成子凸空间边界的多边形。在游戏中，多采用第二种构造方式，下面以它为例子叙述BSP树的构造过程。
 

　　立方体结构的场景平面图（左）、学三维游戏场景设计复杂形状的场景平面图（右）如前所述，BSP树的组成元素是非叶节点、叶节点和场景多边形列表。在基于分割平面的BSP树中，叶节点是多边形的集合（图中的墙），非叶节点是分割平面。图5-8是对图5-7（右）的场景进行一次剖分后形成的BSP树，A代表非叶节点，它将整个房间分为两部分。
 

　　一次剖分后的场景平面图（左）及BSP树（右）第二次剖分使用平面B将左边非凸的部分剖分成两个凸的部分，因此不需要继续剖分，如图5-9所示。
 

　　两次剖分后的场景平面图（左）及BSP树（右）绘制三维场景中一个最重要的问题是多边形排序。为了正确地显示场景，需要保证所有物体按照正确的顺序绘制在当前的相机坐标系中。尽管底层图形API的深度缓冲功能可以排除不可见物体，但这还远远不够。例如，当场景中存在透明物体，就无法保证引擎的正确性。BSP树一个很强的应用是剖分多边形，避免歧义情况发生。
 

　　尽管BSP树被广泛使用在三维游戏引擎中，但仍然存在一些问题。首先，它不太合适于动态场景。如果动态物体在场景中运动，必须解决动态物体与BSP树实时融合的问题。BSP树的另外一个问题是构造时间长，因此只能以预处理方式进行。此外，BSP需要剖分多边形，从而增加了场景的多边形数目。在选择分割面时，需要考虑分割引起的新多边形数目并选择新增多边形数目最少的隔离面。为了充分利用BSP树的效率，通常可以结合PVS（潜在可见集）或其他类似的可见性预处理技术，减少实时漫游时BSP树遍历的复杂度。
 

　　2．四叉树四叉树是一个经典的空间剖分方法。可以转换为二维的场景可有效地使用四叉树进行管理。在地形绘制中就经常使用四叉树进行管理，尽管地形的每个点都具有一定的高度，但是高度远远小于地形的范围，因此从宏观的角度上看，地形可以参数化或者说摊平为一个二维的网格。在四叉树的建立过程中，首先用一个包围四边形逼近场景，然后以包围四边形做为根节点，迭代地一分为四。如果子节点中包含多个物体，那么继续剖分下去，直到剖分的层次或者子节点中包含的物体个数小于给定的阈值为止。图5-11显示了一个四叉树的两次剖分过程。
 

3．学三维游戏场景设计八叉树八叉树是另一种有效的三维数据结构，它的构建时间比BSP树短，且容易使用。八叉树的构造过程比BSP树简单。首先建立场景的长方体包围盒。长方体被均匀剖分为8个小的长方体。判断场景中每个多边形与8个小长方体的内外关系，如果某个多边形与小长方体相交或位于某个小长方体内部，将多边形加入这个小长方体的多边形列表。场景遍历完毕后，检查8个小长方体包含的多边形数目。对于每个非空的小长方体，作为八叉树的子节点，继续递归剖分下去。如果为空，则设为叶节点，停止剖分。当递归深度达到给定的数目或每个节点中包含的多边形数目小于某个数值时，剖分停止。在建立节点与多边形关系的过程中，如果一个多边形与两个以上的节点相交，可以将多边形添加到每个与它相交的节点中，也可以将多边形沿节点之间的边界面剖分，并将分割出的小多边形分归各方。与BSP树方法类似，后一种增加了场景中的多边形数目，前一种则增加了处理的复杂性，即在遍历时必须保证这类多边形只被处理一次。需要注意，场景中所有多边形只保存在八叉树的叶节点中。在某个节点被剖分出8个子节点并将所有多边形添加到子节点的多边形列表后，非叶节点的多边形列表就被删除，只保留节点包含的多边形数目。
 

　　八叉树剖分示意图5.1.5  景物包围体与场景剖分技术比较大部分三维游戏使用BSP树结构组织场景中的多边形物体。对于大规模高度场的地形绘制则使用四叉树。由于BSP树的构造时间长，不适合于非常大的场景。而且，如果场景多边形与剖分平面相交，BSP树就要求沿平面分割多边形，增加了场景多边形的数目。而八叉树非常适合于大的三维空间场景，但碰撞检测功能较弱。它们的比较如表5-2所示。
 

二叉树、四叉树、八叉树比较技术名称适用场景构建复杂度实用性二叉树尺寸不是特别大的室内建筑场景复杂大部分三维游戏引擎四叉树室外基于高度场的地形一般仅用于地形绘制八叉树大规模三维室内空间场景一般复杂三维游戏引擎均匀八叉树体素表示场景、分布均匀的三维场景简单少量三维游戏引擎场景包围体与场景剖分技术的比较如表5-3所示，两者的效果示意图如图5-13所示。不难看出，场景包围体技术紧密包围物体，不同物体的包围体可能有重合。场景剖分技术紧密贴合空间，一个物体可能会跨越几个子空间。
 

达内游戏学院认为将网络游戏制作应用到教育领域中，实现与课堂教学三维游戏场景设计结合，并不是指的一定要用到网络游戏制作的外在形式。
http://fgdfy546.blog.163.com/blog/static/17393113020101043637766/