在使用OpenGL进行三维建模工作的时候，gluProject无疑是必须使用的最重要的函数之一，但是我在很长一段时间内一直没有弄明白这个函数的内在工作过程，相信很多作相关研究的新手也并不真正清楚（我本身也是新手）。OpenGL红宝书中的相关讲解也只是针对函数的用途、参数、注意事项等的说明。当我们需要自己需要加载定标参数来写一个新的投影函数，或者说将我们定标得到的原始参数扩展成为符合OpenGL对应的模型视图矩阵、投影矩阵、视口向量的时候，我们必须知道OpenGL的这个函数究竟是如何工作的。本文只就gluProject的工作过程进行分析，对于各种定标参数矩阵的扩展等内容将在以后的文章中说明。

先来揭秘一下gluProject函数的本来面目（源代码）：

view plaincopy to clipboardprint?
/*  
Transform a point(column vector) by a 4x4 matrix. Then, out = m * in  
Input: m ----- the 4x4 matrix, in ---- the 4x1 vector  
Output: out ---- the resulting 4x1 vector  
*/  
static void transform_point(GLdouble out[4], const GLdouble m[16], const GLdouble in[4])   
{   
#define M(row,col) m[col*4+row]   
    out[0] =    
        M(0, 0) * in[0] + M(0, 1) * in[1] + M(0, 2) * in[2] + M(0, 3) * in[3];   
    out[1] =   
        M(1, 0) * in[0] + M(1, 1) * in[1] + M(1, 2) * in[2] + M(1, 3) * in[3];   
    out[2] =   
        M(2, 0) * in[0] + M(2, 1) * in[1] + M(2, 2) * in[2] + M(2, 3) * in[3];   
    out[3] =   
        M(3, 0) * in[0] + M(3, 1) * in[1] + M(3, 2) * in[2] + M(3, 3) * in[3];   
#undef M   
}   
// gluProject source code (说明见OpenGL API文档)   
GLint gluProject(GLdouble objx, GLdouble objy, GLdouble objz, const GLdouble  modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *winx, GLdouble *winy, GLdouble *winz)   
{   
    // matrice transformation   
    GLdouble in[4], out[4];   
    //initialize matrice and column vector as a transformer   
    in[0] = objx;   
    in[1] = objy;   
    in[2] = objz;   
    in[3] = 1.0;   
    transform_point(out, modelMatrix, in);  //乘以模型视图矩阵   
    transform_point(in, projMatrix, out);   //乘以投影矩阵   
    //齐次向量的第四项不能为0   
    if(in[3] == 0.0)   
        return GL_FALSE;   
    //向量齐次化标准化   
    in[0] /= in[3];   
    in[1] /= in[3];   
    in[2] /= in[3];   
    //视口向量的作用   
    *winx = viewport[0] + (1 + in[0]) * viewport[2] / 2;   
    *winy = viewport[1] + (1 + in[1]) * viewport[3] / 2;   
    *winz = (1 + in[2]) / 2;   
    return GL_TRUE;   
}  



本文来自CSDN博客，转载请标明出处：http://blog.csdn.net/kaizitop/archive/2009/05/08/4158521.aspx