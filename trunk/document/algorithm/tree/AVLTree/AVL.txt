

AVL树：高度平衡二叉查找树


由来：
	实现此目标的方法是由两位俄国数学家 G.M.Adelson-Velskii 和 E.M.Landis于1962年描述的，
为了纪念他们，结果得到的二叉查找树称为 AVL树


定义：
	1，AVL树是一颗二叉查找树，它的根的左子树和右子树高度差至多为1，而且左右子树也是AVL树。
	2，AVL树的每个节点联系着一个平衡因子，根据左子树的高度大于、等于、或小于右子树的高度，平衡因子可以为左-高、等-高、右-高。


enum Balance_factor{left_higher, equal_height, right_higher};
平衡因子在AVL树的所有节点中，我们必须相应地改写以前的结点说明。



摘自：
	C++数据结构与程序设计         作者：Robert L.Kruse & Alexander J.Rybba  钱丽萍 译



       任一结点的平衡因子只可能是-1,0，1。

　     假定avl树上因插入新结点而失衡的最小子树的根结点为a,失去平衡后的调整操作

      系统可依据失衡原因而归纳为下述四种类型：

                 （1）ll型调整

                      失衡原因：在a的左孩子的左子树上插入结点并导致a的平衡因子由1变为2.

                      调整操作：“提升”b为新子树的根结点，a下降为b的右孩子，同时将b原来的右

                      子树br调整为a的左子树；

                 （2）rr型调整

                      失衡原因：在a的右孩子的右子树上插入结点并导致a的平衡因子由-1变为-2.

                      调整操作：提升b为新子树的根结点，a下降为b的左孩子，同时将b原来的左子树

                      bl调整为a的右子树；

                 （3）lr型调整

                      失衡原因：在a的左孩子的右子树上插入结点并导致a的平衡因子由1变为2.

                      调整操作：提升c为新子树的根结点，a下降为c的右孩子，同时调整c原来的两棵

                      子树，

                 （4）rl型调整

                      失衡原因：在a的右孩子的左子树上插入结点并导致a的平衡因子由-1变为-2 ,

                      调整操作：提升c为新子树的根结点，a下降为c的左孩子，同时调整c原来的两棵

                      子树，其中，c原来的左子树cl调整为b现在的右子树，c原来的右子树cr调整为a

                      现在的左子树。


