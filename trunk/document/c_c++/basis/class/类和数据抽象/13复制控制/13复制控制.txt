每种类型，无论是内置类型还是类类型，都对该类型对象的一组（可能为空的）操作的含义进行了定义。
比如，我们可以将两个 int 值相加，运行 vector 对象的 size 操作，等等。这些操作定义了用给定类
型的对象可以完成什么任务。

每种类型还定义了创建该类型的对象时会发生什么――构造函数定义了该类类型对象的初始化。类型还能
控制复制、赋值或撤销该类型的对象时会发生什么――类通过特殊的成员函数：复制构造函数、赋值操作
符和析构函数来控制这些行为。本章将介绍这些操作。

当定义一个新类型的时候，需要显式或隐式地指定复制、赋值和撤销该类型的对象时会发生什么――这是
通过定义特殊成员：复制构造函数、赋值操作符和析构函数来达到的。如果没有显式定义复制构造函数
或赋值操作符，编译器（通常）会为我们定义。

【★】复制构造函数是一种特殊构造函数，具有单个形参，该形参（常用 const 修饰）是对该类类型
的引用。当定义一个新对象并用一个同类型的对象对它进行初始化时，将显式使用复制构造函数。当
将该类型的对象传递给函数或函数返回该类型的对象时，将隐式使用复制构造函数。

【★】析构函数是构造函数的互补：当对象超出作用域或动态分配的对象被删除时，将自动应用析构函
数。析构函数可用于释放对象时构造或在对象的生命期中所获取的资源。不管类是否定义了自己的析构
函数，编译器都自动执行类中非 static 数据成员的析构函数。

在下一章我们将进一步学习操作符重载，本章中我们先介绍赋值操作符。与构造函数一样，赋值操作符
可以通过指定不同类型的右操作数而重载。右操作数为类类型的版本比较特殊：如果我们没有编写这种
版本，编译器将为我们合成一个。

【★】复制构造函数、赋值操作符和析构函数总称为复制控制。编译器自动实现这些操作，但类也可以
定义自己的版本。

复制控制是定义任意 C++ 类必不可少的部分。初学 C++ 的程序员常对必须定义在复制、赋值或撤销对
象时发生什么感到困惑。因为如果我们没有显式定义这些操作，编译器将为我们定义它们（尽管它们也
许不像我们期望的那样工作），这往往使初学者更加困惑。
 
通常，编译器合成的复制控制函数是非常精练的――它们只做必需的工作。但对某些类而言，依赖于默认
定义会导致灾难。实现复制控制操作最困难的部分，往往在于识别何时需要覆盖默认版本。有一种特别
常见的情况需要类定义自己的复制控制成员的：类具有指针成员。
【★】当类具有指针成员时,需要类定义自己的复制控制成员



