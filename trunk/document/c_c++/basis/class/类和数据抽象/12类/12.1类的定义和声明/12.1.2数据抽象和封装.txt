
【★】类背后蕴涵的基本思想是数据抽象和封装。

数据抽象是一种依赖于接口和实现分离的编程（和设计）技术。类设计者必须关心类是如何实现的，但
使用该类的程序员不必了解这些细节。相反，使用一个类型的程序员仅需了解类型的接口，他们可以抽
象地考虑该类型做什么，而不必具体地考虑该类型如何工作。

封装是一项低层次的元素组合起来的形成新的、高层次实体珠技术。函数是封装的一种形式：函数所
执行的细节行为被封装在函数本身这个更大的实体中。被封装的元素隐藏了它们的实现细节――可以调
用一个函数但不能访问它所执行的语句。同样地，类也是一个封装的实体：它代表若干成员的聚焦，大
多数（良好设计的）类类型隐藏了实现该类型的成员。

标准库类型 vector 同时具备数据抽象和封装的特性。在使用方面它是抽象的，只需考虑它的接口，即
它能执行的操作。它又是封装的，因为我们既无法了解该类型如何表示的细节，也无法访问其任意的实
现制品。另一方面，数组在概念上类似于 vector，但既不是抽象的，也不是封装的。可以通过访问存放
数组的内存来直接操纵数组。


【访问标号实施抽象和封装】

在 C++ 中，使用访问标号（第 2.8 节）来定义类的抽象接口和实施封装。一个类可以没有访问标号，也
可以包含多个访问标号：
1、程序的所有部分都可以访问带有 public 标号的成员。类型的数据抽象视图由其 public 成员定义。
2、使用类的代码不可以访问带有 private 标号的成员。private 封装了类型的实现细节。

一个访问标号可以出现的次数通常是没有限制的。每个访问标号指定了随后的成员定义的访问级别。这
个指定的访问级别持续有效，直到遇到下一个访问标号或看到类定义体的右花括号为止。

可以在任意的访问标号出现之前定义类成员。在类的左花括号之后、第一个访问标号之前定义成员的访问
级别，其值依赖于类是如何定义的。如果类是用 struct 关键字定义的，则在第一个访问标号之前的成员
是公有的；如果类是用 class 关键字是定义的，则这些成员是私有的。
【★】struct下默认public;  class下默认private

【建议：具体类型和抽象类型】
并非所有类型都必须是抽象的。标准库中的 pair 类就是一个实用的、设计良好的具体类而不是抽象类。
具体类会暴露而非隐藏其实现细节。
一些类，例如 pair，确实没有抽象接口。pair 类型只是将两个数据成员捆绑成单个对象。在这种情况下，
隐藏数据成员没有必要也没有明显的好处。在像 pair 这样的类中隐藏数据成员只会造成类型使用的复杂化。
尽管如此，这样的类型通常还是有成员函数。特别地，如果类具有内置类型或复合类型数据成员，那么定
义构造函数来初始化这些成员就是一个好主意。类的使用都也可以初始化或赋值数据成员，但由类来做更
不易出错。

【编程角色的不同类别】
程序员经常会将运行应用程序的人看作“用户”。应用程序为最终“使用”它的用户而设计，并响应用户的反
馈而完善。类也类似：类的设计者为类的“用户”设计并实现类。在这种情况下，“用户”是程序员，而不是
应用程序的最终用户。
成功的应用程序的创建者会很好地理解和实现用户的需求。同样地，良好设计的、实用的类，其设计也要
贴近类用户的需求。
另一方面，类的设计者与实现者之间的区别，也反映了应用程序的用户与设计和实现者之间的区分。用户
只关心应用程序能否以合理的费用满足他们的需求。同样地，类的使用者只关心它的接口。好的类设计者
会定义直观和易用的类接口，而使用者只关心类中影响他们使用的部分实现。如果类的实现速度太慢或给
类的使用者加上负担，则必然引起使用者的关注。在良好设计的类中，只有类的设计者会关心实现。
在简单的应用程序中，类的使用者和设计者也许是同一个人。即使在这种情况下，保持角色区分也是有益
的。设计类的接口时，设计者应该考虑的是如何方便类的使用；使用类的时候，设计者就不应该考虑类如
何工作。
注意，C++ 程序员经常会将应用程序的用户和类的使用者都称为“用户”。


【关键概念：数据抽象和封装的好处】
数据抽象和封装提供了两个重要优点：
1、避免类内部出现无意的、可能破坏对象状态的用户级错误。
2、随时间推移可以根据需求改变或缺陷（bug）报告来完美类实现，而无须改变用户级代码。
仅在类的私有部分定义数据成员，类的设计者就可以自由地修改数据。如果实现改变了，那么只需检查类
代码来了解此变化可能造成的影响。如果数据为仅有的，则任何直接访问原有数据成员的函数都可能遭到
破坏。在程序可重新使用之前，有必要定位和重写依赖原有表示的那部分代码。

同样地，如果类的内部状态是私有的，则数据成员的改变只可能在有限的地方发生。避免数据中出现用户
可能引入的错误。如果有缺陷会破坏对象的状态，就在局部位置搜寻缺陷：如果数据是私有的，那么只有
成员函数可能对该错误负责。对错误的搜寻是有限的，从而大大方便了程序的维护和修正。

如果数据是私有的并且没有改变成员函数的接口，则操纵类对象的用户函数无须改变。

改变头文件中的类定义可有效地改变包含该头文件的每个源文件的程序文本，所以，当类发生改变时，使
用该类的代码必须重新编译。















