【什么是类】
类就是定义了一个新的类型和一个新作用域。

【类成员】
每个类可以没有成员，也可以定义多个成员，成员可以是数据、函数或类型别名。
	
一个类可以包含若干公有的、私有的和受保护的部分。我们已经使用过 public 和 private 访问标号：
在 public 部分定义的成员可被使用该类型的所有代码访问；在 private 部分定义的成员可被其他类成
员访问。在第十五章讨论继承时将进一步探讨 protected。

所有成员必须在类的内部声明，一旦类定义完成后，就没有任何方式可以增加成员了。

【构造函数】

建一个类类型的对象时，编译器会自动使用一个构造函数（第 2.3.3 节）来初始化该对象。构造函数
是一个特殊的、与类同名的成员函数，用于给每个数据成员设置适当的初始值。
构造函数一般就使用一个构造函数初始化列表（第 7.7.3 节），来初始化对象的数据成员：
// default constructor needed to initialize members of built-in type
Sales_item(): units_sold(0), revenue(0.0) { }

【成员函数】

在类内部，声明成员函数是必需的，而定义成员函数则是可选的。在类内部定义的函数默认为 inline
在类外部定义的成员函数必须指明它们是在类的作用域中。Sales_item::avg_price 的定义使用作用
域操作符（第 1.2.2 节）来指明这是 Sales_item 类中 avg_price 函数的定义。

成员函数有一个附加的隐含实参，将函数绑定到调用函数的对象――当我们编写下面的函数时：
trans.avg_price()
就是在调用名 trans 的对象的 avg_price 函数。如果 trans 是一个 Sales_item 对象，则在 
avg_price 函数内部对 Sales_item 类成员引用就是对 trans 成员的引用。


将关键字 const 加在形参表之后，就可以将成员函数声明为常量：
double avg_price() const;

const 成员不能改变其所操作的对象的数据成员。const 必须同时出现在声明和定义中，若只出现在其
中一处，就会出现一个编译时错误。

	