设计类的时候，需要记住一些有用的经验原则，可以有助于确定应该提供哪些重载操作符（如果需要提供）。

【不要重载具有内置含义的操作符】
赋值操作符、取地址操作符和逗号操作符对类类型操作数有默认含义。如果没有特定重载版本，编译器就自己定义
以下这些操作符。

合成赋值操作符（第 13.2 节）进行逐个成员赋值：使用成员自己的赋值：使用成员自己的赋值操作依次对每个成
员进行赋值。

【★】默认情况下，取地址操作符（&）和逗号操作符（,）在类类型对象上的执行，与在内置类型对象上的执行
一样。取地址操作符返回对象的内存地址，逗号操作符从左至右计算每个表达式的值，并返回最右边操作数的值。

内置逻辑与（&&）和逻辑或（||）操作符使用短路求值（第 5.2 节）。如果重新定义该操作符，将失去操作符的
短路求值特征。

通过为给定类类型的操作数重定义操作符，可以改变这些操作符的含义。

重载逗号、取地址、逻辑与、逻辑或等等操作符通常不是好做法。这些操作符具有有用的内置含义，如果我们定义
了自己的版本，就不能再使用这些内置含义。
 
有时我们需要定义自己的赋值运算。这样做时，它应表现得类似于合成操作符：赋值之后，左右操作数的值应是相
同的，并且操作符应返回对左操作数的引用。重载的赋值运算应在赋值的内置含义基础上进行定制，而不是完全绕
开。

【大多数操作符对类对象没有意义】
除非提供了重载定义，赋值、取地址和逗号操作符对于类类型操作数没有意义。设计类的时候，应该确定要支持哪
些操作符。
为类设计操作符，最好的方式是首先设计类的公用接口。定义了接口之后，就可以考虑应将哪些操作符定义为重载
操作符。那些逻辑上可以映射到某个操作符的操作可以考虑作为候选的重载操作符。例如：
1、相等测试操作应使用 operator==。
2、一般通过重载移位操作符进行输入和输出。
3、测试对象是否为空的操作可用逻辑非操作符 operator! 表示。

【复合赋值操作符】
如果一个类有算术操作符（第 5.1 节）或位操作符（第 5.3 节），那么，提供相应的复合赋值操作符一般是个好
的做法。例如，Sales_item 类定义了 + 操作符，逻辑上，它也应该定义 +=。不用说，操作符的行为应定义为与
内置操作符一样：复合赋值的行为应与 + 之后接着 = 类似。

【相等和关系操作符】
将要用作关联容器键类型的类应定义 < 操作符。关联容器默认使用键类型的 < 操作符。即使该类型将只存储在顺
序容器中，类通常也应该定义相等（==）和小于（<）操作符，理由是许多算法假定这个操作符存在。例如 sort 
算法使用 < 操作符，而 find 算法使用 == 操作符。
【★】将要用作关联容器键类型的类应定义 < 操作符。关联容器默认使用键类型的 < 操作符（ sort 算法使用 
< 操作符，而 find 算法使用 == 操作符）。


【警告：审慎使用操作符重载】
每个操作符用于内置类型都有关联的含义。例如，二元 + 与加法是完全相同的。将二元 + 对应到一个类类型的类
似操作可提供方便的简写方法。例如，标准库的类型 string，遵循许多程序设计语言的通用规范，使用 + 表示连
接――将一个串“加”至另一个串。

当内置操作符和类型上的操作存在逻辑对应关系时，操作符重载最有用。使用重载操作符而不是创造命名操作，可
以令程序更自然、更直观，而滥用操作符重载使得我们的类难以理解。

在实践中很少发生明显的操作符重载滥用。例如，不负责任的程序员可能会定义 operator+ 来执行减法。更常见
但仍不可取的是，改变操作符的“正常”含义以强行适应给定类型。操作符应该只用于对用户而言无二义的操作。
在这里所谓有二义的操作符，就是指具有多个不同解释的操作符。

当一个重载操作符的含义不明显时，给操作取一个名字更好。对于很少用的操作，使用命名函数通常也比用操作符
更好。如果不是普通操作，没有必要为简洁而使用操作符。
【★】对于很少用的操作，使用命名函数通常也比用操作符更好。

如果类定义了相等操作符，它也应该定义不等操作符 !=。类用户会假设如果可以进行相等比较，则也可以进行不等
比较。同样的规则也应用于其他关系操作符。如果类定义了 <，则它可能应该定义全部的四个关系操作符（>，>=，
<，<=）。
【★】如果类定义了相等操作符，它也应该定义不等操作符 !=。

【选择成员或非成员实现】
为类设计重载操作符的时候，必须选择是将操作符设置为类成员还是普通非成员函数。在某些情况下，程序员没有
选择，操作符必须是成员；在另一些情况下，有些经验原则可指导我们做出决定。下面是一些指导原则，有助于
决定将操作符设置为类成员还是普通非成员函数：
1、赋值（=）、下标（[]）、调用（()）和成员访问箭头（->）等操作符必须定义为成员，将这些操作符定义为
非成员函数将在编译时标记为错误。
2、像赋值一样，复合赋值操作符通常应定义为类的成员，与赋值不同的是，不一定非得这样做，如果定义非成员
复合赋值操作符，不会出现编译错误。
3、改变对象状态或与给定类型紧密联系的其他一些操作符，如自增、自减和解引用，通常就定义为类成员。
4、对称的操作符，如算术操作符、相等操作符、关系操作符和位操作符，最好定义为普通非成员函数。





















