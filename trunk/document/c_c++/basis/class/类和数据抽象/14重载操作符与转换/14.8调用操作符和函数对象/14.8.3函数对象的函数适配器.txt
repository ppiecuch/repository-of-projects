标准库提供了一组函数适配器，用于特化和扩展一元和二元函数对象。函数适配器分为如下两类：

【★】1.绑定器，是一种函数适配器，它通过将一个操作数绑定到给定值而将二元函数对象转换为
一元函数对象。
【★】2.求反器，是一种函数适配器，它将谓词函数对象的真值求反。

标准库定义了两个绑定器适配器：bind1st 和 bind2nd。每个绑定器接受一个函数对象和一个值。正
如你可能想到的，bind1st 将给定值绑定到二元函数对象的第一个实参，bind2nd 将给定值绑定到二
元函数对象的第二个实参。例如，为了计算一个容器中所有小于或等于 10 的元素的个数，可以这样
给 count_if 传递值：
【★】bind1st 将给定值绑定到二元函数对象的第一个实参，bind2nd 将给定值绑定到二元函数对象
的第二个实参。
     count_if(vec.begin(), vec.end(),
              bind2nd(less_equal<int>(), 10));

传给 count_if 的第三个实参使用 bind2nd 函数适配器，该适配器返回一个函数对象，该对象用 10 
作右操作数应用 <= 操作符。这个 count_if 调用计算输入范围中小于或等于 10 的元素的个数。

标准库还定义了两个求反器：not1 和 not2。你可能已经想到的，not1 将一元函数对象的真值求反，
not2 将二元函数对象的真值求反。

为了对 less_equal 函数对象的绑定求反，可以编写这样的代码：

     count_if(vec.begin(), vec.end(),
             not1(bind2nd(less_equal<int>(), 10)));


这里，首先将 less_equal 对象的第二个操作数绑定到 10，实际上是将该二元操作转换为一元操作。
再用 not1 对操作的返回值求反，效果是测试每个元素是否 <=。然后，对结果真值求反。这个 
count_if 调用的效果是对不 <= 10 的那些元素进行计数。
【★】not1 将一元函数对象的真值求反，not2 将二元函数对象的真值求反。
