可以为类类型的对象重载函数调用操作符。一般为表示操作的类重载调用操作符。例如，可以定义名
为 absInt 的结构，该结构封装将 int 类型的值转换为绝对值的操作：
【★】可以为类类型的对象重载函数调用操作符。

     struct absInt {
         int operator() (int val) {
             return val < 0 ? -val : val;
         }
     };

这个类很简单，它定义了一个操作：函数调用操作符，该操作符有一个形参并返回形参的绝对值。

通过为类类型的对象提供一个实参表而使用调用操作符，所用的方式看起来像一个函数调用：

     int i = -42;
     absInt absObj;  // object that defines function call operator
     unsigned int ui = absObj(i);     // calls absInt::operator(int)


尽管 absObj 是一个对象而不是函数，我们仍然可以“调用”该对象，效果是运行由 absObj 对象定义
的重载调用操作符，该操作符接受一个 int 并值并返回它的绝对值。

函数调用操作符必须声明为成员函数。一个类可以定义函数调用操作符的多个版本，由形参的数目或类
型加以区别。
【★】函数调用操作符必须声明为成员函数。
【★】一个类可以定义函数调用操作符的多个版本，由形参的数目或类型加以区别。
【★】定义了调用操作符的类，其对象常称为函数对象，即它们是行为类似函数的对象。


