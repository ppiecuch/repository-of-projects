理解基类类型和派生类型之间的转换，对于理解面向对象编程在 C++ 中如何工作非常关键。

我们已经看到，每个派生类对象包含一个基类部分，这意味着可以像使用基类对象一样在派生类对象
上执行操作。因为派生类对象也是基类对象，所以存在从派生类型引用到基类类型引用的自动转换，
即，可以将派生类对象的引用转换为基类子对象的引用，对指针也类似。
【★】在从派生类型引用到基类类型引用的自动转换

基类类型对象既可以作为独立对象存在，也可以作为派生类对象的一部分而存在，因此，一个基类对
象可能是也可能不是一个派生类对象的部分，结果，没有从基类引用（或基类指针）到派生类引用
（或派生类指针）的（自动）转换。
【★】没有从基类引用（或基类指针）到派生类引用（或派生类指针）的（自动）转换。

相对于引用或指针而言，对象转换的情况更为复杂。虽然一般可以使用派生类型的对象对基类类型的
对象进行初始化或赋值，但，没有从派生类型对象到基类类型对象的直接转换。

