面向对象编程基于三个基本概念：数据抽象、继承和动态绑定。在 C++ 中，用类进行数据抽象，用类
派生从一个类继承另一个：派生类继承基类的成员。动态绑定使编译器能够在运行时决定是使用基类
中定义的函数还是派生类中定义的函数。
【★】面向对象编程基于三个基本概念：数据抽象、继承和动态绑定。

继承和动态绑定在两个方面简化了我们的程序：能够容易地定义与其他类相似但又不相同的新类，能
够更容易地编写忽略这些相似类型之间区别的程序。


许多应用程序的特性可以用一些相关但略有不同的概念来描述。例如，书店可以为不同的书提供不同
的定价策略，有些书可以只按给定价格出售，另一些书可以根据不同的折扣策略出售。可以给购买某
书一定数量的顾客打折，或者，购买一定数量以内可以打折而超过给定限制就付全价。

面向对象编程（Object-oriented programming，OOP）与这种应用非常匹配。通过继承可以定义一些
类型，以模拟不同种类的书，通过动态绑定可以编写程序，使用这些类型而又忽略与具体类型相关的差
异。

继承和动态绑定的思想在概念上非常简单，但对于如何创建应用程序以及对于程序设计语言必须支持
哪些特性，它们的含义深远。在讨论 C++ 如何支持面向对象编程之前，我们将介绍这种编程风格的一
些基本概念。

