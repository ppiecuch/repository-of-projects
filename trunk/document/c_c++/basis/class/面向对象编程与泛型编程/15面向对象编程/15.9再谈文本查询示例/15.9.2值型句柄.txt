程序将处理计算查询，而不建立查询，但是，需要能够创建查询以便运行程序。最简单的办法是编
写 C++ 表达式直接创建查询，例如，可以编写这样的代码：
     Query q = Query("fiery") & Query("bird") | Query("wind");

以产生前面描述的复合查询。

这个问题描述暗示我们，用户级代码将不能直接使用我们的继承层次，相反，我们将定义一个名为
 Query 的句柄类，用它隐藏继承层次。用户代码将根据句柄执行，用户代码只能间接操纵 
 Query_base 对象。


像 Sales_item 句柄一样，Query 句柄将保存指向继承层次中一个类型的对象的指针，Query 类还
指向一个使用计数，我们用这个使用计数管理句柄指向的对象。

在这种情况下，句柄将完全屏蔽基础继承层次，用户将只能间接地通过 Query 对象的操作创建和操
纵 Query_base 对象。我们将定义 Query 对象的三个重载操作符以及 Query构造函数，Query 构造
函数将动态分配新的 Query_base 对象。每个操作符将生成的对象绑定到 Query 句柄：& 操作符将
生成绑定到新的 AndQuery 对象的 Query 对象；| 操作符将生成绑定到新的 OrQuery 对象的 Query 
对象；~ 操作符将生成绑定到新的 NotQuery 对象的 Query 对象。给 Query 定义一个参数为 string
 对象的构造函数，该构造函数将生成新的 WordQuery。

Query 类将提供与 Query_base 类同样的操作：eval 对相关查询进行计算，display 打印查询。它
将定义重载输出操作符显示相关查询。


(因为是举例说明的篇章,且其中带几个设计图像,具体请参考CHM了解 )


