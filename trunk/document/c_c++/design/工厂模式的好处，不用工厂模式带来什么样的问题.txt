收集资料后整理如下： 
面向接口编程：设计模式的一个重要原则是针对接口编程，不要依赖实现类。工厂模式遵循了这一个原则。 
开闭原则（Open-Closed Principle,OCP） “Software entities should be open for extension,but closed for modification”。翻译过来就是：“软件实体应当对扩展开放，对修改关闭”。这句话说得略微有点专业，我们把它讲得更通俗一点，也就是：软件系统中包含的各种组件，例如模块（Modules）、类（Classes）以及功能（Functions）等等，应该在不修改现有代码的基础上，引入新功能。开闭原则中“开”，是指对于组件功能的扩展是开放的，是允许对其进行功能扩展的；开闭原则中“闭”，是指对于原有代码的修改是封闭的，即不应该修改原有的代码。 

有了以上两个原则便于理解为什么使用工厂模式。 


使用工厂的理由（转）： 
1.把对象的创建集中在一个地方(工厂中),在增加新的对象类型的时候,只需要改变工厂方法;否则在应用中四处散布对象创建逻辑,如果创建方法改变时则需要四处修改，维护量增加. 

2.应用的场合是新的对象类型很可能经常被添加进来.

http://peaceapp.iteye.com/blog/1214358 



工厂本质就是用工厂方法替代直接New来创建对象。这
里不是指的让用户重载一个新操作符号来进行创建对象的操作，而是说把New 操作封装在一个方法中，
等用户需要创建对象时调用此方法而避免直接使用New而已。这样做的目的就是之一就是封装，
避免代码中大量New的运算符，这当然 不是主要目的，因为这样虽然New少了，
CreateObject方法却多了，但是如果产品类的构造函数变了，
我想常用工厂模式的修改源代码的工作应该简 便许多吧，当然这算不上这个模式的好处，
它的真正强大的功能其实在于适应变化，这也是整个设计模式最根本的目的；
还有一点就是体现了抽象于实现的分离，当 然创建型模式都具有这个特点，工厂模式非常明显吧了，
把具体创建工作放置到工厂中，使客户端程序更专注与业务逻辑的，这样的代码结构也更进行合理。

http://hi.baidu.com/%C7%C6%C0%B4%C7%C3%C8%A5/blog/item/4d0047271614401e8b82a1f9.html